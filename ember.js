(function() {
    "use strict";
    var ember$metal$core$$default, ember$metal$platform$$create, ember$metal$platform$$platform, ember$metal$error$$default, ember$metal$array$$map, ember$metal$array$$forEach, ember$metal$array$$filter, ember$metal$array$$indexOf, ember$metal$utils$$generateGuid, ember$metal$utils$$guidFor, ember$metal$utils$$getMeta, ember$metal$utils$$setMeta, ember$metal$utils$$metaPath, ember$metal$utils$$wrap, ember$metal$utils$$makeArray, ember$metal$utils$$tryInvoke, ember$metal$utils$$inspect, ember$metal$utils$$apply, ember$metal$utils$$applyStr, ember$metal$utils$$GUID_KEY, ember$metal$utils$$GUID_PREFIX, ember$metal$utils$$META_DESC, ember$metal$utils$$EMPTY_META, ember$metal$utils$$META_KEY, ember$metal$utils$$meta, ember$metal$utils$$typeOf, ember$metal$utils$$tryCatchFinally, ember$metal$utils$$isArray, ember$metal$utils$$canInvoke, ember$metal$utils$$tryFinally, ember$metal$property_get$$getWithDefault, ember$metal$property_get$$default, ember$metal$property_get$$get, ember$metal$property_get$$normalizeTuple, ember$metal$property_get$$_getPath, ember$metal$events$$listenersUnion, ember$metal$events$$listenersDiff, ember$metal$events$$addListener, ember$metal$events$$suspendListener, ember$metal$events$$suspendListeners, ember$metal$events$$watchedEvents, ember$metal$events$$sendEvent, ember$metal$events$$hasListeners, ember$metal$events$$listenersFor, ember$metal$events$$on, ember$metal$events$$removeListener, ember$metal$observer_set$$default, ember$metal$property_events$$propertyWillChange, ember$metal$property_events$$propertyDidChange, ember$metal$property_events$$overrideChains, ember$metal$property_events$$beginPropertyChanges, ember$metal$property_events$$endPropertyChanges, ember$metal$property_events$$changeProperties, ember$metal$properties$$Descriptor, ember$metal$properties$$defineProperty, ember$metal$properties$$deprecateProperty, ember$metal$property_set$$trySet, ember$metal$property_set$$set, ember$metal$watch_key$$watchKey, ember$metal$watch_key$$unwatchKey, ember$metal$chains$$flushPendingChains, ember$metal$chains$$finishChains, ember$metal$chains$$removeChainWatcher, ember$metal$chains$$ChainNode, ember$metal$watch_path$$watchPath, ember$metal$watch_path$$unwatchPath, ember$metal$watching$$watch, ember$metal$watching$$isWatching, ember$metal$watching$$unwatch, ember$metal$watching$$rewatch, ember$metal$watching$$destroy, ember$metal$merge$$default, ember$metal$enumerable_utils$$default, ember$metal$expand_properties$$default, ember$metal$is_none$$none, ember$metal$is_none$$default, ember$metal$is_none$$isNone, ember$metal$is_empty$$empty, ember$metal$is_empty$$default, ember$metal$is_empty$$isEmpty, ember$metal$is_empty$$empty, ember$metal$computed$$ComputedProperty, ember$metal$computed$$computed, ember$metal$computed$$cacheFor, ember$metal$map$$OrderedSet, ember$metal$map$$Map, ember$metal$map$$MapWithDefault, ember$metal$observer$$addObserver, ember$metal$observer$$observersFor, ember$metal$observer$$removeObserver, ember$metal$observer$$addBeforeObserver, ember$metal$observer$$_suspendBeforeObserver, ember$metal$observer$$_suspendObserver, ember$metal$observer$$_suspendBeforeObservers, ember$metal$observer$$_suspendObservers, ember$metal$observer$$beforeObserversFor, ember$metal$observer$$removeBeforeObserver, backburner$utils$$default, backburner$queue$$Queue, backburner$deferred_action_queues$$DeferredActionQueues, backburner$$Backburner, ember$metal$run_loop$$default, ember$metal$binding$$bind, ember$metal$binding$$oneWay, ember$metal$binding$$Binding, ember$metal$binding$$isGlobalPath, ember$metal$mixin$$mixin, ember$metal$mixin$$default, ember$metal$mixin$$required, ember$metal$mixin$$aliasMethod, ember$metal$mixin$$observer, ember$metal$mixin$$immediateObserver, ember$metal$mixin$$beforeObserver, ember$metal$mixin$$IS_BINDING, ember$metal$mixin$$Mixin, ember$runtime$keys$$default, ember$runtime$mixins$action_handler$$default, ember$runtime$system$core_object$$default, ember$metal$get_properties$$default, ember$metal$set_properties$$default, ember$runtime$mixins$observable$$default, ember$runtime$system$object$$default, ember$runtime$mixins$evented$$default, ember$views$system$utils$$setInnerHTML, ember$views$system$utils$$isSimpleClick, ember$runtime$system$string$$default, ember$runtime$system$string$$fmt, ember$runtime$system$string$$loc, ember$runtime$system$string$$w, ember$runtime$system$string$$decamelize, ember$runtime$system$string$$dasherize, ember$runtime$system$string$$camelize, ember$runtime$system$string$$classify, ember$runtime$system$string$$underscore, ember$runtime$system$string$$capitalize, ember$views$system$jquery$$default, ember$views$system$render_buffer$$default, container$inheriting_dict$$default, container$container$$default, ember$runtime$mixins$comparable$$default, ember$runtime$compare$$default, ember$runtime$mixins$enumerable$$default, ember$runtime$mixins$array$$default, ember$runtime$mixins$mutable_enumerable$$default, ember$runtime$mixins$mutable_array$$default, ember$runtime$mixins$freezable$$Freezable, ember$runtime$mixins$freezable$$FROZEN_ERROR, ember$runtime$mixins$copyable$$default, ember$runtime$copy$$default, ember$runtime$system$native_array$$A, ember$runtime$system$native_array$$NativeArray, ember$runtime$system$native_array$$default, ember$metal$instrumentation$$instrument, ember$metal$instrumentation$$subscribe, ember$metal$instrumentation$$unsubscribe, ember$metal$instrumentation$$reset, ember$views$views$states$default$$default, ember$views$views$states$pre_render$$default, ember$views$views$states$in_buffer$$default, ember$views$views$states$has_element$$default, ember$views$views$states$in_dom$$default, ember$views$views$states$destroying$$default, ember$views$views$states$$cloneStates, ember$views$views$states$$states, ember$views$views$view$$CoreView, ember$views$views$view$$View, ember$views$views$view$$ViewCollection, ember$views$mixins$component_template_deprecation$$default, ember$runtime$mixins$target_action_support$$default, ember$views$views$component$$default, ember$handlebars$compiler$$default, ember$runtime$system$lazy_load$$onLoad, ember$runtime$system$lazy_load$$runLoadHooks, ember$handlebars$component_lookup$$default, ember$handlebars$loader$$default, metamorph$$default, ember$handlebars$views$metamorph_view$$_Metamorph, ember$handlebars$views$metamorph_view$$_MetamorphView, ember$handlebars$views$metamorph_view$$_SimpleMetamorphView, ember$handlebars$views$handlebars_bound_view$$_HandlebarsBoundView, ember$handlebars$views$handlebars_bound_view$$SimpleHandlebarsView, ember$handlebars$helpers$binding$$bind, ember$handlebars$helpers$binding$$_triageMustacheHelper, ember$handlebars$helpers$binding$$resolveHelper, ember$handlebars$helpers$binding$$bindHelper, ember$handlebars$helpers$binding$$boundIfHelper, ember$handlebars$helpers$binding$$unboundIfHelper, ember$handlebars$helpers$binding$$withHelper, ember$handlebars$helpers$binding$$ifHelper, ember$handlebars$helpers$binding$$unlessHelper, ember$handlebars$helpers$binding$$bindAttrHelper, ember$handlebars$helpers$binding$$bindAttrHelperDeprecated, ember$handlebars$helpers$binding$$bindClasses, ember$handlebars$ext$$getEscaped, ember$handlebars$ext$$resolveParams, ember$handlebars$ext$$resolveHash, ember$handlebars$ext$$helperMissingHelper, ember$handlebars$ext$$blockHelperMissingHelper, ember$handlebars$ext$$registerBoundHelper, ember$handlebars$ext$$template, ember$handlebars$ext$$normalizePath, ember$handlebars$ext$$makeBoundHelper, ember$handlebars$ext$$handlebarsGet, ember$handlebars$ext$$evaluateUnboundHelper, ember$handlebars$string$$default, ember$handlebars$helpers$shared$$default, ember$handlebars$helpers$view$$ViewHelper, ember$handlebars$helpers$view$$viewHelper, ember$views$views$container_view$$default, ember$views$views$collection_view$$default, ember$handlebars$helpers$collection$$default, ember$handlebars$helpers$unbound$$default, ember$metal$logger$$default, ember$handlebars$helpers$debug$$logHelper, ember$handlebars$helpers$debug$$debuggerHelper, ember$runtime$mixins$controller_content_model_alias_deprecation$$default, ember$runtime$controllers$controller$$Controller, ember$runtime$controllers$controller$$ControllerMixin, ember$runtime$system$array_proxy$$default, ember$runtime$mixins$sortable$$default, ember$runtime$controllers$array_controller$$default, ember$handlebars$helpers$each$$EachView, ember$handlebars$helpers$each$$GroupedEach, ember$handlebars$helpers$each$$eachHelper, ember$handlebars$helpers$template$$default, ember$handlebars$helpers$partial$$default, ember$handlebars$helpers$yield$$default, ember$handlebars$helpers$loc$$default, ember$handlebars$controls$checkbox$$default, ember$handlebars$controls$select$$default, ember$handlebars$controls$select$$Select, ember$handlebars$controls$select$$SelectOption, ember$handlebars$controls$select$$SelectOptgroup, ember$handlebars$controls$text_support$$default, ember$handlebars$controls$text_area$$default, ember$handlebars$controls$text_field$$default, ember$handlebars$controls$$inputHelper, ember$handlebars$controls$$textareaHelper, ember$handlebars$$default, ember$routing$ext$controller$$default, ember$routing$ext$view$$default, ember$routing$system$dsl$$default, ember$routing$location$api$$default, route$recognizer$$default, $$events$$default, $$config$$config, $$config$$configure, $$utils1$$objectOrFunction, $$utils1$$isFunction, $$utils1$$isMaybeThenable, $$utils1$$isArray, $$utils1$$now, $$utils1$$keysOf, $$instrument$$default, $$promise$cast$$default, $$promise$all$$default, $$promise$race$$default, $$promise$resolve$$default, $$promise$reject$$default, rsvp$promise$$default, $$utils$$isArray, $$utils$$oCreate, $$utils$$extractQueryParams, $$utils$$log, $$utils$$bind, $$utils$$forEach, $$utils$$trigger, $$utils$$getChangelist, $$utils$$promiseLabel, $$utils$$subclass, $$utils$$merge, $$utils$$slice, $$utils$$isParam, $$utils$$coerceQueryParamsToString, $$handler$info$$default, $$transition$state$$default, router$transition$$Transition, router$transition$$logAbort, router$transition$$TransitionAborted, $$$transition$intent$$default, router$handler$info$resolved$handler$info$$default, router$handler$info$unresolved$handler$info$by$object$$default, router$handler$info$unresolved$handler$info$by$param$$default, $$$handler$info$factory$$default, $$transition$intent$named$transition$intent$$default, $$transition$intent$url$transition$intent$$default, $$router$$default, router$$default, ember$routing$system$router$$default, ember$routing$helpers$shared$$resolveParams, ember$routing$helpers$shared$$resolvePaths, ember$routing$helpers$link_to$$LinkView, ember$routing$helpers$link_to$$deprecatedLinkToHelper, ember$routing$helpers$link_to$$linkToHelper, ember$routing$location$none_location$$default, ember$routing$location$hash_location$$default, ember$routing$location$history_location$$default, ember$routing$location$auto_location$$default, ember$routing$system$controller_for$$controllerFor, ember$routing$system$controller_for$$generateControllerFactory, ember$routing$system$controller_for$$generateController, ember$routing$system$route$$default, ember$routing$helpers$outlet$$OutletView, ember$routing$helpers$outlet$$outletHelper, ember$routing$helpers$render$$default, ember$routing$helpers$action$$ActionHelper, ember$routing$helpers$action$$actionHelper, ember$routing$$default, ember$application$system$dag$$default, ember$runtime$system$namespace$$default, ember$application$system$resolver$$Resolver, ember$application$system$resolver$$DefaultResolver, ember$metal$libraries$$default, ember$metal$is_blank$$default, ember$metal$$default, rsvp$node$$default, rsvp$all$$default, rsvp$all$settled$$default, rsvp$race$$default, rsvp$hash$$default, rsvp$hash$settled$$default, rsvp$rethrow$$default, rsvp$defer$$default, rsvp$map$$default, rsvp$resolve$$default, rsvp$reject$$default, rsvp$filter$$default, rsvp$asap$$default, rsvp$$Promise, rsvp$$EventTarget, rsvp$$all, rsvp$$allSettled, rsvp$$race, rsvp$$hash, rsvp$$hashSettled, rsvp$$rethrow, rsvp$$defer, rsvp$$denodeify, rsvp$$configure, rsvp$$on, rsvp$$off, rsvp$$resolve, rsvp$$reject, rsvp$$async, rsvp$$map, rsvp$$filter, ember$runtime$ext$rsvp$$onerrorDefault, ember$runtime$ext$rsvp$$default, ember$runtime$mixins$deferred$$default, ember$runtime$system$object_proxy$$default, ember$runtime$controllers$object_controller$$default, ember$views$system$event_dispatcher$$default, ember$extension$support$container_debug_adapter$$default, ember$application$system$application$$default, ember$application$ext$controller$$default;

    (function() {
        var Ember = this.Ember || (this.Ember = {});

        // Default imports, exports and lookup to the global object;
        var imports = Ember.imports = Ember.imports || this;

        var exports = Ember.exports = Ember.exports || this;
        var lookup  = Ember.lookup  = Ember.lookup  || this;

        // aliases needed to keep minifiers from removing the global context
        exports.Em = exports.Ember = Ember;

        // Make sure these are set whether Ember was already defined or not

        Ember.isNamespace = true;

        Ember.toString = function() { return "Ember"; };

        /**
          @property VERSION
          @type String
          @default 'VERSION_STRING_PLACEHOLDER'
          @static
        */
        Ember.VERSION = 'VERSION_STRING_PLACEHOLDER';

        /**
          Standard environmental variables. You can define these in a global `EmberENV`
          variable before loading Ember to control various configuration settings.

          For backwards compatibility with earlier versions of Ember the global `ENV`
          variable will be used if `EmberENV` is not defined.

          @property ENV
          @type Hash
        */

        if (Ember.ENV) {
          // do nothing if Ember.ENV is already setup
        } else if ('undefined' !== typeof EmberENV) {
          Ember.ENV = EmberENV;
        } else if('undefined' !== typeof ENV) {
          Ember.ENV = ENV;
        } else {
          Ember.ENV = {};
        }

        Ember.config = Ember.config || {};

        // We disable the RANGE API by default for performance reasons
        if ('undefined' === typeof Ember.ENV.DISABLE_RANGE_API) {
          Ember.ENV.DISABLE_RANGE_API = true;
        }

        if ("undefined" === typeof MetamorphENV) {
          exports.MetamorphENV = {};
        }

        MetamorphENV.DISABLE_RANGE_API = Ember.ENV.DISABLE_RANGE_API;

        /**
          Hash of enabled Canary features. Add to before creating your application.

          You can also define `ENV.FEATURES` if you need to enable features flagged at runtime.

          @class FEATURES
          @namespace Ember
          @static
          @since 1.1.0
        */

        Ember.FEATURES = Ember.ENV.FEATURES || {};

        /**
          Test that a feature is enabled. Parsed by Ember's build tools to leave
          experimental features out of beta/stable builds.

          You can define the following configuration options:

          * `ENV.ENABLE_ALL_FEATURES` - force all features to be enabled.
          * `ENV.ENABLE_OPTIONAL_FEATURES` - enable any features that have not been explicitly
            enabled/disabled.

          @method isEnabled
          @param {String} feature
          @return {Boolean}
          @for Ember.FEATURES
          @since 1.1.0
        */

        Ember.FEATURES.isEnabled = function(feature) {
          var featureValue = Ember.FEATURES[feature];

          if (Ember.ENV.ENABLE_ALL_FEATURES) {
            return true;
          } else if (featureValue === true || featureValue === false || featureValue === undefined) {
            return featureValue;
          } else if (Ember.ENV.ENABLE_OPTIONAL_FEATURES) {
            return true;
          } else {
            return false;
          }
        };

        // ..........................................................
        // BOOTSTRAP
        //

        /**
          Determines whether Ember should enhance some built-in object prototypes to
          provide a more friendly API. If enabled, a few methods will be added to
          `Function`, `String`, and `Array`. `Object.prototype` will not be enhanced,
          which is the one that causes most trouble for people.

          In general we recommend leaving this option set to true since it rarely
          conflicts with other code. If you need to turn it off however, you can
          define an `ENV.EXTEND_PROTOTYPES` config to disable it.

          @property EXTEND_PROTOTYPES
          @type Boolean
          @default true
          @for Ember
        */
        Ember.EXTEND_PROTOTYPES = Ember.ENV.EXTEND_PROTOTYPES;

        if (typeof Ember.EXTEND_PROTOTYPES === 'undefined') {
          Ember.EXTEND_PROTOTYPES = true;
        }

        /**
          Determines whether Ember logs a full stack trace during deprecation warnings

          @property LOG_STACKTRACE_ON_DEPRECATION
          @type Boolean
          @default true
        */
        Ember.LOG_STACKTRACE_ON_DEPRECATION = (Ember.ENV.LOG_STACKTRACE_ON_DEPRECATION !== false);

        /**
          Determines whether Ember should add ECMAScript 5 shims to older browsers.

          @property SHIM_ES5
          @type Boolean
          @default Ember.EXTEND_PROTOTYPES
        */
        Ember.SHIM_ES5 = (Ember.ENV.SHIM_ES5 === false) ? false : Ember.EXTEND_PROTOTYPES;

        /**
          Determines whether Ember logs info about version of used libraries

          @property LOG_VERSION
          @type Boolean
          @default true
        */
        Ember.LOG_VERSION = (Ember.ENV.LOG_VERSION === false) ? false : true;

        /**
          Empty function. Useful for some operations. Always returns `this`.

          @method K
          @private
          @return {Object}
        */
        Ember.K = function() { return this; };

        // Stub out the methods defined by the ember-debug package in case it's not loaded

        if ('undefined' === typeof Ember.assert) { Ember.assert = Ember.K; }

        if ('undefined' === typeof Ember.warn) { Ember.warn = Ember.K; }
        if ('undefined' === typeof Ember.debug) { Ember.debug = Ember.K; }
        if ('undefined' === typeof Ember.runInDebug) { Ember.runInDebug = Ember.K; }
        if ('undefined' === typeof Ember.deprecate) { Ember.deprecate = Ember.K; }

        if ('undefined' === typeof Ember.deprecateFunc) {
          Ember.deprecateFunc = function(_, func) { return func; };
        }

        /**
          Previously we used `Ember.$.uuid`, however `$.uuid` has been removed from
          jQuery master. We'll just bootstrap our own uuid now.

          @property uuid
          @type Number
          @private
        */
        Ember.uuid = 0;

        ember$metal$core$$default = Ember;
    }).call(this);

    (function() {
        ember$metal$platform$$platform = {};
        ember$metal$platform$$create = Object.create;

        // IE8 has Object.create but it couldn't treat property descriptors.
        if (ember$metal$platform$$create) {
          if (ember$metal$platform$$create({a: 1}, {a: {value: 2}}).a !== 2) {
            ember$metal$platform$$create = null;
          }
        }

        // STUB_OBJECT_CREATE allows us to override other libraries that stub
        // Object.create different than we would prefer
        if (!ember$metal$platform$$create || ember$metal$core$$default.ENV.STUB_OBJECT_CREATE) {
          var K = function() {};

          ember$metal$platform$$create = function(obj, props) {
            K.prototype = obj;
            obj = new K();
            if (props) {
              K.prototype = obj;
              for (var prop in props) {
                K.prototype[prop] = props[prop].value;
              }
              obj = new K();
            }
            K.prototype = null;

            return obj;
          };

          ember$metal$platform$$create.isSimulated = true;
        }

        var defineProperty = Object.defineProperty;
        var canRedefineProperties, canDefinePropertyOnDOM;

        // Catch IE8 where Object.defineProperty exists but only works on DOM elements
        if (defineProperty) {
          try {
            defineProperty({}, 'a',{get:function() {}});
          } catch (e) {
            defineProperty = null;
          }
        }

        if (defineProperty) {
          // Detects a bug in Android <3.2 where you cannot redefine a property using
          // Object.defineProperty once accessors have already been set.
          canRedefineProperties = (function() {
            var obj = {};

            defineProperty(obj, 'a', {
              configurable: true,
              enumerable: true,
              get: function() { },
              set: function() { }
            });

            defineProperty(obj, 'a', {
              configurable: true,
              enumerable: true,
              writable: true,
              value: true
            });

            return obj.a === true;
          })();

          // This is for Safari 5.0, which supports Object.defineProperty, but not
          // on DOM nodes.
          canDefinePropertyOnDOM = (function() {
            try {
              defineProperty(document.createElement('div'), 'definePropertyOnDOM', {});
              return true;
            } catch(e) { }

            return false;
          })();

          if (!canRedefineProperties) {
            defineProperty = null;
          } else if (!canDefinePropertyOnDOM) {
            defineProperty = function(obj, keyName, desc) {
              var isNode;

              if (typeof Node === "object") {
                isNode = obj instanceof Node;
              } else {
                isNode = typeof obj === "object" && typeof obj.nodeType === "number" && typeof obj.nodeName === "string";
              }

              if (isNode) {
                // TODO: Should we have a warning here?
                return (obj[keyName] = desc.value);
              } else {
                return Object.defineProperty(obj, keyName, desc);
              }
            };
          }
        }

        /**
        @class platform
        @namespace Ember
        */

        /**
          Identical to `Object.defineProperty()`. Implements as much functionality
          as possible if not available natively.

          @method defineProperty
          @param {Object} obj The object to modify
          @param {String} keyName property name to modify
          @param {Object} desc descriptor hash
          @return {void}
        */
        ember$metal$platform$$platform.defineProperty = defineProperty;

        /**
          Set to true if the platform supports native getters and setters.

          @property hasPropertyAccessors
          @final
        */
        ember$metal$platform$$platform.hasPropertyAccessors = true;

        if (!ember$metal$platform$$platform.defineProperty) {
          ember$metal$platform$$platform.hasPropertyAccessors = false;

          ember$metal$platform$$platform.defineProperty = function(obj, keyName, desc) {
            if (!desc.get) { obj[keyName] = desc.value; }
          };

          ember$metal$platform$$platform.defineProperty.isSimulated = true;
        }

        if (ember$metal$core$$default.ENV.MANDATORY_SETTER && !ember$metal$platform$$platform.hasPropertyAccessors) {
          ember$metal$core$$default.ENV.MANDATORY_SETTER = false;
        }
    }).call(this);

    (function() {
        var errorProps = [
          'description',
          'fileName',
          'lineNumber',
          'message',
          'name',
          'number',
          'stack'
        ];

        /**
          A subclass of the JavaScript Error object for use in Ember.

          @class Error
          @namespace Ember
          @extends Error
          @constructor
        */
        function EmberError() {
          var tmp = Error.apply(this, arguments);

          // Adds a `stack` property to the given error object that will yield the
          // stack trace at the time captureStackTrace was called.
          // When collecting the stack trace all frames above the topmost call
          // to this function, including that call, will be left out of the
          // stack trace.
          // This is useful because we can hide Ember implementation details
          // that are not very helpful for the user.
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, Ember.Error);
          }
          // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
          for (var idx = 0; idx < errorProps.length; idx++) {
            this[errorProps[idx]] = tmp[errorProps[idx]];
          }
        }

        EmberError.prototype = ember$metal$platform$$create(Error.prototype);
        ember$metal$error$$default = EmberError;
    }).call(this);

    (function() {
        var ArrayPrototype = Array.prototype;

        // NOTE: There is a bug in jshint that doesn't recognize `Object()` without `new`
        // as being ok unless both `newcap:false` and not `use strict`.
        // https://github.com/jshint/jshint/issues/392

        // Testing this is not ideal, but we want to use native functions
        // if available, but not to use versions created by libraries like Prototype
        var isNativeFunc = function(func) {
          // This should probably work in all browsers likely to have ES5 array methods
          return func && Function.prototype.toString.call(func).indexOf('[native code]') > -1;
        };

        ember$metal$array$$map = isNativeFunc(ArrayPrototype.map) ? ArrayPrototype.map : function(fun /*, thisp */) {
          //"use strict";

          if (this === void 0 || this === null) {
            throw new TypeError();
          }

          var t = Object(this);
          var len = t.length >>> 0;
          if (typeof fun !== "function") {
            throw new TypeError();
          }

          var res = new Array(len);
          var thisp = arguments[1];
          for (var i = 0; i < len; i++) {
            if (i in t) {
              res[i] = fun.call(thisp, t[i], i, t);
            }
          }

          return res;
        };

        ember$metal$array$$forEach = isNativeFunc(ArrayPrototype.forEach) ? ArrayPrototype.forEach : function(fun /*, thisp */) {
          //"use strict";

          if (this === void 0 || this === null) {
            throw new TypeError();
          }

          var t = Object(this);
          var len = t.length >>> 0;
          if (typeof fun !== "function") {
            throw new TypeError();
          }

          var thisp = arguments[1];
          for (var i = 0; i < len; i++) {
            if (i in t) {
              fun.call(thisp, t[i], i, t);
            }
          }
        };

        ember$metal$array$$indexOf = isNativeFunc(ArrayPrototype.indexOf) ? ArrayPrototype.indexOf : function (obj, fromIndex) {
          if (fromIndex === null || fromIndex === undefined) { fromIndex = 0; }
          else if (fromIndex < 0) { fromIndex = Math.max(0, this.length + fromIndex); }
          for (var i = fromIndex, j = this.length; i < j; i++) {
            if (this[i] === obj) { return i; }
          }
          return -1;
        };

        ember$metal$array$$filter = isNativeFunc(ArrayPrototype.filter) ? ArrayPrototype.filter : function (fn, context) {
          var i,
          value,
          result = [],
          length = this.length;

          for (i = 0; i < length; i++) {
            if (this.hasOwnProperty(i)) {
              value = this[i];
              if (fn.call(context, value, i, this)) {
                result.push(value);
              }
            }
          }
          return result;
        };

        if (Ember.SHIM_ES5) {
          if (!ArrayPrototype.map) {
            ArrayPrototype.map = ember$metal$array$$map;
          }

          if (!ArrayPrototype.forEach) {
            ArrayPrototype.forEach = ember$metal$array$$forEach;
          }

          if (!ArrayPrototype.filter) {
            ArrayPrototype.filter = ember$metal$array$$filter;
          }

          if (!ArrayPrototype.indexOf) {
            ArrayPrototype.indexOf = ember$metal$array$$indexOf;
          }
        }
    }).call(this);

    (function() {
        ember$metal$utils$$GUID_PREFIX = 'ember';
        var o_defineProperty = ember$metal$platform$$platform.defineProperty;
        var o_create = ember$metal$platform$$create;

        // Used for guid generation...
        var numberCache  = [];

        var stringCache  = {};
        var uuid = 0;
        var MANDATORY_SETTER = ember$metal$core$$default.ENV.MANDATORY_SETTER;
        ember$metal$utils$$GUID_KEY = '__ember' + (+ new Date());

        var GUID_DESC = {
          writable:    false,
          configurable: false,
          enumerable:  false,
          value: null
        };

        function generateGuid(obj, prefix) {
          if (!prefix) prefix = ember$metal$utils$$GUID_PREFIX;
          var ret = (prefix + (uuid++));
          if (obj) {
            if (obj[ember$metal$utils$$GUID_KEY] === null) {
              obj[ember$metal$utils$$GUID_KEY] = ret;
            } else {
              GUID_DESC.value = ret;
              o_defineProperty(obj, ember$metal$utils$$GUID_KEY, GUID_DESC);
            }
          }
          return ret;
        }

        ember$metal$utils$$generateGuid = generateGuid;

        function guidFor(obj) {

          // special cases where we don't want to add a key to object
          if (obj === undefined) return "(undefined)";
          if (obj === null) return "(null)";

          var ret;
          var type = typeof obj;

          // Don't allow prototype changes to String etc. to change the guidFor
          switch(type) {
            case 'number':
              ret = numberCache[obj];
              if (!ret) ret = numberCache[obj] = 'nu'+obj;
              return ret;

            case 'string':
              ret = stringCache[obj];
              if (!ret) ret = stringCache[obj] = 'st'+(uuid++);
              return ret;

            case 'boolean':
              return obj ? '(true)' : '(false)';

            default:
              if (obj[ember$metal$utils$$GUID_KEY]) return obj[ember$metal$utils$$GUID_KEY];
              if (obj === Object) return '(Object)';
              if (obj === Array)  return '(Array)';
              ret = 'ember' + (uuid++);

              if (obj[ember$metal$utils$$GUID_KEY] === null) {
                obj[ember$metal$utils$$GUID_KEY] = ret;
              } else {
                GUID_DESC.value = ret;
                o_defineProperty(obj, ember$metal$utils$$GUID_KEY, GUID_DESC);
              }
              return ret;
          }
        }

        ember$metal$utils$$guidFor = guidFor;

        ember$metal$utils$$META_DESC = {
          writable: true,
          configurable: false,
          enumerable: false,
          value: null
        };

        ember$metal$utils$$META_KEY = '__ember_meta__';
        var isDefinePropertySimulated = ember$metal$platform$$platform.defineProperty.isSimulated;

        function Meta(obj) {
          this.descs = {};
          this.watching = {};
          this.cache = {};
          this.cacheMeta = {};
          this.source = obj;
        }

        Meta.prototype = {
          descs: null,
          deps: null,
          watching: null,
          listeners: null,
          cache: null,
          cacheMeta: null,
          source: null,
          mixins: null,
          bindings: null,
          chains: null,
          chainWatchers: null,
          values: null,
          proto: null
        };

        if (isDefinePropertySimulated) {
          // on platforms that don't support enumerable false
          // make meta fail jQuery.isPlainObject() to hide from
          // jQuery.extend() by having a property that fails
          // hasOwnProperty check.
          Meta.prototype.__preventPlainObject__ = true;

          // Without non-enumerable properties, meta objects will be output in JSON
          // unless explicitly suppressed
          Meta.prototype.toJSON = function () { };
        }

        ember$metal$utils$$EMPTY_META = new Meta(null);
        if (MANDATORY_SETTER) { ember$metal$utils$$EMPTY_META.values = {}; }

        /**
          Retrieves the meta hash for an object. If `writable` is true ensures the
          hash is writable for this object as well.

          The meta object contains information about computed property descriptors as
          well as any watched properties and other information. You generally will
          not access this information directly but instead work with higher level
          methods that manipulate this hash indirectly.

          @method meta
          @for Ember
          @private

          @param {Object} obj The object to retrieve meta for
          @param {Boolean} [writable=true] Pass `false` if you do not intend to modify
            the meta hash, allowing the method to avoid making an unnecessary copy.
          @return {Object} the meta hash for an object
        */
        function meta(obj, writable) {

          var ret = obj[ember$metal$utils$$META_KEY];
          if (writable===false) return ret || ember$metal$utils$$EMPTY_META;

          if (!ret) {
            if (!isDefinePropertySimulated) o_defineProperty(obj, ember$metal$utils$$META_KEY, ember$metal$utils$$META_DESC);

            ret = new Meta(obj);

            if (MANDATORY_SETTER) { ret.values = {}; }

            obj[ember$metal$utils$$META_KEY] = ret;

            // make sure we don't accidentally try to create constructor like desc
            ret.descs.constructor = null;

          } else if (ret.source !== obj) {
            if (!isDefinePropertySimulated) o_defineProperty(obj, ember$metal$utils$$META_KEY, ember$metal$utils$$META_DESC);

            ret = o_create(ret);
            ret.descs     = o_create(ret.descs);
            ret.watching  = o_create(ret.watching);
            ret.cache     = {};
            ret.cacheMeta = {};
            ret.source    = obj;

            if (MANDATORY_SETTER) { ret.values = o_create(ret.values); }

            obj[ember$metal$utils$$META_KEY] = ret;
          }
          return ret;
        }

        ember$metal$utils$$meta = meta;

        function getMeta(obj, property) {
          var _meta = ember$metal$utils$$meta(obj, false);
          return _meta[property];
        }

        ember$metal$utils$$getMeta = getMeta;

        function setMeta(obj, property, value) {
          var _meta = ember$metal$utils$$meta(obj, true);
          _meta[property] = value;
          return value;
        }

        ember$metal$utils$$setMeta = setMeta;

        function metaPath(obj, path, writable) {
          ember$metal$core$$default.deprecate("Ember.metaPath is deprecated and will be removed from future releases.");
          var _meta = ember$metal$utils$$meta(obj, writable), keyName, value;

          for (var i=0, l=path.length; i<l; i++) {
            keyName = path[i];
            value = _meta[keyName];

            if (!value) {
              if (!writable) { return undefined; }
              value = _meta[keyName] = { __ember_source__: obj };
            } else if (value.__ember_source__ !== obj) {
              if (!writable) { return undefined; }
              value = _meta[keyName] = o_create(value);
              value.__ember_source__ = obj;
            }

            _meta = value;
          }

          return value;
        }

        ember$metal$utils$$metaPath = metaPath;

        function wrap(func, superFunc) {
          function superWrapper() {
            var ret, sup = this.__nextSuper;
            this.__nextSuper = superFunc;
            ret = ember$metal$utils$$apply(this, func, arguments);
            this.__nextSuper = sup;
            return ret;
          }

          superWrapper.wrappedFunction = func;
          superWrapper.wrappedFunction.__ember_arity__ = func.length;
          superWrapper.__ember_observes__ = func.__ember_observes__;
          superWrapper.__ember_observesBefore__ = func.__ember_observesBefore__;
          superWrapper.__ember_listens__ = func.__ember_listens__;

          return superWrapper;
        }

        ember$metal$utils$$wrap = wrap;
        var EmberArray;

        /**
          Returns true if the passed object is an array or Array-like.

          Ember Array Protocol:

            - the object has an objectAt property
            - the object is a native Array
            - the object is an Object, and has a length property

          Unlike `Ember.typeOf` this method returns true even if the passed object is
          not formally array but appears to be array-like (i.e. implements `Ember.Array`)

          ```javascript
          Ember.isArray();                                            // false
          Ember.isArray([]);                                          // true
          Ember.isArray( Ember.ArrayProxy.create({ content: [] }) );  // true
          ```

          @method isArray
          @for Ember
          @param {Object} obj The object to test
          @return {Boolean} true if the passed object is an array or Array-like
        */
        // ES6TODO: Move up to runtime? This is only use in ember-metal by concatenatedProperties
        function isArray(obj) {
          var modulePath, type;

          // if (typeof EmberArray === "undefined") {
          //   modulePath = 'ember-runtime/mixins/array';
          //   if (Ember.__loader.registry[modulePath]) {
          //     EmberArray = Ember.__loader.require(modulePath)['default'];
          //   }
          // }

          if (!obj || obj.setInterval) { return false; }
          if (Array.isArray && Array.isArray(obj)) { return true; }
          if (EmberArray && EmberArray.detect(obj)) { return true; }

          type = ember$metal$utils$$typeOf(obj);
          if ('array' === type) { return true; }
          if ((obj.length !== undefined) && 'object' === type) { return true; }
          return false;
        }

        ember$metal$utils$$isArray = isArray;

        function makeArray(obj) {
          if (obj === null || obj === undefined) { return []; }
          return ember$metal$utils$$isArray(obj) ? obj : [obj];
        }

        ember$metal$utils$$makeArray = makeArray;

        /**
          Checks to see if the `methodName` exists on the `obj`.

          ```javascript
          var foo = {bar: Ember.K, baz: null};
          Ember.canInvoke(foo, 'bar'); // true
          Ember.canInvoke(foo, 'baz'); // false
          Ember.canInvoke(foo, 'bat'); // false
          ```

          @method canInvoke
          @for Ember
          @param {Object} obj The object to check for the method
          @param {String} methodName The method name to check for
          @return {Boolean}
        */
        function canInvoke(obj, methodName) {
          return !!(obj && typeof obj[methodName] === 'function');
        }

        ember$metal$utils$$canInvoke = canInvoke;

        function tryInvoke(obj, methodName, args) {
          if (ember$metal$utils$$canInvoke(obj, methodName)) {
            return args ? ember$metal$utils$$applyStr(obj, methodName, args) : ember$metal$utils$$applyStr(obj, methodName);
          }
        }

        ember$metal$utils$$tryInvoke = tryInvoke;

        // https://github.com/emberjs/ember.js/pull/1617
        var needsFinallyFix = (function() {
          var count = 0;
          try{
            try { }
            finally {
              count++;
              throw new Error('needsFinallyFixTest');
            }
          } catch (e) {}

          return count !== 1;
        })();

        if (needsFinallyFix) {
          ember$metal$utils$$tryFinally = function(tryable, finalizer, binding) {
            var result, finalResult, finalError;

            binding = binding || this;

            try {
              result = tryable.call(binding);
            } finally {
              try {
                finalResult = finalizer.call(binding);
              } catch (e) {
                finalError = e;
              }
            }

            if (finalError) { throw finalError; }

            return (finalResult === undefined) ? result : finalResult;
          };
        } else {
          ember$metal$utils$$tryFinally = function(tryable, finalizer, binding) {
            var result, finalResult;

            binding = binding || this;

            try {
              result = tryable.call(binding);
            } finally {
              finalResult = finalizer.call(binding);
            }

            return (finalResult === undefined) ? result : finalResult;
          };
        }

        if (needsFinallyFix) {
          ember$metal$utils$$tryCatchFinally = function(tryable, catchable, finalizer, binding) {
            var result, finalResult, finalError;

            binding = binding || this;

            try {
              result = tryable.call(binding);
            } catch(error) {
              result = catchable.call(binding, error);
            } finally {
              try {
                finalResult = finalizer.call(binding);
              } catch (e) {
                finalError = e;
              }
            }

            if (finalError) { throw finalError; }

            return (finalResult === undefined) ? result : finalResult;
          };
        } else {
          ember$metal$utils$$tryCatchFinally = function(tryable, catchable, finalizer, binding) {
            var result, finalResult;

            binding = binding || this;

            try {
              result = tryable.call(binding);
            } catch(error) {
              result = catchable.call(binding, error);
            } finally {
              finalResult = finalizer.call(binding);
            }

            return (finalResult === undefined) ? result : finalResult;
          };
        }

        // ........................................
        // TYPING & ARRAY MESSAGING
        //

        var TYPE_MAP = {};

        var t = "Boolean Number String Function Array Date RegExp Object".split(" ");

        ember$metal$array$$forEach.call(t, function(name) {
          TYPE_MAP[ "[object " + name + "]" ] = name.toLowerCase();
        });

        var toString = Object.prototype.toString;
        var EmberObject;

        /**
          Returns a consistent type for the passed item.

          Use this instead of the built-in `typeof` to get the type of an item.
          It will return the same result across all browsers and includes a bit
          more detail. Here is what will be returned:

              | Return Value  | Meaning                                              |
              |---------------|------------------------------------------------------|
              | 'string'      | String primitive or String object.                   |
              | 'number'      | Number primitive or Number object.                   |
              | 'boolean'     | Boolean primitive or Boolean object.                 |
              | 'null'        | Null value                                           |
              | 'undefined'   | Undefined value                                      |
              | 'function'    | A function                                           |
              | 'array'       | An instance of Array                                 |
              | 'regexp'      | An instance of RegExp                                |
              | 'date'        | An instance of Date                                  |
              | 'class'       | An Ember class (created using Ember.Object.extend()) |
              | 'instance'    | An Ember object instance                             |
              | 'error'       | An instance of the Error object                      |
              | 'object'      | A JavaScript object not inheriting from Ember.Object |

          Examples:

          ```javascript
          Ember.typeOf();                       // 'undefined'
          Ember.typeOf(null);                   // 'null'
          Ember.typeOf(undefined);              // 'undefined'
          Ember.typeOf('michael');              // 'string'
          Ember.typeOf(new String('michael'));  // 'string'
          Ember.typeOf(101);                    // 'number'
          Ember.typeOf(new Number(101));        // 'number'
          Ember.typeOf(true);                   // 'boolean'
          Ember.typeOf(new Boolean(true));      // 'boolean'
          Ember.typeOf(Ember.makeArray);        // 'function'
          Ember.typeOf([1,2,90]);               // 'array'
          Ember.typeOf(/abc/);                  // 'regexp'
          Ember.typeOf(new Date());             // 'date'
          Ember.typeOf(Ember.Object.extend());  // 'class'
          Ember.typeOf(Ember.Object.create());  // 'instance'
          Ember.typeOf(new Error('teamocil'));  // 'error'

          // "normal" JavaScript object
          Ember.typeOf({a: 'b'});              // 'object'
          ```

          @method typeOf
          @for Ember
          @param {Object} item the item to check
          @return {String} the type
        */
        function typeOf(item) {
          var ret, modulePath;

          // ES6TODO: Depends on Ember.Object which is defined in runtime.
          // if (typeof EmberObject === "undefined") {
          //   modulePath = 'ember-runtime/system/object';
          //   if (Ember.__loader.registry[modulePath]) {
          //     EmberObject = Ember.__loader.require(modulePath)['default'];
          //   }
          // }

          ret = (item === null || item === undefined) ? String(item) : TYPE_MAP[toString.call(item)] || 'object';

          if (ret === 'function') {
            if (EmberObject && EmberObject.detect(item)) ret = 'class';
          } else if (ret === 'object') {
            if (item instanceof Error) ret = 'error';
            else if (EmberObject && item instanceof EmberObject) ret = 'instance';
            else if (item instanceof Date) ret = 'date';
          }

          return ret;
        }

        ember$metal$utils$$typeOf = typeOf;

        function inspect(obj) {
          var type = ember$metal$utils$$typeOf(obj);
          if (type === 'array') {
            return '[' + obj + ']';
          }
          if (type !== 'object') {
            return obj + '';
          }

          var v, ret = [];
          for(var key in obj) {
            if (obj.hasOwnProperty(key)) {
              v = obj[key];
              if (v === 'toString') { continue; } // ignore useless items
              if (ember$metal$utils$$typeOf(v) === 'function') { v = "function() { ... }"; }
              ret.push(key + ": " + v);
            }
          }
          return "{" + ret.join(", ") + "}";
        }

        ember$metal$utils$$inspect = inspect;

        function apply(t /* target */, m /* method */, a /* args */) {
          var l = a && a.length;
          if (!a || !l) { return m.call(t); }
          switch (l) {
            case 1:  return m.call(t, a[0]);
            case 2:  return m.call(t, a[0], a[1]);
            case 3:  return m.call(t, a[0], a[1], a[2]);
            case 4:  return m.call(t, a[0], a[1], a[2], a[3]);
            case 5:  return m.call(t, a[0], a[1], a[2], a[3], a[4]);
            default: return m.apply(t, a);
          }
        }

        ember$metal$utils$$apply = apply;

        function applyStr(t /* target */, m /* method */, a /* args */) {
          var l = a && a.length;
          if (!a || !l) { return t[m](); }
          switch (l) {
            case 1:  return t[m](a[0]);
            case 2:  return t[m](a[0], a[1]);
            case 3:  return t[m](a[0], a[1], a[2]);
            case 4:  return t[m](a[0], a[1], a[2], a[3]);
            case 5:  return t[m](a[0], a[1], a[2], a[3], a[4]);
            default: return t[m].apply(t, a);
          }
        }

        ember$metal$utils$$applyStr = applyStr;
    }).call(this);

    (function() {
        var MANDATORY_SETTER = ember$metal$core$$default.ENV.MANDATORY_SETTER;
        var IS_GLOBAL_PATH = /^([A-Z$]|([0-9][A-Z$])).*[\.]/;
        var HAS_THIS  = 'this.';
        var FIRST_KEY = /^([^\.]+)/;

        ember$metal$property_get$$get = function get(obj, keyName) {
          // Helpers that operate with 'this' within an #each
          if (keyName === '') {
            return obj;
          }

          if (!keyName && 'string'===typeof obj) {
            keyName = obj;
            obj = null;
          }

          ember$metal$core$$default.assert("Cannot call get with "+ keyName +" key.", !!keyName);
          ember$metal$core$$default.assert("Cannot call get with '"+ keyName +"' on an undefined object.", obj !== undefined);

          if (obj === null) { return ember$metal$property_get$$_getPath(obj, keyName);  }

          var meta = obj[ember$metal$utils$$META_KEY], desc = meta && meta.descs[keyName], ret;

          if (desc === undefined && keyName.indexOf('.') !== -1) {
            return ember$metal$property_get$$_getPath(obj, keyName);
          }

          if (desc) {
            return desc.get(obj, keyName);
          } else {
            if (MANDATORY_SETTER && meta && meta.watching[keyName] > 0) {
              ret = meta.values[keyName];
            } else {
              ret = obj[keyName];
            }

            if (ret === undefined &&
                'object' === typeof obj && !(keyName in obj) && 'function' === typeof obj.unknownProperty) {
              return obj.unknownProperty(keyName);
            }

            return ret;
          }
        };

        // Currently used only by Ember Data tests
        if (ember$metal$core$$default.config.overrideAccessors) {
          ember$metal$core$$default.get = ember$metal$property_get$$get;
          ember$metal$core$$default.config.overrideAccessors();
          ember$metal$property_get$$get = ember$metal$core$$default.get;
        }

        /**
          Normalizes a target/path pair to reflect that actual target/path that should
          be observed, etc. This takes into account passing in global property
          paths (i.e. a path beginning with a captial letter not defined on the
          target).

          @private
          @method normalizeTuple
          @for Ember
          @param {Object} target The current target. May be `null`.
          @param {String} path A path on the target or a global property path.
          @return {Array} a temporary array with the normalized target/path pair.
        */
        function normalizeTuple(target, path) {
          var hasThis  = path.indexOf(HAS_THIS) === 0,
              isGlobal = !hasThis && IS_GLOBAL_PATH.test(path),
              key;

          if (!target || isGlobal) target = ember$metal$core$$default.lookup;
          if (hasThis) path = path.slice(5);

          if (target === ember$metal$core$$default.lookup) {
            key = path.match(FIRST_KEY)[0];
            target = ember$metal$property_get$$get(target, key);
            path   = path.slice(key.length+1);
          }

          // must return some kind of path to be valid else other things will break.
          if (!path || path.length===0) throw new ember$metal$error$$default('Path cannot be empty');

          return [ target, path ];
        }

        ember$metal$property_get$$normalizeTuple = normalizeTuple;

        function _getPath(root, path) {
          var hasThis, parts, tuple, idx, len;

          // If there is no root and path is a key name, return that
          // property from the global object.
          // E.g. get('Ember') -> Ember
          if (root === null && path.indexOf('.') === -1) { return ember$metal$property_get$$get(ember$metal$core$$default.lookup, path); }

          // detect complicated paths and normalize them
          hasThis = path.indexOf(HAS_THIS) === 0;

          if (!root || hasThis) {
            tuple = ember$metal$property_get$$normalizeTuple(root, path);
            root = tuple[0];
            path = tuple[1];
            tuple.length = 0;
          }

          parts = path.split(".");
          len = parts.length;
          for (idx = 0; root != null && idx < len; idx++) {
            root = ember$metal$property_get$$get(root, parts[idx], true);
            if (root && root.isDestroyed) { return undefined; }
          }
          return root;
        }

        ember$metal$property_get$$_getPath = _getPath;

        function getWithDefault(root, key, defaultValue) {
          var value = ember$metal$property_get$$get(root, key);

          if (value === undefined) { return defaultValue; }
          return value;
        }

        ember$metal$property_get$$getWithDefault = getWithDefault;
        ember$metal$property_get$$default = ember$metal$property_get$$get;
    }).call(this);

    (function() {
        var a_slice = [].slice,
            metaFor = ember$metal$utils$$meta,
            /* listener flags */
            ONCE = 1, SUSPENDED = 2;

        /*
          The event system uses a series of nested hashes to store listeners on an
          object. When a listener is registered, or when an event arrives, these
          hashes are consulted to determine which target and action pair to invoke.

          The hashes are stored in the object's meta hash, and look like this:

              // Object's meta hash
              {
                listeners: {       // variable name: `listenerSet`
                  "foo:changed": [ // variable name: `actions`
                    target, method, flags
                  ]
                }
              }

        */

        function indexOf(array, target, method) {
          var index = -1;
          // hashes are added to the end of the event array
          // so it makes sense to start searching at the end
          // of the array and search in reverse
          for (var i = array.length - 3 ; i >=0; i -= 3) {
            if (target === array[i] && method === array[i + 1]) {
                 index = i; break;
            }
          }
          return index;
        }

        function actionsFor(obj, eventName) {
          var meta = metaFor(obj, true),
              actions;

          if (!meta.listeners) { meta.listeners = {}; }

          if (!meta.hasOwnProperty('listeners')) {
            // setup inherited copy of the listeners object
            meta.listeners = ember$metal$platform$$create(meta.listeners);
          }

          actions = meta.listeners[eventName];

          // if there are actions, but the eventName doesn't exist in our listeners, then copy them from the prototype
          if (actions && !meta.listeners.hasOwnProperty(eventName)) {
            actions = meta.listeners[eventName] = meta.listeners[eventName].slice();
          } else if (!actions) {
            actions = meta.listeners[eventName] = [];
          }

          return actions;
        }

        function listenersUnion(obj, eventName, otherActions) {
          var meta = obj[ember$metal$utils$$META_KEY],
              actions = meta && meta.listeners && meta.listeners[eventName];

          if (!actions) { return; }
          for (var i = actions.length - 3; i >= 0; i -= 3) {
            var target = actions[i],
                method = actions[i+1],
                flags = actions[i+2],
                actionIndex = indexOf(otherActions, target, method);

            if (actionIndex === -1) {
              otherActions.push(target, method, flags);
            }
          }
        }

        ember$metal$events$$listenersUnion = listenersUnion;

        function listenersDiff(obj, eventName, otherActions) {
          var meta = obj[ember$metal$utils$$META_KEY],
              actions = meta && meta.listeners && meta.listeners[eventName],
              diffActions = [];

          if (!actions) { return; }
          for (var i = actions.length - 3; i >= 0; i -= 3) {
            var target = actions[i],
                method = actions[i+1],
                flags = actions[i+2],
                actionIndex = indexOf(otherActions, target, method);

            if (actionIndex !== -1) { continue; }

            otherActions.push(target, method, flags);
            diffActions.push(target, method, flags);
          }

          return diffActions;
        }

        ember$metal$events$$listenersDiff = listenersDiff;

        function addListener(obj, eventName, target, method, once) {
          ember$metal$core$$default.assert("You must pass at least an object and event name to Ember.addListener", !!obj && !!eventName);

          if (!method && 'function' === typeof target) {
            method = target;
            target = null;
          }

          var actions = actionsFor(obj, eventName),
              actionIndex = indexOf(actions, target, method),
              flags = 0;

          if (once) flags |= ONCE;

          if (actionIndex !== -1) { return; }

          actions.push(target, method, flags);

          if ('function' === typeof obj.didAddListener) {
            obj.didAddListener(eventName, target, method);
          }
        }

        ember$metal$events$$addListener = addListener;

        /**
          Remove an event listener

          Arguments should match those passed to `Ember.addListener`.

          @method removeListener
          @for Ember
          @param obj
          @param {String} eventName
          @param {Object|Function} targetOrMethod A target object or a function
          @param {Function|String} method A function or the name of a function to be called on `target`
        */
        function removeListener(obj, eventName, target, method) {
          ember$metal$core$$default.assert("You must pass at least an object and event name to Ember.removeListener", !!obj && !!eventName);

          if (!method && 'function' === typeof target) {
            method = target;
            target = null;
          }

          function _removeListener(target, method) {
            var actions = actionsFor(obj, eventName),
                actionIndex = indexOf(actions, target, method);

            // action doesn't exist, give up silently
            if (actionIndex === -1) { return; }

            actions.splice(actionIndex, 3);

            if ('function' === typeof obj.didRemoveListener) {
              obj.didRemoveListener(eventName, target, method);
            }
          }

          if (method) {
            _removeListener(target, method);
          } else {
            var meta = obj[ember$metal$utils$$META_KEY],
                actions = meta && meta.listeners && meta.listeners[eventName];

            if (!actions) { return; }
            for (var i = actions.length - 3; i >= 0; i -= 3) {
              _removeListener(actions[i], actions[i+1]);
            }
          }
        }

        ember$metal$events$$removeListener = removeListener;

        function suspendListener(obj, eventName, target, method, callback) {
          if (!method && 'function' === typeof target) {
            method = target;
            target = null;
          }

          var actions = actionsFor(obj, eventName),
              actionIndex = indexOf(actions, target, method);

          if (actionIndex !== -1) {
            actions[actionIndex+2] |= SUSPENDED; // mark the action as suspended
          }

          function tryable()   { return callback.call(target); }
          function finalizer() { if (actionIndex !== -1) { actions[actionIndex+2] &= ~SUSPENDED; } }

          return ember$metal$utils$$tryFinally(tryable, finalizer);
        }

        ember$metal$events$$suspendListener = suspendListener;

        function suspendListeners(obj, eventNames, target, method, callback) {
          if (!method && 'function' === typeof target) {
            method = target;
            target = null;
          }

          var suspendedActions = [],
              actionsList = [],
              eventName, actions, i, l;

          for (i=0, l=eventNames.length; i<l; i++) {
            eventName = eventNames[i];
            actions = actionsFor(obj, eventName);
            var actionIndex = indexOf(actions, target, method);

            if (actionIndex !== -1) {
              actions[actionIndex+2] |= SUSPENDED;
              suspendedActions.push(actionIndex);
              actionsList.push(actions);
            }
          }

          function tryable() { return callback.call(target); }

          function finalizer() {
            for (var i = 0, l = suspendedActions.length; i < l; i++) {
              var actionIndex = suspendedActions[i];
              actionsList[i][actionIndex+2] &= ~SUSPENDED;
            }
          }

          return ember$metal$utils$$tryFinally(tryable, finalizer);
        }

        ember$metal$events$$suspendListeners = suspendListeners;

        function watchedEvents(obj) {
          var listeners = obj[ember$metal$utils$$META_KEY].listeners, ret = [];

          if (listeners) {
            for(var eventName in listeners) {
              if (listeners[eventName]) { ret.push(eventName); }
            }
          }
          return ret;
        }

        ember$metal$events$$watchedEvents = watchedEvents;

        function sendEvent(obj, eventName, params, actions) {
          // first give object a chance to handle it
          if (obj !== ember$metal$core$$default && 'function' === typeof obj.sendEvent) {
            obj.sendEvent(eventName, params);
          }

          if (!actions) {
            var meta = obj[ember$metal$utils$$META_KEY];
            actions = meta && meta.listeners && meta.listeners[eventName];
          }

          if (!actions) { return; }

          for (var i = actions.length - 3; i >= 0; i -= 3) { // looping in reverse for once listeners
            var target = actions[i], method = actions[i+1], flags = actions[i+2];
            if (!method) { continue; }
            if (flags & SUSPENDED) { continue; }
            if (flags & ONCE) { ember$metal$events$$removeListener(obj, eventName, target, method); }
            if (!target) { target = obj; }
            if ('string' === typeof method) {
              if (params) {
                ember$metal$utils$$applyStr(target, method, params);
              } else {
                target[method]();
              }
            } else {
              if (params) {
                ember$metal$utils$$apply(target, method, params);
              } else {
                method.call(target);
              }
            }
          }
          return true;
        }

        ember$metal$events$$sendEvent = sendEvent;

        function hasListeners(obj, eventName) {
          var meta = obj[ember$metal$utils$$META_KEY],
              actions = meta && meta.listeners && meta.listeners[eventName];

          return !!(actions && actions.length);
        }

        ember$metal$events$$hasListeners = hasListeners;

        function listenersFor(obj, eventName) {
          var ret = [];
          var meta = obj[ember$metal$utils$$META_KEY],
              actions = meta && meta.listeners && meta.listeners[eventName];

          if (!actions) { return ret; }

          for (var i = 0, l = actions.length; i < l; i += 3) {
            var target = actions[i],
                method = actions[i+1];
            ret.push([target, method]);
          }

          return ret;
        }

        ember$metal$events$$listenersFor = listenersFor;

        function on(){
          var func = a_slice.call(arguments, -1)[0],
              events = a_slice.call(arguments, 0, -1);
          func.__ember_listens__ = events;
          return func;
        }

        ember$metal$events$$on = on;
    }).call(this);

    (function() {
        ember$metal$observer_set$$default = ObserverSet;

        function ObserverSet() {
          this.clear();
        }

        ObserverSet.prototype.add = function(sender, keyName, eventName) {
          var observerSet = this.observerSet,
              observers = this.observers,
              senderGuid = ember$metal$utils$$guidFor(sender),
              keySet = observerSet[senderGuid],
              index;

          if (!keySet) {
            observerSet[senderGuid] = keySet = {};
          }
          index = keySet[keyName];
          if (index === undefined) {
            index = observers.push({
              sender: sender,
              keyName: keyName,
              eventName: eventName,
              listeners: []
            }) - 1;
            keySet[keyName] = index;
          }
          return observers[index].listeners;
        };

        ObserverSet.prototype.flush = function() {
          var observers = this.observers, i, len, observer, sender;
          this.clear();
          for (i=0, len=observers.length; i < len; ++i) {
            observer = observers[i];
            sender = observer.sender;
            if (sender.isDestroying || sender.isDestroyed) { continue; }
            ember$metal$events$$sendEvent(sender, observer.eventName, [sender, observer.keyName], observer.listeners);
          }
        };

        ObserverSet.prototype.clear = function() {
          this.observerSet = {};
          this.observers = [];
        };
    }).call(this);

    (function() {
        var beforeObserverSet = new ember$metal$observer_set$$default();
        var observerSet = new ember$metal$observer_set$$default();
        var deferred = 0;

        // ..........................................................
        // PROPERTY CHANGES
        //

        /**
          This function is called just before an object property is about to change.
          It will notify any before observers and prepare caches among other things.

          Normally you will not need to call this method directly but if for some
          reason you can't directly watch a property you can invoke this method
          manually along with `Ember.propertyDidChange()` which you should call just
          after the property value changes.

          @method propertyWillChange
          @for Ember
          @param {Object} obj The object with the property that will change
          @param {String} keyName The property key (or path) that will change.
          @return {void}
        */
        function propertyWillChange(obj, keyName) {
          var m = obj[ember$metal$utils$$META_KEY],
              watching = (m && m.watching[keyName] > 0) || keyName === 'length',
              proto = m && m.proto,
              desc = m && m.descs[keyName];

          if (!watching) { return; }
          if (proto === obj) { return; }
          if (desc && desc.willChange) { desc.willChange(obj, keyName); }
          dependentKeysWillChange(obj, keyName, m);
          chainsWillChange(obj, keyName, m);
          notifyBeforeObservers(obj, keyName);
        }

        ember$metal$property_events$$propertyWillChange = propertyWillChange;

        /**
          This function is called just after an object property has changed.
          It will notify any observers and clear caches among other things.

          Normally you will not need to call this method directly but if for some
          reason you can't directly watch a property you can invoke this method
          manually along with `Ember.propertyWillChange()` which you should call just
          before the property value changes.

          @method propertyDidChange
          @for Ember
          @param {Object} obj The object with the property that will change
          @param {String} keyName The property key (or path) that will change.
          @return {void}
        */
        function propertyDidChange(obj, keyName) {
          var m = obj[ember$metal$utils$$META_KEY],
              watching = (m && m.watching[keyName] > 0) || keyName === 'length',
              proto = m && m.proto,
              desc = m && m.descs[keyName];

          if (proto === obj) { return; }

          // shouldn't this mean that we're watching this key?
          if (desc && desc.didChange) { desc.didChange(obj, keyName); }
          if (!watching && keyName !== 'length') { return; }

          dependentKeysDidChange(obj, keyName, m);
          chainsDidChange(obj, keyName, m, false);
          notifyObservers(obj, keyName);
        }

        ember$metal$property_events$$propertyDidChange = propertyDidChange;
        var WILL_SEEN, DID_SEEN;

        // called whenever a property is about to change to clear the cache of any dependent keys (and notify those properties of changes, etc...)
        function dependentKeysWillChange(obj, depKey, meta) {
          if (obj.isDestroying) { return; }

          var seen = WILL_SEEN, top = !seen;
          if (top) { seen = WILL_SEEN = {}; }
          iterDeps(ember$metal$property_events$$propertyWillChange, obj, depKey, seen, meta);
          if (top) { WILL_SEEN = null; }
        }

        // called whenever a property has just changed to update dependent keys
        function dependentKeysDidChange(obj, depKey, meta) {
          if (obj.isDestroying) { return; }

          var seen = DID_SEEN, top = !seen;
          if (top) { seen = DID_SEEN = {}; }
          iterDeps(ember$metal$property_events$$propertyDidChange, obj, depKey, seen, meta);
          if (top) { DID_SEEN = null; }
        }

        function iterDeps(method, obj, depKey, seen, meta) {
          var guid = ember$metal$utils$$guidFor(obj);
          if (!seen[guid]) seen[guid] = {};
          if (seen[guid][depKey]) return;
          seen[guid][depKey] = true;

          var deps = meta.deps;
          deps = deps && deps[depKey];
          if (deps) {
            for(var key in deps) {
              var desc = meta.descs[key];
              if (desc && desc._suspended === obj) continue;
              method(obj, key);
            }
          }
        }

        function chainsWillChange(obj, keyName, m) {
          if (!(m.hasOwnProperty('chainWatchers') &&
                m.chainWatchers[keyName])) {
            return;
          }

          var nodes = m.chainWatchers[keyName],
              events = [],
              i, l;

          for(i = 0, l = nodes.length; i < l; i++) {
            nodes[i].willChange(events);
          }

          for (i = 0, l = events.length; i < l; i += 2) {
            ember$metal$property_events$$propertyWillChange(events[i], events[i+1]);
          }
        }

        function chainsDidChange(obj, keyName, m, suppressEvents) {
          if (!(m && m.hasOwnProperty('chainWatchers') &&
                m.chainWatchers[keyName])) {
            return;
          }

          var nodes = m.chainWatchers[keyName],
              events = suppressEvents ? null : [],
              i, l;

          for(i = 0, l = nodes.length; i < l; i++) {
            nodes[i].didChange(events);
          }

          if (suppressEvents) {
            return;
          }

          for (i = 0, l = events.length; i < l; i += 2) {
            ember$metal$property_events$$propertyDidChange(events[i], events[i+1]);
          }
        }

        function overrideChains(obj, keyName, m) {
          chainsDidChange(obj, keyName, m, true);
        }

        ember$metal$property_events$$overrideChains = overrideChains;

        /**
          @method beginPropertyChanges
          @chainable
          @private
        */
        function beginPropertyChanges() {
          deferred++;
        }

        ember$metal$property_events$$beginPropertyChanges = beginPropertyChanges;

        /**
          @method endPropertyChanges
          @private
        */
        function endPropertyChanges() {
          deferred--;
          if (deferred<=0) {
            beforeObserverSet.clear();
            observerSet.flush();
          }
        }

        ember$metal$property_events$$endPropertyChanges = endPropertyChanges;

        /**
          Make a series of property changes together in an
          exception-safe way.

          ```javascript
          Ember.changeProperties(function() {
            obj1.set('foo', mayBlowUpWhenSet);
            obj2.set('bar', baz);
          });
          ```

          @method changeProperties
          @param {Function} callback
          @param [binding]
        */
        function changeProperties(cb, binding) {
          ember$metal$property_events$$beginPropertyChanges();
          ember$metal$utils$$tryFinally(cb, ember$metal$property_events$$endPropertyChanges, binding);
        }

        ember$metal$property_events$$changeProperties = changeProperties;

        function notifyBeforeObservers(obj, keyName) {
          if (obj.isDestroying) { return; }

          var eventName = keyName + ':before', listeners, diff;
          if (deferred) {
            listeners = beforeObserverSet.add(obj, keyName, eventName);
            diff = ember$metal$events$$listenersDiff(obj, eventName, listeners);
            ember$metal$events$$sendEvent(obj, eventName, [obj, keyName], diff);
          } else {
            ember$metal$events$$sendEvent(obj, eventName, [obj, keyName]);
          }
        }

        function notifyObservers(obj, keyName) {
          if (obj.isDestroying) { return; }

          var eventName = keyName + ':change', listeners;
          if (deferred) {
            listeners = observerSet.add(obj, keyName, eventName);
            ember$metal$events$$listenersUnion(obj, eventName, listeners);
          } else {
            ember$metal$events$$sendEvent(obj, eventName, [obj, keyName]);
          }
        }
    }).call(this);

    (function() {
        var metaFor = ember$metal$utils$$meta,
            objectDefineProperty = ember$metal$platform$$platform.defineProperty;

        var MANDATORY_SETTER = ember$metal$core$$default.ENV.MANDATORY_SETTER;
        function Descriptor() {}
        ember$metal$properties$$Descriptor = Descriptor;

        // ..........................................................
        // DEFINING PROPERTIES API
        //

        var MANDATORY_SETTER_FUNCTION = ember$metal$core$$default.MANDATORY_SETTER_FUNCTION = function(value) {
          ember$metal$core$$default.assert("You must use Ember.set() to access this property (of " + this + ")", false);
        };

        var DEFAULT_GETTER_FUNCTION = ember$metal$core$$default.DEFAULT_GETTER_FUNCTION = function DEFAULT_GETTER_FUNCTION(name) {
          return function() {
            var meta = this[ember$metal$utils$$META_KEY];
            return meta && meta.values[name];
          };
        };

        function defineProperty(obj, keyName, desc, data, meta) {
          var descs, existingDesc, watching, value;

          if (!meta) meta = metaFor(obj);
          descs = meta.descs;
          existingDesc = meta.descs[keyName];
          watching = meta.watching[keyName] > 0;

          if (existingDesc instanceof ember$metal$properties$$Descriptor) {
            existingDesc.teardown(obj, keyName);
          }

          if (desc instanceof ember$metal$properties$$Descriptor) {
            value = desc;

            descs[keyName] = desc;
            if (MANDATORY_SETTER && watching) {
              objectDefineProperty(obj, keyName, {
                configurable: true,
                enumerable: true,
                writable: true,
                value: undefined // make enumerable
              });
            } else {
              obj[keyName] = undefined; // make enumerable
            }
          } else {
            descs[keyName] = undefined; // shadow descriptor in proto
            if (desc == null) {
              value = data;

              if (MANDATORY_SETTER && watching) {
                meta.values[keyName] = data;
                objectDefineProperty(obj, keyName, {
                  configurable: true,
                  enumerable: true,
                  set: MANDATORY_SETTER_FUNCTION,
                  get: DEFAULT_GETTER_FUNCTION(keyName)
                });
              } else {
                obj[keyName] = data;
              }
            } else {
              value = desc;

              // compatibility with ES5
              objectDefineProperty(obj, keyName, desc);
            }
          }

          // if key is being watched, override chains that
          // were initialized with the prototype
          if (watching) { ember$metal$property_events$$overrideChains(obj, keyName, meta); }

          // The `value` passed to the `didDefineProperty` hook is
          // either the descriptor or data, whichever was passed.
          if (obj.didDefineProperty) { obj.didDefineProperty(obj, keyName, value); }

          return this;
        }

        ember$metal$properties$$defineProperty = defineProperty;

        function deprecateProperty(object, deprecatedKey, newKey) {
          function deprecate() {
            ember$metal$core$$default.deprecate('Usage of `' + deprecatedKey + '` is deprecated, use `' + newKey + '` instead.');
          }

          if (ember$metal$platform$$platform.hasPropertyAccessors) {
            ember$metal$properties$$defineProperty(object, deprecatedKey, {
                configurable: true,
                enumerable: false,
                set: function(value) { deprecate(); ember$metal$property_set$$set(object, newKey, value); },
                get: function() { deprecate(); return ember$metal$property_get$$get(object, newKey); }
            });
          }
        }

        ember$metal$properties$$deprecateProperty = deprecateProperty;
    }).call(this);

    (function() {
        var MANDATORY_SETTER = ember$metal$core$$default.ENV.MANDATORY_SETTER;
        var IS_GLOBAL = /^([A-Z$]|([0-9][A-Z$]))/;

        ember$metal$property_set$$set = function set(obj, keyName, value, tolerant) {
          if (typeof obj === 'string') {
            ember$metal$core$$default.assert("Path '" + obj + "' must be global if no obj is given.", IS_GLOBAL.test(obj));
            value = keyName;
            keyName = obj;
            obj = null;
          }

          ember$metal$core$$default.assert("Cannot call set with "+ keyName +" key.", !!keyName);

          if (!obj) {
            return setPath(obj, keyName, value, tolerant);
          }

          var meta = obj[ember$metal$utils$$META_KEY], desc = meta && meta.descs[keyName],
              isUnknown, currentValue;

          if (desc === undefined && keyName.indexOf('.') !== -1) {
            return setPath(obj, keyName, value, tolerant);
          }

          ember$metal$core$$default.assert("You need to provide an object and key to `set`.", !!obj && keyName !== undefined);
          ember$metal$core$$default.assert('calling set on destroyed object', !obj.isDestroyed);

          if (desc !== undefined) {
            desc.set(obj, keyName, value);
          } else {

            if (typeof obj === 'object' && obj !== null && value !== undefined && obj[keyName] === value) {
              return value;
            }

            isUnknown = 'object' === typeof obj && !(keyName in obj);

            // setUnknownProperty is called if `obj` is an object,
            // the property does not already exist, and the
            // `setUnknownProperty` method exists on the object
            if (isUnknown && 'function' === typeof obj.setUnknownProperty) {
              obj.setUnknownProperty(keyName, value);
            } else if (meta && meta.watching[keyName] > 0) {
              if (MANDATORY_SETTER) {
                currentValue = meta.values[keyName];
              } else {
                currentValue = obj[keyName];
              }
              // only trigger a change if the value has changed
              if (value !== currentValue) {
                ember$metal$property_events$$propertyWillChange(obj, keyName);
                if (MANDATORY_SETTER) {
                  if ((currentValue === undefined && !(keyName in obj)) || !obj.propertyIsEnumerable(keyName)) {
                    ember$metal$properties$$defineProperty(obj, keyName, null, value); // setup mandatory setter
                  } else {
                    meta.values[keyName] = value;
                  }
                } else {
                  obj[keyName] = value;
                }
                ember$metal$property_events$$propertyDidChange(obj, keyName);
              }
            } else {
              obj[keyName] = value;
            }
          }
          return value;
        };

        // Currently used only by Ember Data tests
        // ES6TODO: Verify still true
        if (ember$metal$core$$default.config.overrideAccessors) {
          ember$metal$core$$default.set = ember$metal$property_set$$set;
          ember$metal$core$$default.config.overrideAccessors();
          ember$metal$property_set$$set = ember$metal$core$$default.set;
        }

        function setPath(root, path, value, tolerant) {
          var keyName;

          // get the last part of the path
          keyName = path.slice(path.lastIndexOf('.') + 1);

          // get the first part of the part
          path    = (path === keyName) ? keyName : path.slice(0, path.length-(keyName.length+1));

          // unless the path is this, look up the first part to
          // get the root
          if (path !== 'this') {
            root = ember$metal$property_get$$_getPath(root, path);
          }

          if (!keyName || keyName.length === 0) {
            throw new ember$metal$error$$default('Property set failed: You passed an empty path');
          }

          if (!root) {
            if (tolerant) { return; }
            else { throw new ember$metal$error$$default('Property set failed: object in path "'+path+'" could not be found or was destroyed.'); }
          }

          return ember$metal$property_set$$set(root, keyName, value);
        }

        function trySet(root, path, value) {
          return ember$metal$property_set$$set(root, path, value, true);
        }

        ember$metal$property_set$$trySet = trySet;
    }).call(this);

    (function() {
        // utils.js
        var metaFor = ember$metal$utils$$meta;

        var MANDATORY_SETTER = ember$metal$core$$default.ENV.MANDATORY_SETTER;
        var o_defineProperty = ember$metal$platform$$platform.defineProperty;

        function watchKey(obj, keyName, meta) {
          // can't watch length on Array - it is special...
          if (keyName === 'length' && ember$metal$utils$$typeOf(obj) === 'array') { return; }

          var m = meta || metaFor(obj), watching = m.watching;

          // activate watching first time
          if (!watching[keyName]) {
            watching[keyName] = 1;

            if ('function' === typeof obj.willWatchProperty) {
              obj.willWatchProperty(keyName);
            }

            if (MANDATORY_SETTER && keyName in obj) {
              m.values[keyName] = obj[keyName];
              o_defineProperty(obj, keyName, {
                configurable: true,
                enumerable: obj.propertyIsEnumerable(keyName),
                set: ember$metal$core$$default.MANDATORY_SETTER_FUNCTION,
                get: ember$metal$core$$default.DEFAULT_GETTER_FUNCTION(keyName)
              });
            }
          } else {
            watching[keyName] = (watching[keyName] || 0) + 1;
          }
        }

        ember$metal$watch_key$$watchKey = watchKey;

        function unwatchKey(obj, keyName, meta) {
          var m = meta || metaFor(obj), watching = m.watching;

          if (watching[keyName] === 1) {
            watching[keyName] = 0;

            if ('function' === typeof obj.didUnwatchProperty) {
              obj.didUnwatchProperty(keyName);
            }

            if (MANDATORY_SETTER && keyName in obj) {
              o_defineProperty(obj, keyName, {
                configurable: true,
                enumerable: obj.propertyIsEnumerable(keyName),
                set: function(val) {
                  // redefine to set as enumerable
                  o_defineProperty(obj, keyName, {
                    configurable: true,
                    writable: true,
                    enumerable: true,
                    value: val
                  });
                  delete m.values[keyName];
                },
                get: ember$metal$core$$default.DEFAULT_GETTER_FUNCTION(keyName)
              });
            }
          } else if (watching[keyName] > 1) {
            watching[keyName]--;
          }
        }

        ember$metal$watch_key$$unwatchKey = unwatchKey;
    }).call(this);

    (function() {
        var metaFor = ember$metal$utils$$meta,
            warn = ember$metal$core$$default.warn,
            FIRST_KEY = /^([^\.]+)/;

        function firstKey(path) {
          return path.match(FIRST_KEY)[0];
        }

        var pendingQueue = [];

        function flushPendingChains() {
          if (pendingQueue.length === 0) { return; } // nothing to do

          var queue = pendingQueue;
          pendingQueue = [];

          ember$metal$array$$forEach.call(queue, function(q) { q[0].add(q[1]); });

          warn('Watching an undefined global, Ember expects watched globals to be setup by the time the run loop is flushed, check for typos', pendingQueue.length === 0);
        }

        ember$metal$chains$$flushPendingChains = flushPendingChains;

        function addChainWatcher(obj, keyName, node) {
          if (!obj || ('object' !== typeof obj)) { return; } // nothing to do

          var m = metaFor(obj), nodes = m.chainWatchers;

          if (!m.hasOwnProperty('chainWatchers')) {
            nodes = m.chainWatchers = {};
          }

          if (!nodes[keyName]) { nodes[keyName] = []; }
          nodes[keyName].push(node);
          ember$metal$watch_key$$watchKey(obj, keyName, m);
        }

        function removeChainWatcher(obj, keyName, node) {
          if (!obj || 'object' !== typeof obj) { return; } // nothing to do

          var m = obj[ember$metal$utils$$META_KEY];
          if (m && !m.hasOwnProperty('chainWatchers')) { return; } // nothing to do

          var nodes = m && m.chainWatchers;

          if (nodes && nodes[keyName]) {
            nodes = nodes[keyName];
            for (var i = 0, l = nodes.length; i < l; i++) {
              if (nodes[i] === node) {
                nodes.splice(i, 1);
                break;
              }
            }
          }
          ember$metal$watch_key$$unwatchKey(obj, keyName, m);
        }

        ember$metal$chains$$removeChainWatcher = removeChainWatcher;

        // A ChainNode watches a single key on an object. If you provide a starting
        // value for the key then the node won't actually watch it. For a root node
        // pass null for parent and key and object for value.
        function ChainNode(parent, key, value) {
          this._parent = parent;
          this._key    = key;

          // _watching is true when calling get(this._parent, this._key) will
          // return the value of this node.
          //
          // It is false for the root of a chain (because we have no parent)
          // and for global paths (because the parent node is the object with
          // the observer on it)
          this._watching = value===undefined;

          this._value  = value;
          this._paths = {};
          if (this._watching) {
            this._object = parent.value();
            if (this._object) { addChainWatcher(this._object, this._key, this); }
          }

          // Special-case: the EachProxy relies on immediate evaluation to
          // establish its observers.
          //
          // TODO: Replace this with an efficient callback that the EachProxy
          // can implement.
          if (this._parent && this._parent._key === '@each') {
            this.value();
          }
        }

        ember$metal$chains$$ChainNode = ChainNode;
        var ChainNodePrototype = ember$metal$chains$$ChainNode.prototype;

        function lazyGet(obj, key) {
          if (!obj) return undefined;

          var meta = obj[ember$metal$utils$$META_KEY];
          // check if object meant only to be a prototype
          if (meta && meta.proto === obj) return undefined;

          if (key === "@each") return ember$metal$property_get$$get(obj, key);

          // if a CP only return cached value
          var desc = meta && meta.descs[key];
          if (desc && desc._cacheable) {
            if (key in meta.cache) {
              return meta.cache[key];
            } else {
              return undefined;
            }
          }

          return ember$metal$property_get$$get(obj, key);
        }

        ChainNodePrototype.value = function() {
          if (this._value === undefined && this._watching) {
            var obj = this._parent.value();
            this._value = lazyGet(obj, this._key);
          }
          return this._value;
        };

        ChainNodePrototype.destroy = function() {
          if (this._watching) {
            var obj = this._object;
            if (obj) { ember$metal$chains$$removeChainWatcher(obj, this._key, this); }
            this._watching = false; // so future calls do nothing
          }
        };

        // copies a top level object only
        ChainNodePrototype.copy = function(obj) {
          var ret = new ember$metal$chains$$ChainNode(null, null, obj),
              paths = this._paths, path;
          for (path in paths) {
            if (paths[path] <= 0) { continue; } // this check will also catch non-number vals.
            ret.add(path);
          }
          return ret;
        };

        // called on the root node of a chain to setup watchers on the specified
        // path.
        ChainNodePrototype.add = function(path) {
          var obj, tuple, key, src, paths;

          paths = this._paths;
          paths[path] = (paths[path] || 0) + 1;

          obj = this.value();
          tuple = ember$metal$property_get$$normalizeTuple(obj, path);

          // the path was a local path
          if (tuple[0] && tuple[0] === obj) {
            path = tuple[1];
            key  = firstKey(path);
            path = path.slice(key.length+1);

          // global path, but object does not exist yet.
          // put into a queue and try to connect later.
          } else if (!tuple[0]) {
            pendingQueue.push([this, path]);
            tuple.length = 0;
            return;

          // global path, and object already exists
          } else {
            src  = tuple[0];
            key  = path.slice(0, 0-(tuple[1].length+1));
            path = tuple[1];
          }

          tuple.length = 0;
          this.chain(key, path, src);
        };

        // called on the root node of a chain to teardown watcher on the specified
        // path
        ChainNodePrototype.remove = function(path) {
          var obj, tuple, key, src, paths;

          paths = this._paths;
          if (paths[path] > 0) { paths[path]--; }

          obj = this.value();
          tuple = ember$metal$property_get$$normalizeTuple(obj, path);
          if (tuple[0] === obj) {
            path = tuple[1];
            key  = firstKey(path);
            path = path.slice(key.length+1);
          } else {
            src  = tuple[0];
            key  = path.slice(0, 0-(tuple[1].length+1));
            path = tuple[1];
          }

          tuple.length = 0;
          this.unchain(key, path);
        };

        ChainNodePrototype.count = 0;

        ChainNodePrototype.chain = function(key, path, src) {
          var chains = this._chains, node;
          if (!chains) { chains = this._chains = {}; }

          node = chains[key];
          if (!node) { node = chains[key] = new ember$metal$chains$$ChainNode(this, key, src); }
          node.count++; // count chains...

          // chain rest of path if there is one
          if (path) {
            key = firstKey(path);
            path = path.slice(key.length+1);
            node.chain(key, path); // NOTE: no src means it will observe changes...
          }
        };

        ChainNodePrototype.unchain = function(key, path) {
          var chains = this._chains, node = chains[key];

          // unchain rest of path first...
          if (path && path.length>1) {
            key  = firstKey(path);
            path = path.slice(key.length+1);
            node.unchain(key, path);
          }

          // delete node if needed.
          node.count--;
          if (node.count<=0) {
            delete chains[node._key];
            node.destroy();
          }

        };

        ChainNodePrototype.willChange = function(events) {
          var chains = this._chains;
          if (chains) {
            for(var key in chains) {
              if (!chains.hasOwnProperty(key)) { continue; }
              chains[key].willChange(events);
            }
          }

          if (this._parent) { this._parent.chainWillChange(this, this._key, 1, events); }
        };

        ChainNodePrototype.chainWillChange = function(chain, path, depth, events) {
          if (this._key) { path = this._key + '.' + path; }

          if (this._parent) {
            this._parent.chainWillChange(this, path, depth+1, events);
          } else {
            if (depth > 1) {
              events.push(this.value(), path);
            }
            path = 'this.' + path;
            if (this._paths[path] > 0) {
              events.push(this.value(), path);
            }
          }
        };

        ChainNodePrototype.chainDidChange = function(chain, path, depth, events) {
          if (this._key) { path = this._key + '.' + path; }
          if (this._parent) {
            this._parent.chainDidChange(this, path, depth+1, events);
          } else {
            if (depth > 1) {
              events.push(this.value(), path);
            }
            path = 'this.' + path;
            if (this._paths[path] > 0) {
              events.push(this.value(), path);
            }
          }
        };

        ChainNodePrototype.didChange = function(events) {
          // invalidate my own value first.
          if (this._watching) {
            var obj = this._parent.value();
            if (obj !== this._object) {
              ember$metal$chains$$removeChainWatcher(this._object, this._key, this);
              this._object = obj;
              addChainWatcher(obj, this._key, this);
            }
            this._value  = undefined;

            // Special-case: the EachProxy relies on immediate evaluation to
            // establish its observers.
            if (this._parent && this._parent._key === '@each')
              this.value();
          }

          // then notify chains...
          var chains = this._chains;
          if (chains) {
            for(var key in chains) {
              if (!chains.hasOwnProperty(key)) { continue; }
              chains[key].didChange(events);
            }
          }

          // if no events are passed in then we only care about the above wiring update
          if (events === null) { return; }

          // and finally tell parent about my path changing...
          if (this._parent) { this._parent.chainDidChange(this, this._key, 1, events); }
        };

        function finishChains(obj) {
          // We only create meta if we really have to
          var m = obj[ember$metal$utils$$META_KEY], chains = m && m.chains;
          if (chains) {
            if (chains.value() !== obj) {
              metaFor(obj).chains = chains = chains.copy(obj);
            } else {
              chains.didChange(null);
            }
          }
        }

        ember$metal$chains$$finishChains = finishChains;
    }).call(this);

    (function() {
        var metaFor = ember$metal$utils$$meta;

        // get the chains for the current object. If the current object has
        // chains inherited from the proto they will be cloned and reconfigured for
        // the current object.
        function chainsFor(obj, meta) {
          var m = meta || metaFor(obj), ret = m.chains;
          if (!ret) {
            ret = m.chains = new ember$metal$chains$$ChainNode(null, null, obj);
          } else if (ret.value() !== obj) {
            ret = m.chains = ret.copy(obj);
          }
          return ret;
        }

        function watchPath(obj, keyPath, meta) {
          // can't watch length on Array - it is special...
          if (keyPath === 'length' && ember$metal$utils$$typeOf(obj) === 'array') { return; }

          var m = meta || metaFor(obj), watching = m.watching;

          if (!watching[keyPath]) { // activate watching first time
            watching[keyPath] = 1;
            chainsFor(obj, m).add(keyPath);
          } else {
            watching[keyPath] = (watching[keyPath] || 0) + 1;
          }
        }

        ember$metal$watch_path$$watchPath = watchPath;

        function unwatchPath(obj, keyPath, meta) {
          var m = meta || metaFor(obj), watching = m.watching;

          if (watching[keyPath] === 1) {
            watching[keyPath] = 0;
            chainsFor(obj, m).remove(keyPath);
          } else if (watching[keyPath] > 1) {
            watching[keyPath]--;
          }
        }

        ember$metal$watch_path$$unwatchPath = unwatchPath;
    }).call(this);

    (function() {
        // utils.js
        var metaFor = ember$metal$utils$$meta;

        // returns true if the passed path is just a keyName
        function isKeyName(path) {
          return path.indexOf('.') === -1;
        }

        /**
          Starts watching a property on an object. Whenever the property changes,
          invokes `Ember.propertyWillChange` and `Ember.propertyDidChange`. This is the
          primitive used by observers and dependent keys; usually you will never call
          this method directly but instead use higher level methods like
          `Ember.addObserver()`

          @private
          @method watch
          @for Ember
          @param obj
          @param {String} keyName
        */
        function watch(obj, _keyPath, m) {
          // can't watch length on Array - it is special...
          if (_keyPath === 'length' && ember$metal$utils$$typeOf(obj) === 'array') { return; }

          if (isKeyName(_keyPath)) {
            ember$metal$watch_key$$watchKey(obj, _keyPath, m);
          } else {
            ember$metal$watch_path$$watchPath(obj, _keyPath, m);
          }
        }

        ember$metal$watching$$watch = watch;

        function isWatching(obj, key) {
          var meta = obj[ember$metal$utils$$META_KEY];
          return (meta && meta.watching[key]) > 0;
        }

        ember$metal$watching$$isWatching = isWatching;
        ember$metal$watching$$watch.flushPending = ember$metal$chains$$flushPendingChains;

        function unwatch(obj, _keyPath, m) {
          // can't watch length on Array - it is special...
          if (_keyPath === 'length' && ember$metal$utils$$typeOf(obj) === 'array') { return; }

          if (isKeyName(_keyPath)) {
            ember$metal$watch_key$$unwatchKey(obj, _keyPath, m);
          } else {
            ember$metal$watch_path$$unwatchPath(obj, _keyPath, m);
          }
        }

        ember$metal$watching$$unwatch = unwatch;

        function rewatch(obj) {
          var m = obj[ember$metal$utils$$META_KEY], chains = m && m.chains;

          // make sure the object has its own guid.
          if (ember$metal$utils$$GUID_KEY in obj && !obj.hasOwnProperty(ember$metal$utils$$GUID_KEY)) {
            ember$metal$utils$$generateGuid(obj);
          }

          // make sure any chained watchers update.
          if (chains && chains.value() !== obj) {
            m.chains = chains.copy(obj);
          }
        }

        ember$metal$watching$$rewatch = rewatch;
        var NODE_STACK = [];

        function destroy(obj) {
          var meta = obj[ember$metal$utils$$META_KEY], node, nodes, key, nodeObject;
          if (meta) {
            obj[ember$metal$utils$$META_KEY] = null;
            // remove chainWatchers to remove circular references that would prevent GC
            node = meta.chains;
            if (node) {
              NODE_STACK.push(node);
              // process tree
              while (NODE_STACK.length > 0) {
                node = NODE_STACK.pop();
                // push children
                nodes = node._chains;
                if (nodes) {
                  for (key in nodes) {
                    if (nodes.hasOwnProperty(key)) {
                      NODE_STACK.push(nodes[key]);
                    }
                  }
                }
                // remove chainWatcher in node object
                if (node._watching) {
                  nodeObject = node._object;
                  if (nodeObject) {
                    ember$metal$chains$$removeChainWatcher(nodeObject, node._key, node);
                  }
                }
              }
            }
          }
        }

        ember$metal$watching$$destroy = destroy;
    }).call(this);

    (function() {
        ember$metal$merge$$default = function merge(original, updates) {
          for (var prop in updates) {
            if (!updates.hasOwnProperty(prop)) { continue; }
            original[prop] = updates[prop];
          }
          return original;
        };
    }).call(this);

    (function() {
        var splice = Array.prototype.splice;

        /**
         * Defines some convenience methods for working with Enumerables.
         * `Ember.EnumerableUtils` uses `Ember.ArrayPolyfills` when necessary.
         *
         * @class EnumerableUtils
         * @namespace Ember
         * @static
         * */
        var utils = {
          /**
           * Calls the map function on the passed object with a specified callback. This
           * uses `Ember.ArrayPolyfill`'s-map method when necessary.
           *
           * @method map
           * @param {Object} obj The object that should be mapped
           * @param {Function} callback The callback to execute
           * @param {Object} thisArg Value to use as this when executing *callback*
           *
           * @return {Array} An array of mapped values.
           */
          map: function(obj, callback, thisArg) {
            return obj.map ? obj.map.call(obj, callback, thisArg) : ember$metal$array$$map.call(obj, callback, thisArg);
          },

          /**
           * Calls the forEach function on the passed object with a specified callback. This
           * uses `Ember.ArrayPolyfill`'s-forEach method when necessary.
           *
           * @method forEach
           * @param {Object} obj The object to call forEach on
           * @param {Function} callback The callback to execute
           * @param {Object} thisArg Value to use as this when executing *callback*
           *
           */
          forEach: function(obj, callback, thisArg) {
            return obj.forEach ? obj.forEach.call(obj, callback, thisArg) : ember$metal$array$$forEach.call(obj, callback, thisArg);
          },

          /**
           * Calls the filter function on the passed object with a specified callback. This
           * uses `Ember.ArrayPolyfill`'s-filter method when necessary.
           *
           * @method filter
           * @param {Object} obj The object to call filter on
           * @param {Function} callback The callback to execute
           * @param {Object} thisArg Value to use as this when executing *callback*
           *
           * @return {Array} An array containing the filtered values
           * @since 1.4.0
           */
          filter: function(obj, callback, thisArg) {
            return obj.filter ? obj.filter.call(obj, callback, thisArg) : ember$metal$array$$filter.call(obj, callback, thisArg);
          },

          /**
           * Calls the indexOf function on the passed object with a specified callback. This
           * uses `Ember.ArrayPolyfill`'s-indexOf method when necessary.
           *
           * @method indexOf
           * @param {Object} obj The object to call indexOn on
           * @param {Function} callback The callback to execute
           * @param {Object} index The index to start searching from
           *
           */
          indexOf: function(obj, element, index) {
            return obj.indexOf ? obj.indexOf.call(obj, element, index) : ember$metal$array$$indexOf.call(obj, element, index);
          },

          /**
           * Returns an array of indexes of the first occurrences of the passed elements
           * on the passed object.
           *
           * ```javascript
           *  var array = [1, 2, 3, 4, 5];
           *  Ember.EnumerableUtils.indexesOf(array, [2, 5]); // [1, 4]
           *
           *  var fubar = "Fubarr";
           *  Ember.EnumerableUtils.indexesOf(fubar, ['b', 'r']); // [2, 4]
           * ```
           *
           * @method indexesOf
           * @param {Object} obj The object to check for element indexes
           * @param {Array} elements The elements to search for on *obj*
           *
           * @return {Array} An array of indexes.
           *
           */
          indexesOf: function(obj, elements) {
            return elements === undefined ? [] : utils.map(elements, function(item) {
              return utils.indexOf(obj, item);
            });
          },

          /**
           * Adds an object to an array. If the array already includes the object this
           * method has no effect.
           *
           * @method addObject
           * @param {Array} array The array the passed item should be added to
           * @param {Object} item The item to add to the passed array
           *
           * @return 'undefined'
           */
          addObject: function(array, item) {
            var index = utils.indexOf(array, item);
            if (index === -1) { array.push(item); }
          },

          /**
           * Removes an object from an array. If the array does not contain the passed
           * object this method has no effect.
           *
           * @method removeObject
           * @param {Array} array The array to remove the item from.
           * @param {Object} item The item to remove from the passed array.
           *
           * @return 'undefined'
           */
          removeObject: function(array, item) {
            var index = utils.indexOf(array, item);
            if (index !== -1) { array.splice(index, 1); }
          },

          _replace: function(array, idx, amt, objects) {
            var args = [].concat(objects), chunk, ret = [],
                // https://code.google.com/p/chromium/issues/detail?id=56588
                size = 60000, start = idx, ends = amt, count;

            while (args.length) {
              count = ends > size ? size : ends;
              if (count <= 0) { count = 0; }

              chunk = args.splice(0, size);
              chunk = [start, count].concat(chunk);

              start += size;
              ends -= count;

              ret = ret.concat(splice.apply(array, chunk));
            }
            return ret;
          },

          /**
           * Replaces objects in an array with the passed objects.
           *
           * ```javascript
           *   var array = [1,2,3];
           *   Ember.EnumerableUtils.replace(array, 1, 2, [4, 5]); // [1, 4, 5]
           *
           *   var array = [1,2,3];
           *   Ember.EnumerableUtils.replace(array, 1, 1, [4, 5]); // [1, 4, 5, 3]
           *
           *   var array = [1,2,3];
           *   Ember.EnumerableUtils.replace(array, 10, 1, [4, 5]); // [1, 2, 3, 4, 5]
           * ```
           *
           * @method replace
           * @param {Array} array The array the objects should be inserted into.
           * @param {Number} idx Starting index in the array to replace. If *idx* >=
           * length, then append to the end of the array.
           * @param {Number} amt Number of elements that should be removed from the array,
           * starting at *idx*
           * @param {Array} objects An array of zero or more objects that should be
           * inserted into the array at *idx*
           *
           * @return {Array} The modified array.
           */
          replace: function(array, idx, amt, objects) {
            if (array.replace) {
              return array.replace(idx, amt, objects);
            } else {
              return utils._replace(array, idx, amt, objects);
            }
          },

          /**
           * Calculates the intersection of two arrays. This method returns a new array
           * filled with the records that the two passed arrays share with each other.
           * If there is no intersection, an empty array will be returned.
           *
           * ```javascript
           * var array1 = [1, 2, 3, 4, 5];
           * var array2 = [1, 3, 5, 6, 7];
           *
           * Ember.EnumerableUtils.intersection(array1, array2); // [1, 3, 5]
           *
           * var array1 = [1, 2, 3];
           * var array2 = [4, 5, 6];
           *
           * Ember.EnumerableUtils.intersection(array1, array2); // []
           * ```
           *
           * @method intersection
           * @param {Array} array1 The first array
           * @param {Array} array2 The second array
           *
           * @return {Array} The intersection of the two passed arrays.
           */
          intersection: function(array1, array2) {
            var intersection = [];

            utils.forEach(array1, function(element) {
              if (utils.indexOf(array2, element) >= 0) {
                intersection.push(element);
              }
            });

            return intersection;
          }
        };

        ember$metal$enumerable_utils$$default = utils;
    }).call(this);

    (function() {
        /**
          @module ember-metal
          */

        var forEach = ember$metal$enumerable_utils$$default.forEach,
          BRACE_EXPANSION = /^((?:[^\.]*\.)*)\{(.*)\}$/;

        ember$metal$expand_properties$$default = function expandProperties(pattern, callback) {
          var match, prefix, list;

          if (pattern.indexOf(' ') > -1) {
            throw new ember$metal$error$$default('Brace expanded properties cannot contain spaces, ' + 
              'e.g. `user.{firstName, lastName}` should be `user.{firstName,lastName}`');
          }

          if (match = BRACE_EXPANSION.exec(pattern)) {
            prefix = match[1];
            list = match[2];

            forEach(list.split(','), function (suffix) {
                callback(prefix + suffix);
            });
          } else {
            callback(pattern);
          }
        };
    }).call(this);

    (function() {
        /**
          Returns true if the passed value is null or undefined. This avoids errors
          from JSLint complaining about use of ==, which can be technically
          confusing.

          ```javascript
          Ember.isNone();              // true
          Ember.isNone(null);          // true
          Ember.isNone(undefined);     // true
          Ember.isNone('');            // false
          Ember.isNone([]);            // false
          Ember.isNone(function() {});  // false
          ```

          @method isNone
          @for Ember
          @param {Object} obj Value to test
          @return {Boolean}
        */
        function isNone(obj) {
          return obj === null || obj === undefined;
        }

        ember$metal$is_none$$isNone = isNone;
        ember$metal$is_none$$none = ember$metal$core$$default.deprecateFunc("Ember.none is deprecated. Please use Ember.isNone instead.", ember$metal$is_none$$isNone);
        ember$metal$is_none$$default = ember$metal$is_none$$isNone;
    }).call(this);

    (function() {
        /**
          Verifies that a value is `null` or an empty string, empty array,
          or empty function.

          Constrains the rules on `Ember.isNone` by returning false for empty
          string and empty arrays.

          ```javascript
          Ember.isEmpty();                // true
          Ember.isEmpty(null);            // true
          Ember.isEmpty(undefined);       // true
          Ember.isEmpty('');              // true
          Ember.isEmpty([]);              // true
          Ember.isEmpty('Adam Hawkins');  // false
          Ember.isEmpty([0,1,2]);         // false
          ```

          @method isEmpty
          @for Ember
          @param {Object} obj Value to test
          @return {Boolean}
        */
        function isEmpty(obj) {
          return ember$metal$is_none$$default(obj) || (obj.length === 0 && typeof obj !== 'function') || (typeof obj === 'object' && ember$metal$property_get$$get(obj, 'length') === 0);
        }

        ember$metal$is_empty$$isEmpty = isEmpty;
        ember$metal$is_empty$$empty = ember$metal$core$$default.deprecateFunc("Ember.empty is deprecated. Please use Ember.isEmpty instead.", ember$metal$is_empty$$isEmpty);
        ember$metal$is_empty$$default = ember$metal$is_empty$$isEmpty;
    }).call(this);

    (function() {
        /**
        @module ember-metal
        */

        ember$metal$core$$default.warn("The CP_DEFAULT_CACHEABLE flag has been removed and computed properties are always cached by default. Use `volatile` if you don't want caching.", ember$metal$core$$default.ENV.CP_DEFAULT_CACHEABLE !== false);

        var metaFor = ember$metal$utils$$meta,
            a_slice = [].slice,
            o_create = ember$metal$platform$$create;

        function UNDEFINED() { }
        var lengthPattern = /\.(length|\[\])$/;

        // ..........................................................
        // DEPENDENT KEYS
        //

        // data structure:
        //  meta.deps = {
        //   'depKey': {
        //     'keyName': count,
        //   }
        //  }

        /*
          This function returns a map of unique dependencies for a
          given object and key.
        */
        function keysForDep(depsMeta, depKey) {
          var keys = depsMeta[depKey];
          if (!keys) {
            // if there are no dependencies yet for a the given key
            // create a new empty list of dependencies for the key
            keys = depsMeta[depKey] = {};
          } else if (!depsMeta.hasOwnProperty(depKey)) {
            // otherwise if the dependency list is inherited from
            // a superclass, clone the hash
            keys = depsMeta[depKey] = o_create(keys);
          }
          return keys;
        }

        function metaForDeps(meta) {
          return keysForDep(meta, 'deps');
        }

        function addDependentKeys(desc, obj, keyName, meta) {
          // the descriptor has a list of dependent keys, so
          // add all of its dependent keys.
          var depKeys = desc._dependentKeys, depsMeta, idx, len, depKey, keys;
          if (!depKeys) return;

          depsMeta = metaForDeps(meta);

          for(idx = 0, len = depKeys.length; idx < len; idx++) {
            depKey = depKeys[idx];
            // Lookup keys meta for depKey
            keys = keysForDep(depsMeta, depKey);
            // Increment the number of times depKey depends on keyName.
            keys[keyName] = (keys[keyName] || 0) + 1;
            // Watch the depKey
            ember$metal$watching$$watch(obj, depKey, meta);
          }
        }

        function removeDependentKeys(desc, obj, keyName, meta) {
          // the descriptor has a list of dependent keys, so
          // remove all of its dependent keys.
          var depKeys = desc._dependentKeys, depsMeta, idx, len, depKey, keys;
          if (!depKeys) return;

          depsMeta = metaForDeps(meta);

          for(idx = 0, len = depKeys.length; idx < len; idx++) {
            depKey = depKeys[idx];
            // Lookup keys meta for depKey
            keys = keysForDep(depsMeta, depKey);
            // Decrement the number of times depKey depends on keyName.
            keys[keyName] = (keys[keyName] || 0) - 1;
            // Unwatch the depKey
            ember$metal$watching$$unwatch(obj, depKey, meta);
          }
        }

        // ..........................................................
        // COMPUTED PROPERTY
        //

        /**
          A computed property transforms an objects function into a property.

          By default the function backing the computed property will only be called
          once and the result will be cached. You can specify various properties
          that your computed property is dependent on. This will force the cached
          result to be recomputed if the dependencies are modified.

          In the following example we declare a computed property (by calling
          `.property()` on the fullName function) and setup the properties
          dependencies (depending on firstName and lastName). The fullName function
          will be called once (regardless of how many times it is accessed) as long
          as it's dependencies have not been changed. Once firstName or lastName are updated
          any future calls (or anything bound) to fullName will incorporate the new
          values.

          ```javascript
          Person = Ember.Object.extend({
            // these will be supplied by `create`
            firstName: null,
            lastName: null,

            fullName: function() {
              var firstName = this.get('firstName');
              var lastName = this.get('lastName');

             return firstName + ' ' + lastName;
            }.property('firstName', 'lastName')
          });

          var tom = Person.create({
            firstName: 'Tom',
            lastName: 'Dale'
          });

          tom.get('fullName') // 'Tom Dale'
          ```

          You can also define what Ember should do when setting a computed property.
          If you try to set a computed property, it will be invoked with the key and
          value you want to set it to. You can also accept the previous value as the
          third parameter.

          ```javascript

         Person = Ember.Object.extend({
            // these will be supplied by `create`
            firstName: null,
            lastName: null,

            fullName: function(key, value, oldValue) {
              // getter
              if (arguments.length === 1) {
                var firstName = this.get('firstName');
                var lastName = this.get('lastName');

                return firstName + ' ' + lastName;

              // setter
              } else {
                var name = value.split(" ");

                this.set('firstName', name[0]);
                this.set('lastName', name[1]);

                return value;
              }
            }.property('firstName', 'lastName')
          });

          var person = Person.create();
          person.set('fullName', 'Peter Wagenet');
          person.get('firstName') // 'Peter'
          person.get('lastName') // 'Wagenet'
          ```

          @class ComputedProperty
          @namespace Ember
          @extends Ember.Descriptor
          @constructor
        */
        function ComputedProperty(func, opts) {
          func.__ember_arity__ = func.length;
          this.func = func;

          this._cacheable = (opts && opts.cacheable !== undefined) ? opts.cacheable : true;
          this._dependentKeys = opts && opts.dependentKeys;
          this._readOnly = opts && (opts.readOnly !== undefined || !!opts.readOnly) || false;
        }

        ember$metal$computed$$ComputedProperty = ComputedProperty;
        ember$metal$computed$$ComputedProperty.prototype = new ember$metal$properties$$Descriptor();
        var ComputedPropertyPrototype = ember$metal$computed$$ComputedProperty.prototype;
        ComputedPropertyPrototype._dependentKeys = undefined;
        ComputedPropertyPrototype._suspended = undefined;
        ComputedPropertyPrototype._meta = undefined;

        /**
          Properties are cacheable by default. Computed property will automatically
          cache the return value of your function until one of the dependent keys changes.

          Call `volatile()` to set it into non-cached mode. When in this mode
          the computed property will not automatically cache the return value.

          However, if a property is properly observable, there is no reason to disable
          caching.

          @method cacheable
          @param {Boolean} aFlag optional set to `false` to disable caching
          @return {Ember.ComputedProperty} this
          @chainable
        */
        ComputedPropertyPrototype.cacheable = function(aFlag) {
          this._cacheable = aFlag !== false;
          return this;
        };

        /**
          Call on a computed property to set it into non-cached mode. When in this
          mode the computed property will not automatically cache the return value.

          ```javascript
          MyApp.outsideService = Ember.Object.extend({
            value: function() {
              return OutsideService.getValue();
            }.property().volatile()
          }).create();
          ```

          @method volatile
          @return {Ember.ComputedProperty} this
          @chainable
        */
        ComputedPropertyPrototype.volatile = function() {
          return this.cacheable(false);
        };

        /**
          Call on a computed property to set it into read-only mode. When in this
          mode the computed property will throw an error when set.

          ```javascript
          MyApp.Person = Ember.Object.extend({
            guid: function() {
              return 'guid-guid-guid';
            }.property().readOnly()
          });

          MyApp.person = MyApp.Person.create();

          MyApp.person.set('guid', 'new-guid'); // will throw an exception
          ```

          @method readOnly
          @return {Ember.ComputedProperty} this
          @chainable
        */
        ComputedPropertyPrototype.readOnly = function(readOnly) {
          this._readOnly = readOnly === undefined || !!readOnly;
          return this;
        };

        /**
          Sets the dependent keys on this computed property. Pass any number of
          arguments containing key paths that this computed property depends on.

          ```javascript
          MyApp.President = Ember.Object.extend({
            fullName: computed(function() {
              return this.get('firstName') + ' ' + this.get('lastName');

              // Tell Ember that this computed property depends on firstName
              // and lastName
            }).property('firstName', 'lastName')
          });

          MyApp.president = MyApp.President.create({
            firstName: 'Barack',
            lastName: 'Obama',
          });

          MyApp.president.get('fullName'); // 'Barack Obama'
          ```

          @method property
          @param {String} path* zero or more property paths
          @return {Ember.ComputedProperty} this
          @chainable
        */
        ComputedPropertyPrototype.property = function() {
          var args;

          var addArg = function (property) {
            args.push(property);
          };

          args = [];
          for (var i = 0, l = arguments.length; i < l; i++) {
            ember$metal$expand_properties$$default(arguments[i], addArg);
          }

          this._dependentKeys = args;
          return this;
        };

        /**
          In some cases, you may want to annotate computed properties with additional
          metadata about how they function or what values they operate on. For example,
          computed property functions may close over variables that are then no longer
          available for introspection.

          You can pass a hash of these values to a computed property like this:

          ```
          person: function() {
            var personId = this.get('personId');
            return App.Person.create({ id: personId });
          }.property().meta({ type: App.Person })
          ```

          The hash that you pass to the `meta()` function will be saved on the
          computed property descriptor under the `_meta` key. Ember runtime
          exposes a public API for retrieving these values from classes,
          via the `metaForProperty()` function.

          @method meta
          @param {Hash} meta
          @chainable
        */

        ComputedPropertyPrototype.meta = function(meta) {
          if (arguments.length === 0) {
            return this._meta || {};
          } else {
            this._meta = meta;
            return this;
          }
        };

        /* impl descriptor API */
        ComputedPropertyPrototype.didChange = function(obj, keyName) {
          // _suspended is set via a CP.set to ensure we don't clear
          // the cached value set by the setter
          if (this._cacheable && this._suspended !== obj) {
            var meta = metaFor(obj);
            if (meta.cache[keyName] !== undefined) {
              meta.cache[keyName] = undefined;
              removeDependentKeys(this, obj, keyName, meta);
            }
          }
        };

        function finishChains(chainNodes)
        {
          for (var i=0, l=chainNodes.length; i<l; i++) {
            chainNodes[i].didChange(null);
          }
        }

        /**
          Access the value of the function backing the computed property.
          If this property has already been cached, return the cached result.
          Otherwise, call the function passing the property name as an argument.

          ```javascript
          Person = Ember.Object.extend({
            fullName: function(keyName) {
              // the keyName parameter is 'fullName' in this case.

              return this.get('firstName') + ' ' + this.get('lastName');
            }.property('firstName', 'lastName')
          });


          var tom = Person.create({
            firstName: 'Tom',
            lastName: 'Dale'
          });

          tom.get('fullName') // 'Tom Dale'
          ```

          @method get
          @param {String} keyName The key being accessed.
          @return {Object} The return value of the function backing the CP.
        */
        ComputedPropertyPrototype.get = function(obj, keyName) {
          var ret, cache, meta, chainNodes;
          if (this._cacheable) {
            meta = metaFor(obj);
            cache = meta.cache;

            var result = cache[keyName];

            if (result === UNDEFINED) {
              return undefined;
            }  else if (result !== undefined) {
              return result;
            }

            ret = this.func.call(obj, keyName);
            if (ret === undefined) {
              cache[keyName] = UNDEFINED;
            } else {
              cache[keyName] = ret;
            }

            chainNodes = meta.chainWatchers && meta.chainWatchers[keyName];
            if (chainNodes) { finishChains(chainNodes); }
            addDependentKeys(this, obj, keyName, meta);
          } else {
            ret = this.func.call(obj, keyName);
          }
          return ret;
        };

        /**
          Set the value of a computed property. If the function that backs your
          computed property does not accept arguments then the default action for
          setting would be to define the property on the current object, and set
          the value of the property to the value being set.

          Generally speaking if you intend for your computed property to be set
          your backing function should accept either two or three arguments.

          @method set
          @param {String} keyName The key being accessed.
          @param {Object} newValue The new value being assigned.
          @param {String} oldValue The old value being replaced.
          @return {Object} The return value of the function backing the CP.
        */
        ComputedPropertyPrototype.set = function(obj, keyName, value) {
          var cacheable = this._cacheable,
              func = this.func,
              meta = metaFor(obj, cacheable),
              oldSuspended = this._suspended,
              hadCachedValue = false,
              cache = meta.cache,
              funcArgLength, cachedValue, ret;

          if (this._readOnly) {
            throw new ember$metal$error$$default('Cannot set read-only property "' + keyName + '" on object: ' + ember$metal$utils$$inspect(obj));
          }

          this._suspended = obj;

          try {

            if (cacheable && cache[keyName] !== undefined) {
              cachedValue = cache[keyName];
              hadCachedValue = true;
            }

            // Check if the CP has been wrapped. If it has, use the
            // length from the wrapped function.

            funcArgLength = func.wrappedFunction ? func.wrappedFunction.__ember_arity__ : func.__ember_arity__;

            // For backwards-compatibility with computed properties
            // that check for arguments.length === 2 to determine if
            // they are being get or set, only pass the old cached
            // value if the computed property opts into a third
            // argument.
            if (funcArgLength === 3) {
              ret = func.call(obj, keyName, value, cachedValue);
            } else if (funcArgLength === 2) {
              ret = func.call(obj, keyName, value);
            } else {
              ember$metal$properties$$defineProperty(obj, keyName, null, cachedValue);
              ember$metal$property_set$$set(obj, keyName, value);
              return;
            }

            if (hadCachedValue && cachedValue === ret) { return; }

            var watched = meta.watching[keyName];
            if (watched) { ember$metal$property_events$$propertyWillChange(obj, keyName); }

            if (hadCachedValue) {
              cache[keyName] = undefined;
            }

            if (cacheable) {
              if (!hadCachedValue) {
                addDependentKeys(this, obj, keyName, meta);
              }
              if (ret === undefined) {
                cache[keyName] = UNDEFINED;
              } else {
                cache[keyName] = ret;
              }
            }

            if (watched) { ember$metal$property_events$$propertyDidChange(obj, keyName); }
          } finally {
            this._suspended = oldSuspended;
          }
          return ret;
        };

        /* called before property is overridden */
        ComputedPropertyPrototype.teardown = function(obj, keyName) {
          var meta = metaFor(obj);

          if (keyName in meta.cache) {
            removeDependentKeys(this, obj, keyName, meta);
          }

          if (this._cacheable) { delete meta.cache[keyName]; }

          return null; // no value to restore
        };

        /**
          This helper returns a new property descriptor that wraps the passed
          computed property function. You can use this helper to define properties
          with mixins or via `Ember.defineProperty()`.

          The function you pass will be used to both get and set property values.
          The function should accept two parameters, key and value. If value is not
          undefined you should set the value first. In either case return the
          current value of the property.

          @method computed
          @for Ember
          @param {Function} func The computed property function.
          @return {Ember.ComputedProperty} property descriptor instance
        */
        function computed(func) {
          var args;

          if (arguments.length > 1) {
            args = a_slice.call(arguments);
            func = args.pop();
          }

          if (typeof func !== "function") {
            throw new ember$metal$error$$default("Computed Property declared without a property function");
          }

          var cp = new ember$metal$computed$$ComputedProperty(func);

          if (args) {
            cp.property.apply(cp, args);
          }

          return cp;
        }

        ember$metal$computed$$computed = computed;

        /**
          Returns the cached value for a property, if one exists.
          This can be useful for peeking at the value of a computed
          property that is generated lazily, without accidentally causing
          it to be created.

          @method cacheFor
          @for Ember
          @param {Object} obj the object whose property you want to check
          @param {String} key the name of the property whose cached value you want
            to return
          @return {Object} the cached value
        */
        function cacheFor(obj, key) {
          var meta = obj[ember$metal$utils$$META_KEY],
              cache = meta && meta.cache,
              ret = cache && cache[key];

          if (ret === UNDEFINED) { return undefined; }
          return ret;
        }

        ember$metal$computed$$cacheFor = cacheFor;

        ember$metal$computed$$cacheFor.set = function(cache, key, value) {
          if (value === undefined) {
            cache[key] = UNDEFINED;
          } else {
            cache[key] = value;
          }
        };

        ember$metal$computed$$cacheFor.get = function(cache, key) {
          var ret = cache[key];
          if (ret === UNDEFINED) { return undefined; }
          return ret;
        };

        ember$metal$computed$$cacheFor.remove = function(cache, key) {
          cache[key] = undefined;
        };

        function getProperties(self, propertyNames) {
          var ret = {};
          for(var i = 0; i < propertyNames.length; i++) {
            ret[propertyNames[i]] = ember$metal$property_get$$get(self, propertyNames[i]);
          }
          return ret;
        }

        function registerComputed(name, macro) {
          ember$metal$computed$$computed[name] = function(dependentKey) {
            var args = a_slice.call(arguments);
            return ember$metal$computed$$computed(dependentKey, function() {
              return macro.apply(this, args);
            });
          };
        }

        function registerComputedWithProperties(name, macro) {
          ember$metal$computed$$computed[name] = function() {
            var properties = a_slice.call(arguments);

            var computedFunc = ember$metal$computed$$computed(function() {
              return macro.apply(this, [getProperties(this, properties)]);
            });

            return computedFunc.property.apply(computedFunc, properties);
          };
        }

        /**
          A computed property that returns true if the value of the dependent
          property is null, an empty string, empty array, or empty function.

          Example

          ```javascript
          var ToDoList = Ember.Object.extend({
            done: Ember.computed.empty('todos')
          });

          var todoList = ToDoList.create({todos: ['Unit Test', 'Documentation', 'Release']});

          todoList.get('done'); // false
          todoList.get('todos').clear();
          todoList.get('done'); // true
          ```

          @since 1.6.0
          @method computed.empty
          @for Ember
          @param {String} dependentKey
          @return {Ember.ComputedProperty} computed property which negate
          the original value for property
        */
        ember$metal$computed$$computed.empty = function (dependentKey) {
          return ember$metal$computed$$computed(dependentKey + '.length', function () {
            return ember$metal$is_empty$$default(ember$metal$property_get$$get(this, dependentKey));
          });
        };

        /**
          A computed property that returns true if the value of the dependent
          property is NOT null, an empty string, empty array, or empty function.

          Note: When using `computed.notEmpty` to watch an array make sure to
          use the `array.[]` syntax so the computed can subscribe to transitions
          from empty to non-empty states.

          Example

          ```javascript
          var Hamster = Ember.Object.extend({
            hasStuff: Ember.computed.notEmpty('backpack.[]')
          });

          var hamster = Hamster.create({backpack: ['Food', 'Sleeping Bag', 'Tent']});

          hamster.get('hasStuff'); // true
          hamster.get('backpack').clear(); // []
          hamster.get('hasStuff'); // false
          ```

          @method computed.notEmpty
          @for Ember
          @param {String} dependentKey
          @return {Ember.ComputedProperty} computed property which returns true if
          original value for property is not empty.
        */
        registerComputed('notEmpty', function(dependentKey) {
          return !ember$metal$is_empty$$default(ember$metal$property_get$$get(this, dependentKey));
        });

        /**
          A computed property that returns true if the value of the dependent
          property is null or undefined. This avoids errors from JSLint complaining
          about use of ==, which can be technically confusing.

          Example

          ```javascript
          var Hamster = Ember.Object.extend({
            isHungry: Ember.computed.none('food')
          });

          var hamster = Hamster.create();

          hamster.get('isHungry'); // true
          hamster.set('food', 'Banana');
          hamster.get('isHungry'); // false
          hamster.set('food', null);
          hamster.get('isHungry'); // true
          ```

          @method computed.none
          @for Ember
          @param {String} dependentKey
          @return {Ember.ComputedProperty} computed property which
          returns true if original value for property is null or undefined.
        */
        registerComputed('none', function(dependentKey) {
          return ember$metal$is_none$$isNone(ember$metal$property_get$$get(this, dependentKey));
        });

        /**
          A computed property that returns the inverse boolean value
          of the original value for the dependent property.

          Example

          ```javascript
          var User = Ember.Object.extend({
            isAnonymous: Ember.computed.not('loggedIn')
          });

          var user = User.create({loggedIn: false});

          user.get('isAnonymous'); // true
          user.set('loggedIn', true);
          user.get('isAnonymous'); // false
          ```

          @method computed.not
          @for Ember
          @param {String} dependentKey
          @return {Ember.ComputedProperty} computed property which returns
          inverse of the original value for property
        */
        registerComputed('not', function(dependentKey) {
          return !ember$metal$property_get$$get(this, dependentKey);
        });

        /**
          A computed property that converts the provided dependent property
          into a boolean value.

          ```javascript
          var Hamster = Ember.Object.extend({
            hasBananas: Ember.computed.bool('numBananas')
          });

          var hamster = Hamster.create();

          hamster.get('hasBananas'); // false
          hamster.set('numBananas', 0);
          hamster.get('hasBananas'); // false
          hamster.set('numBananas', 1);
          hamster.get('hasBananas'); // true
          hamster.set('numBananas', null);
          hamster.get('hasBananas'); // false
          ```

          @method computed.bool
          @for Ember
          @param {String} dependentKey
          @return {Ember.ComputedProperty} computed property which converts
          to boolean the original value for property
        */
        registerComputed('bool', function(dependentKey) {
          return !!ember$metal$property_get$$get(this, dependentKey);
        });

        /**
          A computed property which matches the original value for the
          dependent property against a given RegExp, returning `true`
          if they values matches the RegExp and `false` if it does not.

          Example

          ```javascript
          var User = Ember.Object.extend({
            hasValidEmail: Ember.computed.match('email', /^.+@.+\..+$/)
          });

          var user = User.create({loggedIn: false});

          user.get('hasValidEmail'); // false
          user.set('email', '');
          user.get('hasValidEmail'); // false
          user.set('email', 'ember_hamster@example.com');
          user.get('hasValidEmail'); // true
          ```

          @method computed.match
          @for Ember
          @param {String} dependentKey
          @param {RegExp} regexp
          @return {Ember.ComputedProperty} computed property which match
          the original value for property against a given RegExp
        */
        registerComputed('match', function(dependentKey, regexp) {
          var value = ember$metal$property_get$$get(this, dependentKey);
          return typeof value === 'string' ? regexp.test(value) : false;
        });

        /**
          A computed property that returns true if the provided dependent property
          is equal to the given value.

          Example

          ```javascript
          var Hamster = Ember.Object.extend({
            napTime: Ember.computed.equal('state', 'sleepy')
          });

          var hamster = Hamster.create();

          hamster.get('napTime'); // false
          hamster.set('state', 'sleepy');
          hamster.get('napTime'); // true
          hamster.set('state', 'hungry');
          hamster.get('napTime'); // false
          ```

          @method computed.equal
          @for Ember
          @param {String} dependentKey
          @param {String|Number|Object} value
          @return {Ember.ComputedProperty} computed property which returns true if
          the original value for property is equal to the given value.
        */
        registerComputed('equal', function(dependentKey, value) {
          return ember$metal$property_get$$get(this, dependentKey) === value;
        });

        /**
          A computed property that returns true if the provied dependent property
          is greater than the provided value.

          Example

          ```javascript
          var Hamster = Ember.Object.extend({
            hasTooManyBananas: Ember.computed.gt('numBananas', 10)
          });

          var hamster = Hamster.create();

          hamster.get('hasTooManyBananas'); // false
          hamster.set('numBananas', 3);
          hamster.get('hasTooManyBananas'); // false
          hamster.set('numBananas', 11);
          hamster.get('hasTooManyBananas'); // true
          ```

          @method computed.gt
          @for Ember
          @param {String} dependentKey
          @param {Number} value
          @return {Ember.ComputedProperty} computed property which returns true if
          the original value for property is greater then given value.
        */
        registerComputed('gt', function(dependentKey, value) {
          return ember$metal$property_get$$get(this, dependentKey) > value;
        });

        /**
          A computed property that returns true if the provided dependent property
          is greater than or equal to the provided value.

          Example

          ```javascript
          var Hamster = Ember.Object.extend({
            hasTooManyBananas: Ember.computed.gte('numBananas', 10)
          });

          var hamster = Hamster.create();

          hamster.get('hasTooManyBananas'); // false
          hamster.set('numBananas', 3);
          hamster.get('hasTooManyBananas'); // false
          hamster.set('numBananas', 10);
          hamster.get('hasTooManyBananas'); // true
          ```

          @method computed.gte
          @for Ember
          @param {String} dependentKey
          @param {Number} value
          @return {Ember.ComputedProperty} computed property which returns true if
          the original value for property is greater or equal then given value.
        */
        registerComputed('gte', function(dependentKey, value) {
          return ember$metal$property_get$$get(this, dependentKey) >= value;
        });

        /**
          A computed property that returns true if the provided dependent property
          is less than the provided value.

          Example

          ```javascript
          var Hamster = Ember.Object.extend({
            needsMoreBananas: Ember.computed.lt('numBananas', 3)
          });

          var hamster = Hamster.create();

          hamster.get('needsMoreBananas'); // true
          hamster.set('numBananas', 3);
          hamster.get('needsMoreBananas'); // false
          hamster.set('numBananas', 2);
          hamster.get('needsMoreBananas'); // true
          ```

          @method computed.lt
          @for Ember
          @param {String} dependentKey
          @param {Number} value
          @return {Ember.ComputedProperty} computed property which returns true if
          the original value for property is less then given value.
        */
        registerComputed('lt', function(dependentKey, value) {
          return ember$metal$property_get$$get(this, dependentKey) < value;
        });

        /**
          A computed property that returns true if the provided dependent property
          is less than or equal to the provided value.

          Example

          ```javascript
          var Hamster = Ember.Object.extend({
            needsMoreBananas: Ember.computed.lte('numBananas', 3)
          });

          var hamster = Hamster.create();

          hamster.get('needsMoreBananas'); // true
          hamster.set('numBananas', 5);
          hamster.get('needsMoreBananas'); // false
          hamster.set('numBananas', 3);
          hamster.get('needsMoreBananas'); // true
          ```

          @method computed.lte
          @for Ember
          @param {String} dependentKey
          @param {Number} value
          @return {Ember.ComputedProperty} computed property which returns true if
          the original value for property is less or equal then given value.
        */
        registerComputed('lte', function(dependentKey, value) {
          return ember$metal$property_get$$get(this, dependentKey) <= value;
        });

        /**
          A computed property that performs a logical `and` on the
          original values for the provided dependent properties.

          Example

          ```javascript
          var Hamster = Ember.Object.extend({
            readyForCamp: Ember.computed.and('hasTent', 'hasBackpack')
          });

          var hamster = Hamster.create();

          hamster.get('readyForCamp'); // false
          hamster.set('hasTent', true);
          hamster.get('readyForCamp'); // false
          hamster.set('hasBackpack', true);
          hamster.get('readyForCamp'); // true
          ```

          @method computed.and
          @for Ember
          @param {String} dependentKey*
          @return {Ember.ComputedProperty} computed property which performs
          a logical `and` on the values of all the original values for properties.
        */
        registerComputedWithProperties('and', function(properties) {
          for (var key in properties) {
            if (properties.hasOwnProperty(key) && !properties[key]) {
              return false;
            }
          }
          return true;
        });

        /**
          A computed property which performs a logical `or` on the
          original values for the provided dependent properties.

          Example

          ```javascript
          var Hamster = Ember.Object.extend({
            readyForRain: Ember.computed.or('hasJacket', 'hasUmbrella')
          });

          var hamster = Hamster.create();

          hamster.get('readyForRain'); // false
          hamster.set('hasJacket', true);
          hamster.get('readyForRain'); // true
          ```

          @method computed.or
          @for Ember
          @param {String} dependentKey*
          @return {Ember.ComputedProperty} computed property which performs
          a logical `or` on the values of all the original values for properties.
        */
        registerComputedWithProperties('or', function(properties) {
          for (var key in properties) {
            if (properties.hasOwnProperty(key) && properties[key]) {
              return true;
            }
          }
          return false;
        });

        /**
          A computed property that returns the first truthy value
          from a list of dependent properties.

          Example

          ```javascript
          var Hamster = Ember.Object.extend({
            hasClothes: Ember.computed.any('hat', 'shirt')
          });

          var hamster = Hamster.create();

          hamster.get('hasClothes'); // null
          hamster.set('shirt', 'Hawaiian Shirt');
          hamster.get('hasClothes'); // 'Hawaiian Shirt'
          ```

          @method computed.any
          @for Ember
          @param {String} dependentKey*
          @return {Ember.ComputedProperty} computed property which returns
          the first truthy value of given list of properties.
        */
        registerComputedWithProperties('any', function(properties) {
          for (var key in properties) {
            if (properties.hasOwnProperty(key) && properties[key]) {
              return properties[key];
            }
          }
          return null;
        });

        /**
          A computed property that returns the array of values
          for the provided dependent properties.

          Example

          ```javascript
          var Hamster = Ember.Object.extend({
            clothes: Ember.computed.collect('hat', 'shirt')
          });

          var hamster = Hamster.create();

          hamster.get('clothes'); // [null, null]
          hamster.set('hat', 'Camp Hat');
          hamster.set('shirt', 'Camp Shirt');
          hamster.get('clothes'); // ['Camp Hat', 'Camp Shirt']
          ```

          @method computed.collect
          @for Ember
          @param {String} dependentKey*
          @return {Ember.ComputedProperty} computed property which maps
          values of all passed properties in to an array.
        */
        registerComputedWithProperties('collect', function(properties) {
          var res = [];
          for (var key in properties) {
            if (properties.hasOwnProperty(key)) {
              if (ember$metal$is_none$$isNone(properties[key])) {
                res.push(null);
              } else {
                res.push(properties[key]);
              }
            }
          }
          return res;
        });

        /**
          Creates a new property that is an alias for another property
          on an object. Calls to `get` or `set` this property behave as
          though they were called on the original property.

          ```javascript
          Person = Ember.Object.extend({
            name: 'Alex Matchneer',
            nomen: Ember.computed.alias('name')
          });

          alex = Person.create();

          alex.get('nomen'); // 'Alex Matchneer'
          alex.get('name');  // 'Alex Matchneer'

          alex.set('nomen', '@machty');
          alex.get('name');  // '@machty'
          ```

          @method computed.alias
          @for Ember
          @param {String} dependentKey
          @return {Ember.ComputedProperty} computed property which creates an
          alias to the original value for property.
        */
        ember$metal$computed$$computed.alias = function(dependentKey) {
          return ember$metal$computed$$computed(dependentKey, function(key, value) {
            if (arguments.length > 1) {
              ember$metal$property_set$$set(this, dependentKey, value);
              return ember$metal$property_get$$get(this, dependentKey);
            } else {
              return ember$metal$property_get$$get(this, dependentKey);
            }
          });
        };

        /**
          Where `computed.alias` aliases `get` and `set`, and allows for bidirectional
          data flow, `computed.oneWay` only provides an aliased `get`. The `set` will
          not mutate the upstream property, rather causes the current property to
          become the value set. This causes the downstream property to permanently
          diverge from the upstream property.

          Example

          ```javascript
          var User = Ember.Object.extend({
            firstName: null,
            lastName: null,
            nickName: Ember.computed.oneWay('firstName')
          });

          var teddy = User.create({
            firstName: 'Teddy',
            lastName:  'Zeenny'
          });

          teddy.get('nickName'); // 'Teddy'
          teddy.set('nickName', 'TeddyBear'); // 'TeddyBear'
          teddy.get('firstName'); // 'Teddy'
          ```

          @method computed.oneWay
          @for Ember
          @param {String} dependentKey
          @return {Ember.ComputedProperty} computed property which creates a
          one way computed property to the original value for property.
        */
        ember$metal$computed$$computed.oneWay = function(dependentKey) {
          return ember$metal$computed$$computed(dependentKey, function() {
            return ember$metal$property_get$$get(this, dependentKey);
          });
        };

        if (ember$metal$core$$default.FEATURES.isEnabled('query-params-new')) {
          /**
            This is a more semantically meaningful alias of `computed.oneWay`,
            whose name is somewhat ambiguous as to which direction the data flows.

            @method computed.reads
            @for Ember
            @param {String} dependentKey
            @return {Ember.ComputedProperty} computed property which creates a
              one way computed property to the original value for property.
           */
          ember$metal$computed$$computed.reads = ember$metal$computed$$computed.oneWay;
        }

        /**
          Where `computed.oneWay` provides oneWay bindings, `computed.readOnly` provides
          a readOnly one way binding. Very often when using `computed.oneWay` one does
          not also want changes to propogate back up, as they will replace the value.

          This prevents the reverse flow, and also throws an exception when it occurs.

          Example

          ```javascript
          var User = Ember.Object.extend({
            firstName: null,
            lastName: null,
            nickName: Ember.computed.readOnly('firstName')
          });

          var teddy = User.create({
            firstName: 'Teddy',
            lastName:  'Zeenny'
          });

          teddy.get('nickName'); // 'Teddy'
          teddy.set('nickName', 'TeddyBear'); // throws Exception
          // throw new Ember.Error('Cannot Set: nickName on: <User:ember27288>' );`
          teddy.get('firstName'); // 'Teddy'
          ```

          @method computed.readOnly
          @for Ember
          @param {String} dependentKey
          @return {Ember.ComputedProperty} computed property which creates a
          one way computed property to the original value for property.
          @since 1.5.0
        */
        ember$metal$computed$$computed.readOnly = function(dependentKey) {
          return ember$metal$computed$$computed(dependentKey, function() {
            return ember$metal$property_get$$get(this, dependentKey);
          }).readOnly();
        };

        /**
          A computed property that acts like a standard getter and setter,
          but returns the value at the provided `defaultPath` if the
          property itself has not been set to a value

          Example

          ```javascript
          var Hamster = Ember.Object.extend({
            wishList: Ember.computed.defaultTo('favoriteFood')
          });

          var hamster = Hamster.create({favoriteFood: 'Banana'});

          hamster.get('wishList'); // 'Banana'
          hamster.set('wishList', 'More Unit Tests');
          hamster.get('wishList'); // 'More Unit Tests'
          hamster.get('favoriteFood'); // 'Banana'
          ```

          @method computed.defaultTo
          @for Ember
          @param {String} defaultPath
          @return {Ember.ComputedProperty} computed property which acts like
          a standard getter and setter, but defaults to the value from `defaultPath`.
        */
        // ES6TODO: computed should have its own export path so you can do import {defaultTo} from computed
        ember$metal$computed$$computed.defaultTo = function(defaultPath) {
          return ember$metal$computed$$computed(function(key, newValue, cachedValue) {
            if (arguments.length === 1) {
              return ember$metal$property_get$$get(this, defaultPath);
            }
            return newValue != null ? newValue : ember$metal$property_get$$get(this, defaultPath);
          });
        };

        /**
          Creates a new property that is an alias for another property
          on an object. Calls to `get` or `set` this property behave as
          though they were called on the original property, but also
          print a deprecation warning.

          @method computed.deprecatingAlias
          @for Ember
          @param {String} dependentKey
          @return {Ember.ComputedProperty} computed property which creates an
          alias with a deprecation to the original value for property.
        */
        ember$metal$computed$$computed.deprecatingAlias = function(dependentKey) {
          return ember$metal$computed$$computed(dependentKey, function(key, value) {
            ember$metal$core$$default.deprecate('Usage of `' + key + '` is deprecated, use `' + dependentKey + '` instead.');

            if (arguments.length > 1) {
              ember$metal$property_set$$set(this, dependentKey, value);
              return value;
            } else {
              return ember$metal$property_get$$get(this, dependentKey);
            }
          });
        };
    }).call(this);

    (function() {
        function copy(obj) {
          var output = {};

          for (var prop in obj) {
            if (obj.hasOwnProperty(prop)) { output[prop] = obj[prop]; }
          }

          return output;
        }

        function copyMap(original, newObject) {
          var keys = original.keys.copy(),
              values = copy(original.values);

          newObject.keys = keys;
          newObject.values = values;
          newObject.length = original.length;

          return newObject;
        }

        /**
          This class is used internally by Ember and Ember Data.
          Please do not use it at this time. We plan to clean it up
          and add many tests soon.

          @class OrderedSet
          @namespace Ember
          @constructor
          @private
        */
        function OrderedSet() {
          this.clear();
        }

        ember$metal$map$$OrderedSet = OrderedSet;

        /**
          @method create
          @static
          @return {Ember.OrderedSet}
        */
        ember$metal$map$$OrderedSet.create = function() {
          return new ember$metal$map$$OrderedSet();
        };

        ember$metal$map$$OrderedSet.prototype = {
          /**
            @method clear
          */
          clear: function() {
            this.presenceSet = {};
            this.list = [];
          },

          /**
            @method add
            @param obj
          */
          add: function(obj) {
            var guid = ember$metal$utils$$guidFor(obj),
                presenceSet = this.presenceSet,
                list = this.list;

            if (guid in presenceSet) { return; }

            presenceSet[guid] = true;
            list.push(obj);
          },

          /**
            @method remove
            @param obj
          */
          remove: function(obj) {
            var guid = ember$metal$utils$$guidFor(obj),
                presenceSet = this.presenceSet,
                list = this.list;

            delete presenceSet[guid];

            var index = ember$metal$array$$indexOf.call(list, obj);
            if (index > -1) {
              list.splice(index, 1);
            }
          },

          /**
            @method isEmpty
            @return {Boolean}
          */
          isEmpty: function() {
            return this.list.length === 0;
          },

          /**
            @method has
            @param obj
            @return {Boolean}
          */
          has: function(obj) {
            var guid = ember$metal$utils$$guidFor(obj),
                presenceSet = this.presenceSet;

            return guid in presenceSet;
          },

          /**
            @method forEach
            @param {Function} fn
            @param self
          */
          forEach: function(fn, self) {
            // allow mutation during iteration
            var list = this.toArray();

            for (var i = 0, j = list.length; i < j; i++) {
              fn.call(self, list[i]);
            }
          },

          /**
            @method toArray
            @return {Array}
          */
          toArray: function() {
            return this.list.slice();
          },

          /**
            @method copy
            @return {Ember.OrderedSet}
          */
          copy: function() {
            var set = new ember$metal$map$$OrderedSet();

            set.presenceSet = copy(this.presenceSet);
            set.list = this.toArray();

            return set;
          }
        };

        /**
          A Map stores values indexed by keys. Unlike JavaScript's
          default Objects, the keys of a Map can be any JavaScript
          object.

          Internally, a Map has two data structures:

          1. `keys`: an OrderedSet of all of the existing keys
          2. `values`: a JavaScript Object indexed by the `Ember.guidFor(key)`

          When a key/value pair is added for the first time, we
          add the key to the `keys` OrderedSet, and create or
          replace an entry in `values`. When an entry is deleted,
          we delete its entry in `keys` and `values`.

          @class Map
          @namespace Ember
          @private
          @constructor
        */
        function Map() {
          this.keys = ember$metal$map$$OrderedSet.create();
          this.values = {};
        }

        ember$metal$map$$Map = Map;
        Ember.Map = ember$metal$map$$Map;

        /**
          @method create
          @static
        */
        ember$metal$map$$Map.create = function() {
          return new ember$metal$map$$Map();
        };

        ember$metal$map$$Map.prototype = {
          /**
            This property will change as the number of objects in the map changes.

            @property length
            @type number
            @default 0
          */
          length: 0,

          /**
            Retrieve the value associated with a given key.

            @method get
            @param {*} key
            @return {*} the value associated with the key, or `undefined`
          */
          get: function(key) {
            var values = this.values,
                guid = ember$metal$utils$$guidFor(key);

            return values[guid];
          },

          /**
            Adds a value to the map. If a value for the given key has already been
            provided, the new value will replace the old value.

            @method set
            @param {*} key
            @param {*} value
          */
          set: function(key, value) {
            var keys = this.keys,
                values = this.values,
                guid = ember$metal$utils$$guidFor(key);

            keys.add(key);
            values[guid] = value;
            ember$metal$property_set$$set(this, 'length', keys.list.length);
          },

          /**
            Removes a value from the map for an associated key.

            @method remove
            @param {*} key
            @return {Boolean} true if an item was removed, false otherwise
          */
          remove: function(key) {
            // don't use ES6 "delete" because it will be annoying
            // to use in browsers that are not ES6 friendly;
            var keys = this.keys,
                values = this.values,
                guid = ember$metal$utils$$guidFor(key);

            if (values.hasOwnProperty(guid)) {
              keys.remove(key);
              delete values[guid];
              ember$metal$property_set$$set(this, 'length', keys.list.length);
              return true;
            } else {
              return false;
            }
          },

          /**
            Check whether a key is present.

            @method has
            @param {*} key
            @return {Boolean} true if the item was present, false otherwise
          */
          has: function(key) {
            var values = this.values,
                guid = ember$metal$utils$$guidFor(key);

            return values.hasOwnProperty(guid);
          },

          /**
            Iterate over all the keys and values. Calls the function once
            for each key, passing in the key and value, in that order.

            The keys are guaranteed to be iterated over in insertion order.

            @method forEach
            @param {Function} callback
            @param {*} self if passed, the `this` value inside the
              callback. By default, `this` is the map.
          */
          forEach: function(callback, self) {
            var keys = this.keys,
                values = this.values;

            keys.forEach(function(key) {
              var guid = ember$metal$utils$$guidFor(key);
              callback.call(self, key, values[guid]);
            });
          },

          /**
            @method copy
            @return {Ember.Map}
          */
          copy: function() {
            return copyMap(this, new ember$metal$map$$Map());
          }
        };

        /**
          @class MapWithDefault
          @namespace Ember
          @extends Ember.Map
          @private
          @constructor
          @param [options]
            @param {*} [options.defaultValue]
        */
        function MapWithDefault(options) {
          ember$metal$map$$Map.call(this);
          this.defaultValue = options.defaultValue;
        }

        ember$metal$map$$MapWithDefault = MapWithDefault;

        /**
          @method create
          @static
          @param [options]
            @param {*} [options.defaultValue]
          @return {Ember.MapWithDefault|Ember.Map} If options are passed, returns
            `Ember.MapWithDefault` otherwise returns `Ember.Map`
        */
        ember$metal$map$$MapWithDefault.create = function(options) {
          if (options) {
            return new ember$metal$map$$MapWithDefault(options);
          } else {
            return new ember$metal$map$$Map();
          }
        };

        ember$metal$map$$MapWithDefault.prototype = ember$metal$platform$$create(ember$metal$map$$Map.prototype);

        /**
          Retrieve the value associated with a given key.

          @method get
          @param {*} key
          @return {*} the value associated with the key, or the default value
        */
        ember$metal$map$$MapWithDefault.prototype.get = function(key) {
          var hasValue = this.has(key);

          if (hasValue) {
            return ember$metal$map$$Map.prototype.get.call(this, key);
          } else {
            var defaultValue = this.defaultValue(key);
            this.set(key, defaultValue);
            return defaultValue;
          }
        };

        /**
          @method copy
          @return {Ember.MapWithDefault}
        */
        ember$metal$map$$MapWithDefault.prototype.copy = function() {
          return copyMap(this, new ember$metal$map$$MapWithDefault({
            defaultValue: this.defaultValue
          }));
        };
    }).call(this);

    (function() {
        /**
        @module ember-metal
        */

        var AFTER_OBSERVERS = ':change';

        var BEFORE_OBSERVERS = ':before';

        function changeEvent(keyName) {
          return keyName + AFTER_OBSERVERS;
        }

        function beforeEvent(keyName) {
          return keyName + BEFORE_OBSERVERS;
        }

        function addObserver(obj, _path, target, method) {
          ember$metal$events$$addListener(obj, changeEvent(_path), target, method);
          ember$metal$watching$$watch(obj, _path);

          return this;
        }

        ember$metal$observer$$addObserver = addObserver;

        function observersFor(obj, path) {
          return ember$metal$events$$listenersFor(obj, changeEvent(path));
        }

        ember$metal$observer$$observersFor = observersFor;

        function removeObserver(obj, _path, target, method) {
          ember$metal$watching$$unwatch(obj, _path);
          ember$metal$events$$removeListener(obj, changeEvent(_path), target, method);

          return this;
        }

        ember$metal$observer$$removeObserver = removeObserver;

        function addBeforeObserver(obj, _path, target, method) {
          ember$metal$events$$addListener(obj, beforeEvent(_path), target, method);
          ember$metal$watching$$watch(obj, _path);

          return this;
        }

        ember$metal$observer$$addBeforeObserver = addBeforeObserver;

        function _suspendBeforeObserver(obj, path, target, method, callback) {
          return ember$metal$events$$suspendListener(obj, beforeEvent(path), target, method, callback);
        }

        ember$metal$observer$$_suspendBeforeObserver = _suspendBeforeObserver;

        function _suspendObserver(obj, path, target, method, callback) {
          return ember$metal$events$$suspendListener(obj, changeEvent(path), target, method, callback);
        }

        ember$metal$observer$$_suspendObserver = _suspendObserver;

        function _suspendBeforeObservers(obj, paths, target, method, callback) {
          var events = ember$metal$array$$map.call(paths, beforeEvent);
          return ember$metal$events$$suspendListeners(obj, events, target, method, callback);
        }

        ember$metal$observer$$_suspendBeforeObservers = _suspendBeforeObservers;

        function _suspendObservers(obj, paths, target, method, callback) {
          var events = ember$metal$array$$map.call(paths, changeEvent);
          return ember$metal$events$$suspendListeners(obj, events, target, method, callback);
        }

        ember$metal$observer$$_suspendObservers = _suspendObservers;

        function beforeObserversFor(obj, path) {
          return ember$metal$events$$listenersFor(obj, beforeEvent(path));
        }

        ember$metal$observer$$beforeObserversFor = beforeObserversFor;

        function removeBeforeObserver(obj, _path, target, method) {
          ember$metal$watching$$unwatch(obj, _path);
          ember$metal$events$$removeListener(obj, beforeEvent(_path), target, method);

          return this;
        }

        ember$metal$observer$$removeBeforeObserver = removeBeforeObserver;
    }).call(this);

    (function() {
        backburner$utils$$default = {
          each: function(collection, callback) {
            for (var i = 0; i < collection.length; i++) {
              callback(collection[i]);
            }
          },

          isString: function(suspect) {
            return typeof suspect === 'string';
          },

          isFunction: function(suspect) {
            return typeof suspect === 'function';
          },

          isNumber: function(suspect) {
            return typeof suspect === 'number';
          }
        };
    }).call(this);

    (function() {
        function Queue(daq, name, options) {
          this.daq = daq;
          this.name = name;
          this.globalOptions = options;
          this.options = options[name];
          this._queue = [];
        }

        backburner$queue$$Queue = Queue;

        backburner$queue$$Queue.prototype = {
          daq: null,
          name: null,
          options: null,
          onError: null,
          _queue: null,

          push: function(target, method, args, stack) {
            var queue = this._queue;
            queue.push(target, method, args, stack);
            return {queue: this, target: target, method: method};
          },

          pushUnique: function(target, method, args, stack) {
            var queue = this._queue, currentTarget, currentMethod, i, l;

            for (i = 0, l = queue.length; i < l; i += 4) {
              currentTarget = queue[i];
              currentMethod = queue[i+1];

              if (currentTarget === target && currentMethod === method) {
                queue[i+2] = args; // replace args
                queue[i+3] = stack; // replace stack
                return {queue: this, target: target, method: method};
              }
            }

            queue.push(target, method, args, stack);
            return {queue: this, target: target, method: method};
          },

          // TODO: remove me, only being used for Ember.run.sync
          flush: function() {
            var queue = this._queue,
                globalOptions = this.globalOptions,
                options = this.options,
                before = options && options.before,
                after = options && options.after,
                onError = globalOptions.onError || (globalOptions.onErrorTarget && globalOptions.onErrorTarget[globalOptions.onErrorMethod]),
                target, method, args, stack, i, l = queue.length;

            if (l && before) { before(); }
            for (i = 0; i < l; i += 4) {
              target = queue[i];
              method = queue[i+1];
              args   = queue[i+2];
              stack  = queue[i+3]; // Debugging assistance

              // TODO: error handling
              if (args && args.length > 0) {
                if (onError) {
                  try {
                    method.apply(target, args);
                  } catch (e) {
                    onError(e);
                  }
                } else {
                  method.apply(target, args);
                }
              } else {
                if (onError) {
                  try {
                    method.call(target);
                  } catch(e) {
                    onError(e);
                  }
                } else {
                  method.call(target);
                }
              }
            }
            if (l && after) { after(); }

            // check if new items have been added
            if (queue.length > l) {
              this._queue = queue.slice(l);
              this.flush();
            } else {
              this._queue.length = 0;
            }
          },

          cancel: function(actionToCancel) {
            var queue = this._queue, currentTarget, currentMethod, i, l;

            for (i = 0, l = queue.length; i < l; i += 4) {
              currentTarget = queue[i];
              currentMethod = queue[i+1];

              if (currentTarget === actionToCancel.target && currentMethod === actionToCancel.method) {
                queue.splice(i, 4);
                return true;
              }
            }

            // if not found in current queue
            // could be in the queue that is being flushed
            queue = this._queueBeingFlushed;
            if (!queue) {
              return;
            }
            for (i = 0, l = queue.length; i < l; i += 4) {
              currentTarget = queue[i];
              currentMethod = queue[i+1];

              if (currentTarget === actionToCancel.target && currentMethod === actionToCancel.method) {
                // don't mess with array during flush
                // just nullify the method
                queue[i+1] = null;
                return true;
              }
            }
          }
        };
    }).call(this);

    (function() {
        var each = backburner$utils$$default.each,
            isString = backburner$utils$$default.isString;

        function DeferredActionQueues(queueNames, options) {
          var queues = this.queues = {};
          this.queueNames = queueNames = queueNames || [];

          this.options = options;

          each(queueNames, function(queueName) {
            queues[queueName] = new backburner$queue$$Queue(this, queueName, options);
          });
        }

        backburner$deferred_action_queues$$DeferredActionQueues = DeferredActionQueues;

        backburner$deferred_action_queues$$DeferredActionQueues.prototype = {
          queueNames: null,
          queues: null,
          options: null,

          schedule: function(queueName, target, method, args, onceFlag, stack) {
            var queues = this.queues,
                queue = queues[queueName];

            if (!queue) { throw new Error("You attempted to schedule an action in a queue (" + queueName + ") that doesn't exist"); }

            if (onceFlag) {
              return queue.pushUnique(target, method, args, stack);
            } else {
              return queue.push(target, method, args, stack);
            }
          },

          invoke: function(target, method, args, _) {
            if (args && args.length > 0) {
              method.apply(target, args);
            } else {
              method.call(target);
            }
          },

          invokeWithOnError: function(target, method, args, onError) {
            try {
              if (args && args.length > 0) {
                method.apply(target, args);
              } else {
                method.call(target);
              }
            } catch(error) {
              onError(error);
            }
          },

          flush: function() {
            var queues = this.queues,
                queueNames = this.queueNames,
                queueName, queue, queueItems, priorQueueNameIndex,
                queueNameIndex = 0, numberOfQueues = queueNames.length,
                options = this.options,
                onError = options.onError || (options.onErrorTarget && options.onErrorTarget[options.onErrorMethod]),
                invoke = onError ? this.invokeWithOnError : this.invoke;

            outerloop:
            while (queueNameIndex < numberOfQueues) {
              queueName = queueNames[queueNameIndex];
              queue = queues[queueName];
              queueItems = queue._queueBeingFlushed = queue._queue.slice();
              queue._queue = [];

              var queueOptions = queue.options, // TODO: write a test for this
                  before = queueOptions && queueOptions.before,
                  after = queueOptions && queueOptions.after,
                  target, method, args, stack,
                  queueIndex = 0, numberOfQueueItems = queueItems.length;

              if (numberOfQueueItems && before) { before(); }

              while (queueIndex < numberOfQueueItems) {
                target = queueItems[queueIndex];
                method = queueItems[queueIndex+1];
                args   = queueItems[queueIndex+2];
                stack  = queueItems[queueIndex+3]; // Debugging assistance

                if (isString(method)) { method = target[method]; }

                // method could have been nullified / canceled during flush
                if (method) {
                  invoke(target, method, args, onError);
                }

                queueIndex += 4;
              }

              queue._queueBeingFlushed = null;
              if (numberOfQueueItems && after) { after(); }

              if ((priorQueueNameIndex = indexOfPriorQueueWithActions(this, queueNameIndex)) !== -1) {
                queueNameIndex = priorQueueNameIndex;
                continue outerloop;
              }

              queueNameIndex++;
            }
          }
        };

        function indexOfPriorQueueWithActions(daq, currentQueueIndex) {
          var queueName, queue;

          for (var i = 0, l = currentQueueIndex; i <= l; i++) {
            queueName = daq.queueNames[i];
            queue = daq.queues[queueName];
            if (queue._queue.length) { return i; }
          }

          return -1;
        }
    }).call(this);

    (function() {
        var slice = [].slice,
            pop = [].pop,
            each = backburner$utils$$default.each,
            isString = backburner$utils$$default.isString,
            isFunction = backburner$utils$$default.isFunction,
            isNumber = backburner$utils$$default.isNumber,
            timers = [],
            global = this,
            NUMBER = /\d+/;

        // In IE 6-8, try/finally doesn't work without a catch.
        // Unfortunately, this is impossible to test for since wrapping it in a parent try/catch doesn't trigger the bug.
        // This tests for another broken try/catch behavior that only exhibits in the same versions of IE.
        var needsIETryCatchFix = (function(e,x){
          try{ x(); }
          catch(e) { } // jshint ignore:line
          return !!e;
        })();

        function isCoercableNumber(number) {
          return isNumber(number) || NUMBER.test(number);
        }

        function Backburner(queueNames, options) {
          this.queueNames = queueNames;
          this.options = options || {};
          if (!this.options.defaultQueue) {
            this.options.defaultQueue = queueNames[0];
          }
          this.instanceStack = [];
          this._debouncees = [];
          this._throttlers = [];
        }

        backburner$$Backburner = Backburner;

        backburner$$Backburner.prototype = {
          queueNames: null,
          options: null,
          currentInstance: null,
          instanceStack: null,

          begin: function() {
            var options = this.options,
                onBegin = options && options.onBegin,
                previousInstance = this.currentInstance;

            if (previousInstance) {
              this.instanceStack.push(previousInstance);
            }

            this.currentInstance = new backburner$deferred_action_queues$$DeferredActionQueues(this.queueNames, options);
            if (onBegin) {
              onBegin(this.currentInstance, previousInstance);
            }
          },

          end: function() {
            var options = this.options,
                onEnd = options && options.onEnd,
                currentInstance = this.currentInstance,
                nextInstance = null;

            // Prevent double-finally bug in Safari 6.0.2 and iOS 6
            // This bug appears to be resolved in Safari 6.0.5 and iOS 7
            var finallyAlreadyCalled = false;
            try {
              currentInstance.flush();
            } finally {
              if (!finallyAlreadyCalled) {
                finallyAlreadyCalled = true;

                this.currentInstance = null;

                if (this.instanceStack.length) {
                  nextInstance = this.instanceStack.pop();
                  this.currentInstance = nextInstance;
                }

                if (onEnd) {
                  onEnd(currentInstance, nextInstance);
                }
              }
            }
          },

          run: function(target, method /*, args */) {
            var onError = getOnError(this.options);

            this.begin();

            if (!method) {
              method = target;
              target = null;
            }

            if (isString(method)) {
              method = target[method];
            }

            var args = slice.call(arguments, 2);

            // guard against Safari 6's double-finally bug
            var didFinally = false;

            if (onError) {
              try {
                return method.apply(target, args);
              } catch(error) {
                onError(error);
              } finally {
                if (!didFinally) {
                  didFinally = true;
                  this.end();
                }
              }
            } else {
              try {
                return method.apply(target, args);
              } finally {
                if (!didFinally) {
                  didFinally = true;
                  this.end();
                }
              }
            }
          },

          defer: function(queueName, target, method /* , args */) {
            if (!method) {
              method = target;
              target = null;
            }

            if (isString(method)) {
              method = target[method];
            }

            var stack = this.DEBUG ? new Error() : undefined,
                args = arguments.length > 3 ? slice.call(arguments, 3) : undefined;
            if (!this.currentInstance) { createAutorun(this); }
            return this.currentInstance.schedule(queueName, target, method, args, false, stack);
          },

          deferOnce: function(queueName, target, method /* , args */) {
            if (!method) {
              method = target;
              target = null;
            }

            if (isString(method)) {
              method = target[method];
            }

            var stack = this.DEBUG ? new Error() : undefined,
                args = arguments.length > 3 ? slice.call(arguments, 3) : undefined;
            if (!this.currentInstance) { createAutorun(this); }
            return this.currentInstance.schedule(queueName, target, method, args, true, stack);
          },

          setTimeout: function() {
            var args = slice.call(arguments),
                length = args.length,
                method, wait, target,
                methodOrTarget, methodOrWait, methodOrArgs;

            if (length === 0) {
              return;
            } else if (length === 1) {
              method = args.shift();
              wait = 0;
            } else if (length === 2) {
              methodOrTarget = args[0];
              methodOrWait = args[1];

              if (isFunction(methodOrWait) || isFunction(methodOrTarget[methodOrWait])) {
                target = args.shift();
                method = args.shift();
                wait = 0;
              } else if (isCoercableNumber(methodOrWait)) {
                method = args.shift();
                wait = args.shift();
              } else {
                method = args.shift();
                wait =  0;
              }
            } else {
              var last = args[args.length - 1];

              if (isCoercableNumber(last)) {
                wait = args.pop();
              } else {
                wait = 0;
              }

              methodOrTarget = args[0];
              methodOrArgs = args[1];

              if (isFunction(methodOrArgs) || (isString(methodOrArgs) &&
                                              methodOrTarget !== null &&
                                              methodOrArgs in methodOrTarget)) {
                target = args.shift();
                method = args.shift();
              } else {
                method = args.shift();
              }
            }

            var executeAt = (+new Date()) + parseInt(wait, 10);

            if (isString(method)) {
              method = target[method];
            }

            var onError = getOnError(this.options);

            function fn() {
              if (onError) {
                try {
                  method.apply(target, args);
                } catch (e) {
                  onError(e);
                }
              } else {
                method.apply(target, args);
              }
            }

            // find position to insert
            var i = searchTimer(executeAt, timers);

            timers.splice(i, 0, executeAt, fn);

            updateLaterTimer(this, executeAt, wait);

            return fn;
          },

          throttle: function(target, method /* , args, wait, [immediate] */) {
            var self = this,
                args = arguments,
                immediate = pop.call(args),
                wait,
                throttler,
                index,
                timer;

            if (isNumber(immediate) || isString(immediate)) {
              wait = immediate;
              immediate = true;
            } else {
              wait = pop.call(args);
            }

            wait = parseInt(wait, 10);

            index = findThrottler(target, method, this._throttlers);
            if (index > -1) { return this._throttlers[index]; } // throttled

            timer = global.setTimeout(function() {
              if (!immediate) {
                self.run.apply(self, args);
              }
              var index = findThrottler(target, method, self._throttlers);
              if (index > -1) {
                self._throttlers.splice(index, 1);
              }
            }, wait);

            if (immediate) {
              self.run.apply(self, args);
            }

            throttler = [target, method, timer];

            this._throttlers.push(throttler);

            return throttler;
          },

          debounce: function(target, method /* , args, wait, [immediate] */) {
            var self = this,
                args = arguments,
                immediate = pop.call(args),
                wait,
                index,
                debouncee,
                timer;

            if (isNumber(immediate) || isString(immediate)) {
              wait = immediate;
              immediate = false;
            } else {
              wait = pop.call(args);
            }

            wait = parseInt(wait, 10);
            // Remove debouncee
            index = findDebouncee(target, method, this._debouncees);

            if (index > -1) {
              debouncee = this._debouncees[index];
              this._debouncees.splice(index, 1);
              clearTimeout(debouncee[2]);
            }

            timer = global.setTimeout(function() {
              if (!immediate) {
                self.run.apply(self, args);
              }
              var index = findDebouncee(target, method, self._debouncees);
              if (index > -1) {
                self._debouncees.splice(index, 1);
              }
            }, wait);

            if (immediate && index === -1) {
              self.run.apply(self, args);
            }

            debouncee = [target, method, timer];

            self._debouncees.push(debouncee);

            return debouncee;
          },

          cancelTimers: function() {
            var clearItems = function(item) {
              clearTimeout(item[2]);
            };

            each(this._throttlers, clearItems);
            this._throttlers = [];

            each(this._debouncees, clearItems);
            this._debouncees = [];

            if (this._laterTimer) {
              clearTimeout(this._laterTimer);
              this._laterTimer = null;
            }
            timers = [];

            if (this._autorun) {
              clearTimeout(this._autorun);
              this._autorun = null;
            }
          },

          hasTimers: function() {
            return !!timers.length || !!this._debouncees.length || !!this._throttlers.length || this._autorun;
          },

          cancel: function(timer) {
            var timerType = typeof timer;

            if (timer && timerType === 'object' && timer.queue && timer.method) { // we're cancelling a deferOnce
              return timer.queue.cancel(timer);
            } else if (timerType === 'function') { // we're cancelling a setTimeout
              for (var i = 0, l = timers.length; i < l; i += 2) {
                if (timers[i + 1] === timer) {
                  timers.splice(i, 2); // remove the two elements
                  return true;
                }
              }
            } else if (Object.prototype.toString.call(timer) === "[object Array]"){ // we're cancelling a throttle or debounce
              return this._cancelItem(findThrottler, this._throttlers, timer) ||
                       this._cancelItem(findDebouncee, this._debouncees, timer);
            } else {
              return; // timer was null or not a timer
            }
          },

          _cancelItem: function(findMethod, array, timer){
            var item,
                index;

            if (timer.length < 3) { return false; }

            index = findMethod(timer[0], timer[1], array);

            if(index > -1) {

              item = array[index];

              if(item[2] === timer[2]){
                array.splice(index, 1);
                clearTimeout(timer[2]);
                return true;
              }
            }

            return false;
          }
        };

        backburner$$Backburner.prototype.schedule = backburner$$Backburner.prototype.defer;
        backburner$$Backburner.prototype.scheduleOnce = backburner$$Backburner.prototype.deferOnce;
        backburner$$Backburner.prototype.later = backburner$$Backburner.prototype.setTimeout;

        if (needsIETryCatchFix) {
          var originalRun = backburner$$Backburner.prototype.run;
          backburner$$Backburner.prototype.run = wrapInTryCatch(originalRun);

          var originalEnd = backburner$$Backburner.prototype.end;
          backburner$$Backburner.prototype.end = wrapInTryCatch(originalEnd);
        }

        function wrapInTryCatch(func) {
          return function () {
            try {
              return func.apply(this, arguments);
            } catch (e) {
              throw e;
            }
          };
        }

        function getOnError(options) {
          return options.onError || (options.onErrorTarget && options.onErrorTarget[options.onErrorMethod]);
        }

        function createAutorun(backburner) {
          backburner.begin();
          backburner._autorun = global.setTimeout(function() {
            backburner._autorun = null;
            backburner.end();
          });
        }

        function updateLaterTimer(self, executeAt, wait) {
          if (!self._laterTimer || executeAt < self._laterTimerExpiresAt) {
            self._laterTimer = global.setTimeout(function() {
              self._laterTimer = null;
              self._laterTimerExpiresAt = null;
              executeTimers(self);
            }, wait);
            self._laterTimerExpiresAt = executeAt;
          }
        }

        function executeTimers(self) {
          var now = +new Date(),
              time, fns, i, l;

          self.run(function() {
            i = searchTimer(now, timers);

            fns = timers.splice(0, i);

            for (i = 1, l = fns.length; i < l; i += 2) {
              self.schedule(self.options.defaultQueue, null, fns[i]);
            }
          });

          if (timers.length) {
            updateLaterTimer(self, timers[0], timers[0] - now);
          }
        }

        function findDebouncee(target, method, debouncees) {
          return findItem(target, method, debouncees);
        }

        function findThrottler(target, method, throttlers) {
          return findItem(target, method, throttlers);
        }

        function findItem(target, method, collection) {
          var item,
              index = -1;

          for (var i = 0, l = collection.length; i < l; i++) {
            item = collection[i];
            if (item[0] === target && item[1] === method) {
              index = i;
              break;
            }
          }

          return index;
        }

        function searchTimer(time, timers) {
          var start = 0,
              end = timers.length - 2,
              middle, l;

          while (start < end) {
            // since timers is an array of pairs 'l' will always
            // be an integer
            l = (end - start) / 2;

            // compensate for the index in case even number
            // of pairs inside timers
            middle = start + l - (l % 2);

            if (time >= timers[middle]) {
              start = middle + 2;
            } else {
              end = middle;
            }
          }

          return (time >= timers[start]) ? start + 2 : start;
        }
    }).call(this);

    (function() {
        function onBegin(current) {
          run.currentRunLoop = current;
        }

        function onEnd(current, next) {
          run.currentRunLoop = next;
        }

        var backburner = new backburner$$Backburner(['sync', 'actions', 'destroy'], {
          sync: {
            before: ember$metal$property_events$$beginPropertyChanges,
            after: ember$metal$property_events$$endPropertyChanges
          },
          defaultQueue: 'actions',
          onBegin: onBegin,
          onEnd: onEnd,
          onErrorTarget: ember$metal$core$$default,
          onErrorMethod: 'onerror'
        });

        var slice = [].slice;
        var concat = [].concat;
        ember$metal$run_loop$$default = run;

        function run() {
          return ember$metal$utils$$apply(backburner, backburner.run, arguments);
        }

        /**
          If no run-loop is present, it creates a new one. If a run loop is
          present it will queue itself to run on the existing run-loops action
          queue.

          Please note: This is not for normal usage, and should be used sparingly.

          If invoked when not within a run loop:

          ```javascript
          run.join(function() {
            // creates a new run-loop
          });
          ```

          Alternatively, if called within an existing run loop:

          ```javascript
          run(function() {
            // creates a new run-loop
            run.join(function() {
              // joins with the existing run-loop, and queues for invocation on
              // the existing run-loops action queue.
            });
          });
          ```

          @method join
          @namespace Ember
          @param {Object} [target] target of method to call
          @param {Function|String} method Method to invoke.
            May be a function or a string. If you pass a string
            then it will be looked up on the passed target.
          @param {Object} [args*] Any additional arguments you wish to pass to the method.
          @return {Object} Return value from invoking the passed function. Please note,
          when called within an existing loop, no return value is possible.
        */
        run.join = function(target, method /* args */) {
          if (!run.currentRunLoop) {
            return ember$metal$utils$$apply(ember$metal$core$$default, run, arguments);
          }

          var args = slice.call(arguments);
          args.unshift('actions');
          ember$metal$utils$$apply(run, run.schedule, args);
        };

        /**
          Provides a useful utility for when integrating with non-Ember libraries
          that provide asynchronous callbacks.

          Ember utilizes a run-loop to batch and coalesce changes. This works by
          marking the start and end of Ember-related Javascript execution.

          When using events such as a View's click handler, Ember wraps the event
          handler in a run-loop, but when integrating with non-Ember libraries this
          can be tedious.

          For example, the following is rather verbose but is the correct way to combine
          third-party events and Ember code.

          ```javascript
          var that = this;
          jQuery(window).on('resize', function(){
            run(function(){
              that.handleResize();
            });
          });
          ```

          To reduce the boilerplate, the following can be used to construct a
          run-loop-wrapped callback handler.

          ```javascript
          jQuery(window).on('resize', run.bind(this, this.handleResize));
          ```

          @method bind
          @namespace run
          @param {Object} [target] target of method to call
          @param {Function|String} method Method to invoke.
            May be a function or a string. If you pass a string
            then it will be looked up on the passed target.
          @param {Object} [args*] Any additional arguments you wish to pass to the method.
          @return {Object} return value from invoking the passed function. Please note,
          when called within an existing loop, no return value is possible.
          @since 1.4.0
        */
        run.bind = function(target, method /* args*/) {
          var args = slice.call(arguments);
          return function() {
            return ember$metal$utils$$apply(run, run.join, args.concat(slice.call(arguments)));
          };
        };

        run.backburner = backburner;
        run.currentRunLoop = null;
        run.queues = backburner.queueNames;

        /**
          Begins a new RunLoop. Any deferred actions invoked after the begin will
          be buffered until you invoke a matching call to `run.end()`. This is
          a lower-level way to use a RunLoop instead of using `run()`.

          ```javascript
          run.begin();
          // code to be execute within a RunLoop
          run.end();
          ```

          @method begin
          @return {void}
        */
        run.begin = function() {
          backburner.begin();
        };

        /**
          Ends a RunLoop. This must be called sometime after you call
          `run.begin()` to flush any deferred actions. This is a lower-level way
          to use a RunLoop instead of using `run()`.

          ```javascript
          run.begin();
          // code to be execute within a RunLoop
          run.end();
          ```

          @method end
          @return {void}
        */
        run.end = function() {
          backburner.end();
        };

        /**
          Array of named queues. This array determines the order in which queues
          are flushed at the end of the RunLoop. You can define your own queues by
          simply adding the queue name to this array. Normally you should not need
          to inspect or modify this property.

          @property queues
          @type Array
          @default ['sync', 'actions', 'destroy']
        */

        /**
          Adds the passed target/method and any optional arguments to the named
          queue to be executed at the end of the RunLoop. If you have not already
          started a RunLoop when calling this method one will be started for you
          automatically.

          At the end of a RunLoop, any methods scheduled in this way will be invoked.
          Methods will be invoked in an order matching the named queues defined in
          the `run.queues` property.

          ```javascript
          run.schedule('sync', this, function() {
            // this will be executed in the first RunLoop queue, when bindings are synced
            console.log("scheduled on sync queue");
          });

          run.schedule('actions', this, function() {
            // this will be executed in the 'actions' queue, after bindings have synced.
            console.log("scheduled on actions queue");
          });

          // Note the functions will be run in order based on the run queues order.
          // Output would be:
          //   scheduled on sync queue
          //   scheduled on actions queue
          ```

          @method schedule
          @param {String} queue The name of the queue to schedule against.
            Default queues are 'sync' and 'actions'
          @param {Object} [target] target object to use as the context when invoking a method.
          @param {String|Function} method The method to invoke. If you pass a string it
            will be resolved on the target object at the time the scheduled item is
            invoked allowing you to change the target function.
          @param {Object} [arguments*] Optional arguments to be passed to the queued method.
          @return {void}
        */
        run.schedule = function(queue, target, method) {
          checkAutoRun();
          ember$metal$utils$$apply(backburner, backburner.schedule, arguments);
        };

        // Used by global test teardown
        run.hasScheduledTimers = function() {
          return backburner.hasTimers();
        };

        // Used by global test teardown
        run.cancelTimers = function () {
          backburner.cancelTimers();
        };

        /**
          Immediately flushes any events scheduled in the 'sync' queue. Bindings
          use this queue so this method is a useful way to immediately force all
          bindings in the application to sync.

          You should call this method anytime you need any changed state to propagate
          throughout the app immediately without repainting the UI (which happens
          in the later 'render' queue added by the `ember-views` package).

          ```javascript
          run.sync();
          ```

          @method sync
          @return {void}
        */
        run.sync = function() {
          if (backburner.currentInstance) {
            backburner.currentInstance.queues.sync.flush();
          }
        };

        /**
          Invokes the passed target/method and optional arguments after a specified
          period if time. The last parameter of this method must always be a number
          of milliseconds.

          You should use this method whenever you need to run some action after a
          period of time instead of using `setTimeout()`. This method will ensure that
          items that expire during the same script execution cycle all execute
          together, which is often more efficient than using a real setTimeout.

          ```javascript
          run.later(myContext, function() {
            // code here will execute within a RunLoop in about 500ms with this == myContext
          }, 500);
          ```

          @method later
          @param {Object} [target] target of method to invoke
          @param {Function|String} method The method to invoke.
            If you pass a string it will be resolved on the
            target at the time the method is invoked.
          @param {Object} [args*] Optional arguments to pass to the timeout.
          @param {Number} wait Number of milliseconds to wait.
          @return {String} a string you can use to cancel the timer in
            `run.cancel` later.
        */
        run.later = function(target, method) {
          return ember$metal$utils$$apply(backburner, backburner.later, arguments);
        };

        /**
          Schedule a function to run one time during the current RunLoop. This is equivalent
          to calling `scheduleOnce` with the "actions" queue.

          @method once
          @param {Object} [target] The target of the method to invoke.
          @param {Function|String} method The method to invoke.
            If you pass a string it will be resolved on the
            target at the time the method is invoked.
          @param {Object} [args*] Optional arguments to pass to the timeout.
          @return {Object} Timer information for use in cancelling, see `run.cancel`.
        */
        run.once = function(target, method) {
          checkAutoRun();
          var args = slice.call(arguments);
          args.unshift('actions');
          return ember$metal$utils$$apply(backburner, backburner.scheduleOnce, args);
        };

        /**
          Schedules a function to run one time in a given queue of the current RunLoop.
          Calling this method with the same queue/target/method combination will have
          no effect (past the initial call).

          Note that although you can pass optional arguments these will not be
          considered when looking for duplicates. New arguments will replace previous
          calls.

          ```javascript
          run(function() {
            var sayHi = function() { console.log('hi'); }
            run.scheduleOnce('afterRender', myContext, sayHi);
            run.scheduleOnce('afterRender', myContext, sayHi);
            // sayHi will only be executed once, in the afterRender queue of the RunLoop
          });
          ```

          Also note that passing an anonymous function to `run.scheduleOnce` will
          not prevent additional calls with an identical anonymous function from
          scheduling the items multiple times, e.g.:

          ```javascript
          function scheduleIt() {
            run.scheduleOnce('actions', myContext, function() { console.log("Closure"); });
          }
          scheduleIt();
          scheduleIt();
          // "Closure" will print twice, even though we're using `run.scheduleOnce`,
          // because the function we pass to it is anonymous and won't match the
          // previously scheduled operation.
          ```

          Available queues, and their order, can be found at `run.queues`

          @method scheduleOnce
          @param {String} [queue] The name of the queue to schedule against. Default queues are 'sync' and 'actions'.
          @param {Object} [target] The target of the method to invoke.
          @param {Function|String} method The method to invoke.
            If you pass a string it will be resolved on the
            target at the time the method is invoked.
          @param {Object} [args*] Optional arguments to pass to the timeout.
          @return {Object} Timer information for use in cancelling, see `run.cancel`.
        */
        run.scheduleOnce = function(queue, target, method) {
          checkAutoRun();
          return ember$metal$utils$$apply(backburner, backburner.scheduleOnce, arguments);
        };

        /**
          Schedules an item to run from within a separate run loop, after
          control has been returned to the system. This is equivalent to calling
          `run.later` with a wait time of 1ms.

          ```javascript
          run.next(myContext, function() {
            // code to be executed in the next run loop,
            // which will be scheduled after the current one
          });
          ```

          Multiple operations scheduled with `run.next` will coalesce
          into the same later run loop, along with any other operations
          scheduled by `run.later` that expire right around the same
          time that `run.next` operations will fire.

          Note that there are often alternatives to using `run.next`.
          For instance, if you'd like to schedule an operation to happen
          after all DOM element operations have completed within the current
          run loop, you can make use of the `afterRender` run loop queue (added
          by the `ember-views` package, along with the preceding `render` queue
          where all the DOM element operations happen). Example:

          ```javascript
          App.MyCollectionView = Ember.CollectionView.extend({
            didInsertElement: function() {
              run.scheduleOnce('afterRender', this, 'processChildElements');
            },
            processChildElements: function() {
              // ... do something with collectionView's child view
              // elements after they've finished rendering, which
              // can't be done within the CollectionView's
              // `didInsertElement` hook because that gets run
              // before the child elements have been added to the DOM.
            }
          });
          ```

          One benefit of the above approach compared to using `run.next` is
          that you will be able to perform DOM/CSS operations before unprocessed
          elements are rendered to the screen, which may prevent flickering or
          other artifacts caused by delaying processing until after rendering.

          The other major benefit to the above approach is that `run.next`
          introduces an element of non-determinism, which can make things much
          harder to test, due to its reliance on `setTimeout`; it's much harder
          to guarantee the order of scheduled operations when they are scheduled
          outside of the current run loop, i.e. with `run.next`.

          @method next
          @param {Object} [target] target of method to invoke
          @param {Function|String} method The method to invoke.
            If you pass a string it will be resolved on the
            target at the time the method is invoked.
          @param {Object} [args*] Optional arguments to pass to the timeout.
          @return {Object} Timer information for use in cancelling, see `run.cancel`.
        */
        run.next = function() {
          var args = slice.call(arguments);
          args.push(1);
          return ember$metal$utils$$apply(backburner, backburner.later, args);
        };

        /**
          Cancels a scheduled item. Must be a value returned by `run.later()`,
          `run.once()`, `run.next()`, `run.debounce()`, or
          `run.throttle()`.

          ```javascript
          var runNext = run.next(myContext, function() {
            // will not be executed
          });
          run.cancel(runNext);

          var runLater = run.later(myContext, function() {
            // will not be executed
          }, 500);
          run.cancel(runLater);

          var runOnce = run.once(myContext, function() {
            // will not be executed
          });
          run.cancel(runOnce);

          var throttle = run.throttle(myContext, function() {
            // will not be executed
          }, 1, false);
          run.cancel(throttle);

          var debounce = run.debounce(myContext, function() {
            // will not be executed
          }, 1);
          run.cancel(debounce);

          var debounceImmediate = run.debounce(myContext, function() {
            // will be executed since we passed in true (immediate)
          }, 100, true);
          // the 100ms delay until this method can be called again will be cancelled
          run.cancel(debounceImmediate);
          ```

          @method cancel
          @param {Object} timer Timer object to cancel
          @return {Boolean} true if cancelled or false/undefined if it wasn't found
        */
        run.cancel = function(timer) {
          return backburner.cancel(timer);
        };

        /**
          Delay calling the target method until the debounce period has elapsed
          with no additional debounce calls. If `debounce` is called again before
          the specified time has elapsed, the timer is reset and the entire period
          must pass again before the target method is called.

          This method should be used when an event may be called multiple times
          but the action should only be called once when the event is done firing.
          A common example is for scroll events where you only want updates to
          happen once scrolling has ceased.

          ```javascript
            var myFunc = function() { console.log(this.name + ' ran.'); };
            var myContext = {name: 'debounce'};

            run.debounce(myContext, myFunc, 150);

            // less than 150ms passes

            run.debounce(myContext, myFunc, 150);

            // 150ms passes
            // myFunc is invoked with context myContext
            // console logs 'debounce ran.' one time.
          ```

          Immediate allows you to run the function immediately, but debounce
          other calls for this function until the wait time has elapsed. If
          `debounce` is called again before the specified time has elapsed,
          the timer is reset and the entire period must pass again before
          the method can be called again.

          ```javascript
            var myFunc = function() { console.log(this.name + ' ran.'); };
            var myContext = {name: 'debounce'};

            run.debounce(myContext, myFunc, 150, true);

            // console logs 'debounce ran.' one time immediately.
            // 100ms passes

            run.debounce(myContext, myFunc, 150, true);

            // 150ms passes and nothing else is logged to the console and
            // the debouncee is no longer being watched

            run.debounce(myContext, myFunc, 150, true);

            // console logs 'debounce ran.' one time immediately.
            // 150ms passes and nothing else is logged tot he console and
            // the debouncee is no longer being watched

          ```

          @method debounce
          @param {Object} [target] target of method to invoke
          @param {Function|String} method The method to invoke.
            May be a function or a string. If you pass a string
            then it will be looked up on the passed target.
          @param {Object} [args*] Optional arguments to pass to the timeout.
          @param {Number} wait Number of milliseconds to wait.
          @param {Boolean} immediate Trigger the function on the leading instead
            of the trailing edge of the wait interval. Defaults to false.
          @return {Array} Timer information for use in cancelling, see `run.cancel`.
        */
        run.debounce = function() {
          return ember$metal$utils$$apply(backburner, backburner.debounce, arguments);
        };

        /**
          Ensure that the target method is never called more frequently than
          the specified spacing period. The target method is called immediately.

          ```javascript
            var myFunc = function() { console.log(this.name + ' ran.'); };
            var myContext = {name: 'throttle'};

            run.throttle(myContext, myFunc, 150);
            // myFunc is invoked with context myContext
            // console logs 'throttle ran.'

            // 50ms passes
            run.throttle(myContext, myFunc, 150);

            // 50ms passes
            run.throttle(myContext, myFunc, 150);

            // 150ms passes
            run.throttle(myContext, myFunc, 150);
            // myFunc is invoked with context myContext
            // console logs 'throttle ran.'
          ```

          @method throttle
          @param {Object} [target] target of method to invoke
          @param {Function|String} method The method to invoke.
            May be a function or a string. If you pass a string
            then it will be looked up on the passed target.
          @param {Object} [args*] Optional arguments to pass to the timeout.
          @param {Number} spacing Number of milliseconds to space out requests.
          @param {Boolean} immediate Trigger the function on the leading instead
            of the trailing edge of the wait interval. Defaults to true.
          @return {Array} Timer information for use in cancelling, see `run.cancel`.
        */
        run.throttle = function() {
          return ember$metal$utils$$apply(backburner, backburner.throttle, arguments);
        };

        // Make sure it's not an autorun during testing
        function checkAutoRun() {
          if (!run.currentRunLoop) {
            ember$metal$core$$default.assert("You have turned on testing mode, which disabled the run-loop's autorun. You will need to wrap any code with asynchronous side-effects in an run", !ember$metal$core$$default.testing);
          }
        }

        /**
          Add a new named queue after the specified queue.

          The queue to add will only be added once.

          @method _addQueue
          @param {String} name the name of the queue to add.
          @param {String} after the name of the queue to add after.
          @private
        */
        run._addQueue = function(name, after) {
          if (ember$metal$array$$indexOf.call(run.queues, name) === -1) {
            run.queues.splice(ember$metal$array$$indexOf.call(run.queues, after)+1, 0, name);
          }
        };
    }).call(this);

    (function() {
        // ES6TODO: where is Ember.lookup defined?
        /**
        @module ember-metal
        */

        // ..........................................................
        // CONSTANTS
        //

        /**
          Debug parameter you can turn on. This will log all bindings that fire to
          the console. This should be disabled in production code. Note that you
          can also enable this from the console or temporarily.

          @property LOG_BINDINGS
          @for Ember
          @type Boolean
          @default false
        */
        ember$metal$core$$default.LOG_BINDINGS = false || !!ember$metal$core$$default.ENV.LOG_BINDINGS;

        var IS_GLOBAL = /^([A-Z$]|([0-9][A-Z$]))/;

        /**
          Returns true if the provided path is global (e.g., `MyApp.fooController.bar`)
          instead of local (`foo.bar.baz`).

          @method isGlobalPath
          @for Ember
          @private
          @param {String} path
          @return Boolean
        */
        function isGlobalPath(path) {
          return IS_GLOBAL.test(path);
        }

        ember$metal$binding$$isGlobalPath = isGlobalPath;

        function getWithGlobals(obj, path) {
          return ember$metal$property_get$$get(ember$metal$binding$$isGlobalPath(path) ? ember$metal$core$$default.lookup : obj, path);
        }

        ember$metal$binding$$Binding = function(toPath, fromPath) {
          this._direction = 'fwd';
          this._from = fromPath;
          this._to   = toPath;
          this._directionMap = ember$metal$map$$Map.create();
        };

        /**
        @class Binding
        @namespace Ember
        */

        ember$metal$binding$$Binding.prototype = {
          /**
            This copies the Binding so it can be connected to another object.

            @method copy
            @return {Ember.Binding} `this`
          */
          copy: function () {
            var copy = new ember$metal$binding$$Binding(this._to, this._from);
            if (this._oneWay) { copy._oneWay = true; }
            return copy;
          },

          // ..........................................................
          // CONFIG
          //

          /**
            This will set `from` property path to the specified value. It will not
            attempt to resolve this property path to an actual object until you
            connect the binding.

            The binding will search for the property path starting at the root object
            you pass when you `connect()` the binding. It follows the same rules as
            `get()` - see that method for more information.

            @method from
            @param {String} path the property path to connect to
            @return {Ember.Binding} `this`
          */
          from: function(path) {
            this._from = path;
            return this;
          },

          /**
            This will set the `to` property path to the specified value. It will not
            attempt to resolve this property path to an actual object until you
            connect the binding.

            The binding will search for the property path starting at the root object
            you pass when you `connect()` the binding. It follows the same rules as
            `get()` - see that method for more information.

            @method to
            @param {String|Tuple} path A property path or tuple
            @return {Ember.Binding} `this`
          */
          to: function(path) {
            this._to = path;
            return this;
          },

          /**
            Configures the binding as one way. A one-way binding will relay changes
            on the `from` side to the `to` side, but not the other way around. This
            means that if you change the `to` side directly, the `from` side may have
            a different value.

            @method oneWay
            @return {Ember.Binding} `this`
          */
          oneWay: function() {
            this._oneWay = true;
            return this;
          },

          /**
            @method toString
            @return {String} string representation of binding
          */
          toString: function() {
            var oneWay = this._oneWay ? '[oneWay]' : '';
            return "Ember.Binding<" + ember$metal$utils$$guidFor(this) + ">(" + this._from + " -> " + this._to + ")" + oneWay;
          },

          // ..........................................................
          // CONNECT AND SYNC
          //

          /**
            Attempts to connect this binding instance so that it can receive and relay
            changes. This method will raise an exception if you have not set the
            from/to properties yet.

            @method connect
            @param {Object} obj The root object for this binding.
            @return {Ember.Binding} `this`
          */
          connect: function(obj) {
            ember$metal$core$$default.assert('Must pass a valid object to Ember.Binding.connect()', !!obj);

            var fromPath = this._from, toPath = this._to;
            ember$metal$property_set$$trySet(obj, toPath, getWithGlobals(obj, fromPath));

            // add an observer on the object to be notified when the binding should be updated
            ember$metal$observer$$addObserver(obj, fromPath, this, this.fromDidChange);

            // if the binding is a two-way binding, also set up an observer on the target
            if (!this._oneWay) { ember$metal$observer$$addObserver(obj, toPath, this, this.toDidChange); }

            this._readyToSync = true;

            return this;
          },

          /**
            Disconnects the binding instance. Changes will no longer be relayed. You
            will not usually need to call this method.

            @method disconnect
            @param {Object} obj The root object you passed when connecting the binding.
            @return {Ember.Binding} `this`
          */
          disconnect: function(obj) {
            ember$metal$core$$default.assert('Must pass a valid object to Ember.Binding.disconnect()', !!obj);

            var twoWay = !this._oneWay;

            // remove an observer on the object so we're no longer notified of
            // changes that should update bindings.
            ember$metal$observer$$removeObserver(obj, this._from, this, this.fromDidChange);

            // if the binding is two-way, remove the observer from the target as well
            if (twoWay) { ember$metal$observer$$removeObserver(obj, this._to, this, this.toDidChange); }

            this._readyToSync = false; // disable scheduled syncs...
            return this;
          },

          // ..........................................................
          // PRIVATE
          //

          /* called when the from side changes */
          fromDidChange: function(target) {
            this._scheduleSync(target, 'fwd');
          },

          /* called when the to side changes */
          toDidChange: function(target) {
            this._scheduleSync(target, 'back');
          },

          _scheduleSync: function(obj, dir) {
            var directionMap = this._directionMap;
            var existingDir = directionMap.get(obj);

            // if we haven't scheduled the binding yet, schedule it
            if (!existingDir) {
              ember$metal$run_loop$$default.schedule('sync', this, this._sync, obj);
              directionMap.set(obj, dir);
            }

            // If both a 'back' and 'fwd' sync have been scheduled on the same object,
            // default to a 'fwd' sync so that it remains deterministic.
            if (existingDir === 'back' && dir === 'fwd') {
              directionMap.set(obj, 'fwd');
            }
          },

          _sync: function(obj) {
            var log = ember$metal$core$$default.LOG_BINDINGS;

            // don't synchronize destroyed objects or disconnected bindings
            if (obj.isDestroyed || !this._readyToSync) { return; }

            // get the direction of the binding for the object we are
            // synchronizing from
            var directionMap = this._directionMap;
            var direction = directionMap.get(obj);

            var fromPath = this._from, toPath = this._to;

            directionMap.remove(obj);

            // if we're synchronizing from the remote object...
            if (direction === 'fwd') {
              var fromValue = getWithGlobals(obj, this._from);
              if (log) {
                ember$metal$core$$default.Logger.log(' ', this.toString(), '->', fromValue, obj);
              }
              if (this._oneWay) {
                ember$metal$property_set$$trySet(obj, toPath, fromValue);
              } else {
                ember$metal$observer$$_suspendObserver(obj, toPath, this, this.toDidChange, function () {
                  ember$metal$property_set$$trySet(obj, toPath, fromValue);
                });
              }
            // if we're synchronizing *to* the remote object
            } else if (direction === 'back') {
              var toValue = ember$metal$property_get$$get(obj, this._to);
              if (log) {
                ember$metal$core$$default.Logger.log(' ', this.toString(), '<-', toValue, obj);
              }
              ember$metal$observer$$_suspendObserver(obj, fromPath, this, this.fromDidChange, function () {
                ember$metal$property_set$$trySet(ember$metal$binding$$isGlobalPath(fromPath) ? ember$metal$core$$default.lookup : obj, fromPath, toValue);
              });
            }
          }

        };

        function mixinProperties(to, from) {
          for (var key in from) {
            if (from.hasOwnProperty(key)) {
              to[key] = from[key];
            }
          }
        }

        mixinProperties(ember$metal$binding$$Binding, {

          /*
            See `Ember.Binding.from`.

            @method from
            @static
          */
          from: function() {
            var C = this, binding = new C();
            return binding.from.apply(binding, arguments);
          },

          /*
            See `Ember.Binding.to`.

            @method to
            @static
          */
          to: function() {
            var C = this, binding = new C();
            return binding.to.apply(binding, arguments);
          },

          /**
            Creates a new Binding instance and makes it apply in a single direction.
            A one-way binding will relay changes on the `from` side object (supplied
            as the `from` argument) the `to` side, but not the other way around.
            This means that if you change the "to" side directly, the "from" side may have
            a different value.

            See `Binding.oneWay`.

            @method oneWay
            @param {String} from from path.
            @param {Boolean} [flag] (Optional) passing nothing here will make the
              binding `oneWay`. You can instead pass `false` to disable `oneWay`, making the
              binding two way again.
            @return {Ember.Binding} `this`
          */
          oneWay: function(from, flag) {
            var C = this, binding = new C(null, from);
            return binding.oneWay(flag);
          }

        });

        function bind(obj, to, from) {
          return new ember$metal$binding$$Binding(to, from).connect(obj);
        }

        ember$metal$binding$$bind = bind;

        function oneWay(obj, to, from) {
          return new ember$metal$binding$$Binding(to, from).oneWay().connect(obj);
        }

        ember$metal$binding$$oneWay = oneWay;
    }).call(this);

    (function() {
        var REQUIRED,
            a_map = ember$metal$array$$map,
            a_indexOf = ember$metal$array$$indexOf,
            a_forEach = ember$metal$array$$forEach,
            a_slice = [].slice,
            o_create = ember$metal$platform$$create,
            metaFor = ember$metal$utils$$meta;

        function superFunction(){
          var ret, func = this.__nextSuper;
          if (func) {
            this.__nextSuper = null;
            ret = ember$metal$utils$$apply(this, func, arguments);
            this.__nextSuper = func;
          }
          return ret;
        }

        function mixinsMeta(obj) {
          var m = metaFor(obj, true), ret = m.mixins;
          if (!ret) {
            ret = m.mixins = {};
          } else if (!m.hasOwnProperty('mixins')) {
            ret = m.mixins = o_create(ret);
          }
          return ret;
        }

        function initMixin(mixin, args) {
          if (args && args.length > 0) {
            mixin.mixins = a_map.call(args, function(x) {
              if (x instanceof ember$metal$mixin$$Mixin) { return x; }

              // Note: Manually setup a primitive mixin here. This is the only
              // way to actually get a primitive mixin. This way normal creation
              // of mixins will give you combined mixins...
              var mixin = new ember$metal$mixin$$Mixin();
              mixin.properties = x;
              return mixin;
            });
          }
          return mixin;
        }

        function isMethod(obj) {
          return 'function' === typeof obj &&
                 obj.isMethod !== false &&
                 obj !== Boolean && obj !== Object && obj !== Number && obj !== Array && obj !== Date && obj !== String;
        }

        var CONTINUE = {};

        function mixinProperties(mixinsMeta, mixin) {
          var guid;

          if (mixin instanceof ember$metal$mixin$$Mixin) {
            guid = ember$metal$utils$$guidFor(mixin);
            if (mixinsMeta[guid]) { return CONTINUE; }
            mixinsMeta[guid] = mixin;
            return mixin.properties;
          } else {
            return mixin; // apply anonymous mixin properties
          }
        }

        function concatenatedMixinProperties(concatProp, props, values, base) {
          var concats;

          // reset before adding each new mixin to pickup concats from previous
          concats = values[concatProp] || base[concatProp];
          if (props[concatProp]) {
            concats = concats ? concats.concat(props[concatProp]) : props[concatProp];
          }

          return concats;
        }

        function giveDescriptorSuper(meta, key, property, values, descs) {
          var superProperty;

          // Computed properties override methods, and do not call super to them
          if (values[key] === undefined) {
            // Find the original descriptor in a parent mixin
            superProperty = descs[key];
          }

          // If we didn't find the original descriptor in a parent mixin, find
          // it on the original object.
          superProperty = superProperty || meta.descs[key];

          if (!superProperty || !(superProperty instanceof ember$metal$computed$$ComputedProperty)) {
            return property;
          }

          // Since multiple mixins may inherit from the same parent, we need
          // to clone the computed property so that other mixins do not receive
          // the wrapped version.
          property = o_create(property);
          property.func = ember$metal$utils$$wrap(property.func, superProperty.func);

          return property;
        }

        function giveMethodSuper(obj, key, method, values, descs) {
          var superMethod;

          // Methods overwrite computed properties, and do not call super to them.
          if (descs[key] === undefined) {
            // Find the original method in a parent mixin
            superMethod = values[key];
          }

          // If we didn't find the original value in a parent mixin, find it in
          // the original object
          superMethod = superMethod || obj[key];

          // Only wrap the new method if the original method was a function
          if ('function' !== typeof superMethod) {
            return method;
          }

          return ember$metal$utils$$wrap(method, superMethod);
        }

        function applyConcatenatedProperties(obj, key, value, values) {
          var baseValue = values[key] || obj[key];

          if (baseValue) {
            if ('function' === typeof baseValue.concat) {
              return baseValue.concat(value);
            } else {
              return ember$metal$utils$$makeArray(baseValue).concat(value);
            }
          } else {
            return ember$metal$utils$$makeArray(value);
          }
        }

        function applyMergedProperties(obj, key, value, values) {
          var baseValue = values[key] || obj[key];

          if (!baseValue) { return value; }

          var newBase = ember$metal$merge$$default({}, baseValue),
              hasFunction = false;

          for (var prop in value) {
            if (!value.hasOwnProperty(prop)) { continue; }

            var propValue = value[prop];
            if (isMethod(propValue)) {
              // TODO: support for Computed Properties, etc?
              hasFunction = true;
              newBase[prop] = giveMethodSuper(obj, prop, propValue, baseValue, {});
            } else {
              newBase[prop] = propValue;
            }
          }

          if (hasFunction) {
            newBase._super = superFunction;
          }

          return newBase;
        }

        function addNormalizedProperty(base, key, value, meta, descs, values, concats, mergings) {
          if (value instanceof ember$metal$properties$$Descriptor) {
            if (value === REQUIRED && descs[key]) { return CONTINUE; }

            // Wrap descriptor function to implement
            // __nextSuper() if needed
            if (value.func) {
              value = giveDescriptorSuper(meta, key, value, values, descs);
            }

            descs[key]  = value;
            values[key] = undefined;
          } else {
            if ((concats && a_indexOf.call(concats, key) >= 0) ||
                        key === 'concatenatedProperties' ||
                        key === 'mergedProperties') {
              value = applyConcatenatedProperties(base, key, value, values);
            } else if ((mergings && a_indexOf.call(mergings, key) >= 0)) {
              value = applyMergedProperties(base, key, value, values);
            } else if (isMethod(value)) {
              value = giveMethodSuper(base, key, value, values, descs);
            }

            descs[key] = undefined;
            values[key] = value;
          }
        }

        function mergeMixins(mixins, m, descs, values, base, keys) {
          var mixin, props, key, concats, mergings, meta;

          function removeKeys(keyName) {
            delete descs[keyName];
            delete values[keyName];
          }

          for(var i=0, l=mixins.length; i<l; i++) {
            mixin = mixins[i];
            ember$metal$core$$default.assert('Expected hash or Mixin instance, got ' + Object.prototype.toString.call(mixin),
                         typeof mixin === 'object' && mixin !== null && Object.prototype.toString.call(mixin) !== '[object Array]');

            props = mixinProperties(m, mixin);
            if (props === CONTINUE) { continue; }

            if (props) {
              meta = metaFor(base);
              if (base.willMergeMixin) { base.willMergeMixin(props); }
              concats = concatenatedMixinProperties('concatenatedProperties', props, values, base);
              mergings = concatenatedMixinProperties('mergedProperties', props, values, base);

              for (key in props) {
                if (!props.hasOwnProperty(key)) { continue; }
                keys.push(key);
                addNormalizedProperty(base, key, props[key], meta, descs, values, concats, mergings);
              }

              // manually copy toString() because some JS engines do not enumerate it
              if (props.hasOwnProperty('toString')) { base.toString = props.toString; }
            } else if (mixin.mixins) {
              mergeMixins(mixin.mixins, m, descs, values, base, keys);
              if (mixin._without) { a_forEach.call(mixin._without, removeKeys); }
            }
          }
        }

        ember$metal$mixin$$IS_BINDING = /^.+Binding$/;

        function detectBinding(obj, key, value, m) {
          if (ember$metal$mixin$$IS_BINDING.test(key)) {
            var bindings = m.bindings;
            if (!bindings) {
              bindings = m.bindings = {};
            } else if (!m.hasOwnProperty('bindings')) {
              bindings = m.bindings = o_create(m.bindings);
            }
            bindings[key] = value;
          }
        }

        function connectBindings(obj, m) {
          // TODO Mixin.apply(instance) should disconnect binding if exists
          var bindings = m.bindings, key, binding, to;
          if (bindings) {
            for (key in bindings) {
              binding = bindings[key];
              if (binding) {
                to = key.slice(0, -7); // strip Binding off end
                if (binding instanceof ember$metal$binding$$Binding) {
                  binding = binding.copy(); // copy prototypes' instance
                  binding.to(to);
                } else { // binding is string path
                  binding = new ember$metal$binding$$Binding(to, binding);
                }
                binding.connect(obj);
                obj[key] = binding;
              }
            }
            // mark as applied
            m.bindings = {};
          }
        }

        function finishPartial(obj, m) {
          connectBindings(obj, m || metaFor(obj));
          return obj;
        }

        function followAlias(obj, desc, m, descs, values) {
          var altKey = desc.methodName, value;
          if (descs[altKey] || values[altKey]) {
            value = values[altKey];
            desc  = descs[altKey];
          } else if (m.descs[altKey]) {
            desc  = m.descs[altKey];
            value = undefined;
          } else {
            desc = undefined;
            value = obj[altKey];
          }

          return { desc: desc, value: value };
        }

        function updateObserversAndListeners(obj, key, observerOrListener, pathsKey, updateMethod) {
          var paths = observerOrListener[pathsKey];

          if (paths) {
            for (var i=0, l=paths.length; i<l; i++) {
              updateMethod(obj, paths[i], null, key);
            }
          }
        }

        function replaceObserversAndListeners(obj, key, observerOrListener) {
          var prev = obj[key];

          if ('function' === typeof prev) {
            updateObserversAndListeners(obj, key, prev, '__ember_observesBefore__', ember$metal$observer$$removeBeforeObserver);
            updateObserversAndListeners(obj, key, prev, '__ember_observes__', ember$metal$observer$$removeObserver);
            updateObserversAndListeners(obj, key, prev, '__ember_listens__', ember$metal$events$$removeListener);
          }

          if ('function' === typeof observerOrListener) {
            updateObserversAndListeners(obj, key, observerOrListener, '__ember_observesBefore__', ember$metal$observer$$addBeforeObserver);
            updateObserversAndListeners(obj, key, observerOrListener, '__ember_observes__', ember$metal$observer$$addObserver);
            updateObserversAndListeners(obj, key, observerOrListener, '__ember_listens__', ember$metal$events$$addListener);
          }
        }

        function applyMixin(obj, mixins, partial) {
          var descs = {}, values = {}, m = metaFor(obj),
              key, value, desc, keys = [];

          obj._super = superFunction;

          // Go through all mixins and hashes passed in, and:
          //
          // * Handle concatenated properties
          // * Handle merged properties
          // * Set up _super wrapping if necessary
          // * Set up computed property descriptors
          // * Copying `toString` in broken browsers
          mergeMixins(mixins, mixinsMeta(obj), descs, values, obj, keys);

          for(var i = 0, l = keys.length; i < l; i++) {
            key = keys[i];
            if (key === 'constructor' || !values.hasOwnProperty(key)) { continue; }

            desc = descs[key];
            value = values[key];

            if (desc === REQUIRED) { continue; }

            while (desc && desc instanceof Alias) {
              var followed = followAlias(obj, desc, m, descs, values);
              desc = followed.desc;
              value = followed.value;
            }

            if (desc === undefined && value === undefined) { continue; }

            replaceObserversAndListeners(obj, key, value);
            detectBinding(obj, key, value, m);
            ember$metal$properties$$defineProperty(obj, key, desc, value, m);
          }

          if (!partial) { // don't apply to prototype
            finishPartial(obj, m);
          }

          return obj;
        }

        function mixin(obj) {
          var args = a_slice.call(arguments, 1);
          applyMixin(obj, args, false);
          return obj;
        }

        ember$metal$mixin$$mixin = mixin;
        ember$metal$mixin$$default = ember$metal$mixin$$Mixin;
        function Mixin() { return initMixin(this, arguments); }
        ember$metal$mixin$$Mixin = Mixin;

        ember$metal$mixin$$Mixin.prototype = {
          properties: null,
          mixins: null,
          ownerConstructor: null
        };

        ember$metal$mixin$$Mixin._apply = applyMixin;

        ember$metal$mixin$$Mixin.applyPartial = function(obj) {
          var args = a_slice.call(arguments, 1);
          return applyMixin(obj, args, true);
        };

        ember$metal$mixin$$Mixin.finishPartial = finishPartial;

        // ES6TODO: this relies on a global state?
        ember$metal$core$$default.anyUnprocessedMixins = false;

        /**
          @method create
          @static
          @param arguments*
        */
        ember$metal$mixin$$Mixin.create = function() {
          // ES6TODO: this relies on a global state?
          ember$metal$core$$default.anyUnprocessedMixins = true;
          var M = this;
          return initMixin(new M(), arguments);
        };

        var MixinPrototype = ember$metal$mixin$$Mixin.prototype;

        /**
          @method reopen
          @param arguments*
        */
        MixinPrototype.reopen = function() {
          var mixin, tmp;

          if (this.properties) {
            mixin = ember$metal$mixin$$Mixin.create();
            mixin.properties = this.properties;
            delete this.properties;
            this.mixins = [mixin];
          } else if (!this.mixins) {
            this.mixins = [];
          }

          var len = arguments.length, mixins = this.mixins, idx;

          for(idx=0; idx < len; idx++) {
            mixin = arguments[idx];
            ember$metal$core$$default.assert('Expected hash or Mixin instance, got ' + Object.prototype.toString.call(mixin),
                         typeof mixin === 'object' && mixin !== null && Object.prototype.toString.call(mixin) !== '[object Array]');

            if (mixin instanceof ember$metal$mixin$$Mixin) {
              mixins.push(mixin);
            } else {
              tmp = ember$metal$mixin$$Mixin.create();
              tmp.properties = mixin;
              mixins.push(tmp);
            }
          }

          return this;
        };

        /**
          @method apply
          @param obj
          @return applied object
        */
        MixinPrototype.apply = function(obj) {
          return applyMixin(obj, [this], false);
        };

        MixinPrototype.applyPartial = function(obj) {
          return applyMixin(obj, [this], true);
        };

        function _detect(curMixin, targetMixin, seen) {
          var guid = ember$metal$utils$$guidFor(curMixin);

          if (seen[guid]) { return false; }
          seen[guid] = true;

          if (curMixin === targetMixin) { return true; }
          var mixins = curMixin.mixins, loc = mixins ? mixins.length : 0;
          while (--loc >= 0) {
            if (_detect(mixins[loc], targetMixin, seen)) { return true; }
          }
          return false;
        }

        /**
          @method detect
          @param obj
          @return {Boolean}
        */
        MixinPrototype.detect = function(obj) {
          if (!obj) { return false; }
          if (obj instanceof ember$metal$mixin$$Mixin) { return _detect(obj, this, {}); }
          var m = obj[ember$metal$utils$$META_KEY],
              mixins = m && m.mixins;
          if (mixins) {
            return !!mixins[ember$metal$utils$$guidFor(this)];
          }
          return false;
        };

        MixinPrototype.without = function() {
          var ret = new ember$metal$mixin$$Mixin(this);
          ret._without = a_slice.call(arguments);
          return ret;
        };

        function _keys(ret, mixin, seen) {
          if (seen[ember$metal$utils$$guidFor(mixin)]) { return; }
          seen[ember$metal$utils$$guidFor(mixin)] = true;

          if (mixin.properties) {
            var props = mixin.properties;
            for (var key in props) {
              if (props.hasOwnProperty(key)) { ret[key] = true; }
            }
          } else if (mixin.mixins) {
            a_forEach.call(mixin.mixins, function(x) { _keys(ret, x, seen); });
          }
        }

        MixinPrototype.keys = function() {
          var keys = {}, seen = {}, ret = [];
          _keys(keys, this, seen);
          for(var key in keys) {
            if (keys.hasOwnProperty(key)) { ret.push(key); }
          }
          return ret;
        };

        // returns the mixins currently applied to the specified object
        // TODO: Make Ember.mixin
        ember$metal$mixin$$Mixin.mixins = function(obj) {
          var m = obj[ember$metal$utils$$META_KEY],
              mixins = m && m.mixins, ret = [];

          if (!mixins) { return ret; }

          for (var key in mixins) {
            var mixin = mixins[key];

            // skip primitive mixins since these are always anonymous
            if (!mixin.properties) { ret.push(mixin); }
          }

          return ret;
        };

        REQUIRED = new ember$metal$properties$$Descriptor();
        REQUIRED.toString = function() { return '(Required Property)'; };

        function required() {
          return REQUIRED;
        }

        ember$metal$mixin$$required = required;

        function Alias(methodName) {
          this.methodName = methodName;
        }

        Alias.prototype = new ember$metal$properties$$Descriptor();

        function aliasMethod(methodName) {
          return new Alias(methodName);
        }

        ember$metal$mixin$$aliasMethod = aliasMethod;

        function observer() {
          var func  = a_slice.call(arguments, -1)[0];
          var paths;

          var addWatchedProperty = function (path) { paths.push(path); };
          var _paths = a_slice.call(arguments, 0, -1);

          if (typeof func !== "function") {
            // revert to old, soft-deprecated argument ordering

            func  = arguments[0];
            _paths = a_slice.call(arguments, 1);
          }

          paths = [];

          for (var i=0; i<_paths.length; ++i) {
            ember$metal$expand_properties$$default(_paths[i], addWatchedProperty);
          }

          if (typeof func !== "function") {
            throw new ember$metal$core$$default.Error("Ember.observer called without a function");
          }

          func.__ember_observes__ = paths;
          return func;
        }

        ember$metal$mixin$$observer = observer;

        function immediateObserver() {
          for (var i=0, l=arguments.length; i<l; i++) {
            var arg = arguments[i];
            ember$metal$core$$default.assert("Immediate observers must observe internal properties only, not properties on other objects.", typeof arg !== "string" || arg.indexOf('.') === -1);
          }

          return ember$metal$mixin$$observer.apply(this, arguments);
        }

        ember$metal$mixin$$immediateObserver = immediateObserver;

        function beforeObserver() {
          var func  = a_slice.call(arguments, -1)[0];
          var paths;

          var addWatchedProperty = function(path) { paths.push(path); };

          var _paths = a_slice.call(arguments, 0, -1);

          if (typeof func !== "function") {
            // revert to old, soft-deprecated argument ordering

            func  = arguments[0];
            _paths = a_slice.call(arguments, 1);
          }

          paths = [];

          for (var i=0; i<_paths.length; ++i) {
            ember$metal$expand_properties$$default(_paths[i], addWatchedProperty);
          }

          if (typeof func !== "function") {
            throw new ember$metal$core$$default.Error("Ember.beforeObserver called without a function");
          }

          func.__ember_observesBefore__ = paths;
          return func;
        }

        ember$metal$mixin$$beforeObserver = beforeObserver;
    }).call(this);

    (function() {
        /**
          Returns all of the keys defined on an object or hash. This is useful
          when inspecting objects for debugging. On browsers that support it, this
          uses the native `Object.keys` implementation.

          @method keys
          @for Ember
          @param {Object} obj
          @return {Array} Array containing keys of obj
        */
        var keys = Object.keys;

        if (!keys || ember$metal$platform$$create.isSimulated) {
          var prototypeProperties = [
            'constructor',
            'hasOwnProperty',
            'isPrototypeOf',
            'propertyIsEnumerable',
            'valueOf',
            'toLocaleString',
            'toString'
          ],
          pushPropertyName = function(obj, array, key) {
            // Prevents browsers that don't respect non-enumerability from
            // copying internal Ember properties
            if (key.substring(0,2) === '__') return;
            if (key === '_super') return;
            if (ember$metal$enumerable_utils$$default.indexOf(array, key) >= 0) return;
            if (typeof obj.hasOwnProperty === 'function' && !obj.hasOwnProperty(key)) return;

            array.push(key);
          };

          keys = function keys(obj) {
            var ret = [], key;
            for (key in obj) {
              pushPropertyName(obj, ret, key);
            }

            // IE8 doesn't enumerate property that named the same as prototype properties.
            for (var i = 0, l = prototypeProperties.length; i < l; i++) {
              key = prototypeProperties[i];

              pushPropertyName(obj, ret, key);
            }

            return ret;
          };
        }

        ember$runtime$keys$$default = keys;
    }).call(this);

    (function() {
        /**
          The `Ember.ActionHandler` mixin implements support for moving an `actions`
          property to an `_actions` property at extend time, and adding `_actions`
          to the object's mergedProperties list.

          `Ember.ActionHandler` is available on some familiar classes including
          `Ember.Route`, `Ember.View`, `Ember.Component`, and controllers such as
          `Ember.Controller` and `Ember.ObjectController`.
          (Internally the mixin is used by `Ember.CoreView`, `Ember.ControllerMixin`,
          and `Ember.Route` and available to the above classes through
          inheritance.)

          @class ActionHandler
          @namespace Ember
        */
        var ActionHandler = ember$metal$mixin$$Mixin.create({
          mergedProperties: ['_actions'],

          /**
            The collection of functions, keyed by name, available on this
            `ActionHandler` as action targets.

            These functions will be invoked when a matching `{{action}}` is triggered
            from within a template and the application's current route is this route.

            Actions can also be invoked from other parts of your application
            via `ActionHandler#send`.

            The `actions` hash will inherit action handlers from
            the `actions` hash defined on extended parent classes
            or mixins rather than just replace the entire hash, e.g.:

            ```js
            App.CanDisplayBanner = Ember.Mixin.create({
              actions: {
                displayBanner: function(msg) {
                  // ...
                }
              }
            });

            App.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {
              actions: {
                playMusic: function() {
                  // ...
                }
              }
            });

            // `WelcomeRoute`, when active, will be able to respond
            // to both actions, since the actions hash is merged rather
            // then replaced when extending mixins / parent classes.
            this.send('displayBanner');
            this.send('playMusic');
            ```

            Within a Controller, Route, View or Component's action handler,
            the value of the `this` context is the Controller, Route, View or
            Component object:

            ```js
            App.SongRoute = Ember.Route.extend({
              actions: {
                myAction: function() {
                  this.controllerFor("song");
                  this.transitionTo("other.route");
                  ...
                }
              }
            });
            ```

            It is also possible to call `this._super()` from within an
            action handler if it overrides a handler defined on a parent
            class or mixin:

            Take for example the following routes:

            ```js
            App.DebugRoute = Ember.Mixin.create({
              actions: {
                debugRouteInformation: function() {
                  console.debug("trololo");
                }
              }
            });

            App.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {
              actions: {
                debugRouteInformation: function() {
                  // also call the debugRouteInformation of mixed in App.DebugRoute
                  this._super();

                  // show additional annoyance
                  window.alert(...);
                }
              }
            });
            ```

            ## Bubbling

            By default, an action will stop bubbling once a handler defined
            on the `actions` hash handles it. To continue bubbling the action,
            you must return `true` from the handler:

            ```js
            App.Router.map(function() {
              this.resource("album", function() {
                this.route("song");
              });
            });

            App.AlbumRoute = Ember.Route.extend({
              actions: {
                startPlaying: function() {
                }
              }
            });

            App.AlbumSongRoute = Ember.Route.extend({
              actions: {
                startPlaying: function() {
                  // ...

                  if (actionShouldAlsoBeTriggeredOnParentRoute) {
                    return true;
                  }
                }
              }
            });
            ```

            @property actions
            @type Hash
            @default null
          */

          /**
            Moves `actions` to `_actions` at extend time. Note that this currently
            modifies the mixin themselves, which is technically dubious but
            is practically of little consequence. This may change in the future.

            @private
            @method willMergeMixin
          */
          willMergeMixin: function(props) {
            var hashName;

            if (!props._actions) {
              Ember.assert("'actions' should not be a function", typeof(props.actions) !== 'function');

              if (ember$metal$utils$$typeOf(props.actions) === 'object') {
                hashName = 'actions';
              } else if (ember$metal$utils$$typeOf(props.events) === 'object') {
                Ember.deprecate('Action handlers contained in an `events` object are deprecated in favor of putting them in an `actions` object', false);
                hashName = 'events';
              }

              if (hashName) {
                props._actions = ember$metal$merge$$default(props._actions || {}, props[hashName]);
              }

              delete props[hashName];
            }
          },

          /**
            Triggers a named action on the `ActionHandler`. Any parameters
            supplied after the `actionName` string will be passed as arguments
            to the action target function.

            If the `ActionHandler` has its `target` property set, actions may
            bubble to the `target`. Bubbling happens when an `actionName` can
            not be found in the `ActionHandler`'s `actions` hash or if the
            action target function returns `true`.

            Example

            ```js
            App.WelcomeRoute = Ember.Route.extend({
              actions: {
                playTheme: function() {
                   this.send('playMusic', 'theme.mp3');
                },
                playMusic: function(track) {
                  // ...
                }
              }
            });
            ```

            @method send
            @param {String} actionName The action to trigger
            @param {*} context a context to send with the action
          */
          send: function(actionName) {
            var args = [].slice.call(arguments, 1), target;

            if (this._actions && this._actions[actionName]) {
              if (this._actions[actionName].apply(this, args) === true) {
                // handler returned true, so this action will bubble
              } else {
                return;
              }
            } else if (!Ember.FEATURES.isEnabled('ember-routing-drop-deprecated-action-style') && this.deprecatedSend && this.deprecatedSendHandles && this.deprecatedSendHandles(actionName)) {
              Ember.warn("The current default is deprecated but will prefer to handle actions directly on the controller instead of a similarly named action in the actions hash. To turn off this deprecated feature set: Ember.FEATURES['ember-routing-drop-deprecated-action-style'] = true");
              if (this.deprecatedSend.apply(this, [].slice.call(arguments)) === true) {
                // handler return true, so this action will bubble
              } else {
                return;
              }
            }

            if (target = ember$metal$property_get$$get(this, 'target')) {
              Ember.assert("The `target` for " + this + " (" + target + ") does not have a `send` method", typeof target.send === 'function');
              target.send.apply(target, arguments);
            }
          }
        });

        ember$runtime$mixins$action_handler$$default = ActionHandler;
    }).call(this);

    (function() {
        var o_create = ember$metal$platform$$create;
        var o_defineProperty = ember$metal$platform$$platform.defineProperty;
        var schedule = ember$metal$run_loop$$default.schedule;
        var applyMixin = ember$metal$mixin$$Mixin._apply;
        var finishPartial = ember$metal$mixin$$Mixin.finishPartial;
        var reopen = ember$metal$mixin$$Mixin.prototype.reopen;
        var MANDATORY_SETTER = ember$metal$core$$default.ENV.MANDATORY_SETTER;
        var indexOf = ember$metal$enumerable_utils$$default.indexOf;
        var K = ember$metal$core$$default.K;

        var undefinedDescriptor = {
          configurable: true,
          writable: true,
          enumerable: false,
          value: undefined
        };

        var nullDescriptor = {
          configurable: true,
          writable: true,
          enumerable: false,
          value: null
        };

        function makeCtor() {

          // Note: avoid accessing any properties on the object since it makes the
          // method a lot faster. This is glue code so we want it to be as fast as
          // possible.

          var wasApplied = false, initMixins, initProperties;

          var Class = function() {
            if (!wasApplied) {
              Class.proto(); // prepare prototype...
            }
            o_defineProperty(this, ember$metal$utils$$GUID_KEY, nullDescriptor);
            o_defineProperty(this, '__nextSuper', undefinedDescriptor);
            var m = ember$metal$utils$$meta(this), proto = m.proto;
            m.proto = this;
            if (initMixins) {
              // capture locally so we can clear the closed over variable
              var mixins = initMixins;
              initMixins = null;
              ember$metal$utils$$apply(this, this.reopen, mixins);
            }
            if (initProperties) {
              // capture locally so we can clear the closed over variable
              var props = initProperties;
              initProperties = null;

              var concatenatedProperties = this.concatenatedProperties;

              for (var i = 0, l = props.length; i < l; i++) {
                var properties = props[i];

                ember$metal$core$$default.assert("Ember.Object.create no longer supports mixing in other definitions, use createWithMixins instead.", !(properties instanceof ember$metal$mixin$$Mixin));

                if (typeof properties !== 'object' && properties !== undefined) {
                  throw new ember$metal$error$$default("Ember.Object.create only accepts objects.");
                }

                if (!properties) { continue; }

                var keyNames = ember$runtime$keys$$default(properties);

                for (var j = 0, ll = keyNames.length; j < ll; j++) {
                  var keyName = keyNames[j];
                  if (!properties.hasOwnProperty(keyName)) { continue; }

                  var value = properties[keyName];

                  if (ember$metal$mixin$$IS_BINDING.test(keyName)) {
                    var bindings = m.bindings;
                    if (!bindings) {
                      bindings = m.bindings = {};
                    } else if (!m.hasOwnProperty('bindings')) {
                      bindings = m.bindings = o_create(m.bindings);
                    }
                    bindings[keyName] = value;
                  }

                  var desc = m.descs[keyName];

                  ember$metal$core$$default.assert("Ember.Object.create no longer supports defining computed properties. Define computed properties using extend() or reopen() before calling create().", !(value instanceof ember$metal$computed$$ComputedProperty));
                  ember$metal$core$$default.assert("Ember.Object.create no longer supports defining methods that call _super.", !(typeof value === 'function' && value.toString().indexOf('._super') !== -1));
                  ember$metal$core$$default.assert("`actions` must be provided at extend time, not at create " +
                               "time, when Ember.ActionHandler is used (i.e. views, " +
                               "controllers & routes).", !((keyName === 'actions') && ember$runtime$mixins$action_handler$$default.detect(this)));

                  if (concatenatedProperties && indexOf(concatenatedProperties, keyName) >= 0) {
                    var baseValue = this[keyName];

                    if (baseValue) {
                      if ('function' === typeof baseValue.concat) {
                        value = baseValue.concat(value);
                      } else {
                        value = ember$metal$utils$$makeArray(baseValue).concat(value);
                      }
                    } else {
                      value = ember$metal$utils$$makeArray(value);
                    }
                  }

                  if (desc) {
                    desc.set(this, keyName, value);
                  } else {
                    if (typeof this.setUnknownProperty === 'function' && !(keyName in this)) {
                      this.setUnknownProperty(keyName, value);
                    } else if (MANDATORY_SETTER) {
                      ember$metal$properties$$defineProperty(this, keyName, null, value); // setup mandatory setter
                    } else {
                      this[keyName] = value;
                    }
                  }
                }
              }
            }
            finishPartial(this, m);
            ember$metal$utils$$apply(this, this.init, arguments);
            m.proto = proto;
            ember$metal$chains$$finishChains(this);
            ember$metal$events$$sendEvent(this, "init");
          };

          Class.toString = ember$metal$mixin$$Mixin.prototype.toString;
          Class.willReopen = function() {
            if (wasApplied) {
              Class.PrototypeMixin = ember$metal$mixin$$Mixin.create(Class.PrototypeMixin);
            }

            wasApplied = false;
          };
          Class._initMixins = function(args) { initMixins = args; };
          Class._initProperties = function(args) { initProperties = args; };

          Class.proto = function() {
            var superclass = Class.superclass;
            if (superclass) { superclass.proto(); }

            if (!wasApplied) {
              wasApplied = true;
              Class.PrototypeMixin.applyPartial(Class.prototype);
              ember$metal$watching$$rewatch(Class.prototype);
            }

            return this.prototype;
          };

          return Class;

        }

        /**
          @class CoreObject
          @namespace Ember
        */
        var CoreObject = makeCtor();

        CoreObject.toString = function() { return "Ember.CoreObject"; };

        CoreObject.PrototypeMixin = ember$metal$mixin$$Mixin.create({
          reopen: function() {
            applyMixin(this, arguments, true);
            return this;
          },

          /**
            An overridable method called when objects are instantiated. By default,
            does nothing unless it is overridden during class definition.

            Example:

            ```javascript
            App.Person = Ember.Object.extend({
              init: function() {
                alert('Name is ' + this.get('name'));
              }
            });

            var steve = App.Person.create({
              name: "Steve"
            });

            // alerts 'Name is Steve'.
            ```

            NOTE: If you do override `init` for a framework class like `Ember.View` or
            `Ember.ArrayController`, be sure to call `this._super()` in your
            `init` declaration! If you don't, Ember may not have an opportunity to
            do important setup work, and you'll see strange behavior in your
            application.

            @method init
          */
          init: function() {},

          /**
            Defines the properties that will be concatenated from the superclass
            (instead of overridden).

            By default, when you extend an Ember class a property defined in
            the subclass overrides a property with the same name that is defined
            in the superclass. However, there are some cases where it is preferable
            to build up a property's value by combining the superclass' property
            value with the subclass' value. An example of this in use within Ember
            is the `classNames` property of `Ember.View`.

            Here is some sample code showing the difference between a concatenated
            property and a normal one:

            ```javascript
            App.BarView = Ember.View.extend({
              someNonConcatenatedProperty: ['bar'],
              classNames: ['bar']
            });

            App.FooBarView = App.BarView.extend({
              someNonConcatenatedProperty: ['foo'],
              classNames: ['foo'],
            });

            var fooBarView = App.FooBarView.create();
            fooBarView.get('someNonConcatenatedProperty'); // ['foo']
            fooBarView.get('classNames'); // ['ember-view', 'bar', 'foo']
            ```

            This behavior extends to object creation as well. Continuing the
            above example:

            ```javascript
            var view = App.FooBarView.create({
              someNonConcatenatedProperty: ['baz'],
              classNames: ['baz']
            })
            view.get('someNonConcatenatedProperty'); // ['baz']
            view.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']
            ```
            Adding a single property that is not an array will just add it in the array:

            ```javascript
            var view = App.FooBarView.create({
              classNames: 'baz'
            })
            view.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']
            ```

            Using the `concatenatedProperties` property, we can tell to Ember that mix
            the content of the properties.

            In `Ember.View` the `classNameBindings` and `attributeBindings` properties
            are also concatenated, in addition to `classNames`.

            This feature is available for you to use throughout the Ember object model,
            although typical app developers are likely to use it infrequently. Since
            it changes expectations about behavior of properties, you should properly
            document its usage in each individual concatenated property (to not
            mislead your users to think they can override the property in a subclass).

            @property concatenatedProperties
            @type Array
            @default null
          */
          concatenatedProperties: null,

          /**
            Destroyed object property flag.

            if this property is `true` the observers and bindings were already
            removed by the effect of calling the `destroy()` method.

            @property isDestroyed
            @default false
          */
          isDestroyed: false,

          /**
            Destruction scheduled flag. The `destroy()` method has been called.

            The object stays intact until the end of the run loop at which point
            the `isDestroyed` flag is set.

            @property isDestroying
            @default false
          */
          isDestroying: false,

          /**
            Destroys an object by setting the `isDestroyed` flag and removing its
            metadata, which effectively destroys observers and bindings.

            If you try to set a property on a destroyed object, an exception will be
            raised.

            Note that destruction is scheduled for the end of the run loop and does not
            happen immediately.  It will set an isDestroying flag immediately.

            @method destroy
            @return {Ember.Object} receiver
          */
          destroy: function() {
            if (this.isDestroying) { return; }
            this.isDestroying = true;

            schedule('actions', this, this.willDestroy);
            schedule('destroy', this, this._scheduledDestroy);
            return this;
          },

          /**
            Override to implement teardown.

            @method willDestroy
           */
          willDestroy: K,

          /**
            Invoked by the run loop to actually destroy the object. This is
            scheduled for execution by the `destroy` method.

            @private
            @method _scheduledDestroy
          */
          _scheduledDestroy: function() {
            if (this.isDestroyed) { return; }
            ember$metal$watching$$destroy(this);
            this.isDestroyed = true;
          },

          bind: function(to, from) {
            if (!(from instanceof ember$metal$binding$$Binding)) { from = ember$metal$binding$$Binding.from(from); }
            from.to(to).connect(this);
            return from;
          },

          /**
            Returns a string representation which attempts to provide more information
            than Javascript's `toString` typically does, in a generic way for all Ember
            objects.

            ```javascript
            App.Person = Em.Object.extend()
            person = App.Person.create()
            person.toString() //=> "<App.Person:ember1024>"
            ```

            If the object's class is not defined on an Ember namespace, it will
            indicate it is a subclass of the registered superclass:

           ```javascript
            Student = App.Person.extend()
            student = Student.create()
            student.toString() //=> "<(subclass of App.Person):ember1025>"
            ```

            If the method `toStringExtension` is defined, its return value will be
            included in the output.

            ```javascript
            App.Teacher = App.Person.extend({
              toStringExtension: function() {
                return this.get('fullName');
              }
            });
            teacher = App.Teacher.create()
            teacher.toString(); //=> "<App.Teacher:ember1026:Tom Dale>"
            ```

            @method toString
            @return {String} string representation
          */
          toString: function toString() {
            var hasToStringExtension = typeof this.toStringExtension === 'function',
                extension = hasToStringExtension ? ":" + this.toStringExtension() : '';
            var ret = '<'+this.constructor.toString()+':'+ember$metal$utils$$guidFor(this)+extension+'>';
            this.toString = makeToString(ret);
            return ret;
          }
        });

        CoreObject.PrototypeMixin.ownerConstructor = CoreObject;

        function makeToString(ret) {
          return function() { return ret; };
        }

        if (ember$metal$core$$default.config.overridePrototypeMixin) {
          ember$metal$core$$default.config.overridePrototypeMixin(CoreObject.PrototypeMixin);
        }

        CoreObject.__super__ = null;

        var ClassMixin = ember$metal$mixin$$Mixin.create({

          ClassMixin: ember$metal$mixin$$required(),

          PrototypeMixin: ember$metal$mixin$$required(),

          isClass: true,

          isMethod: false,

          /**
            Creates a new subclass.

            ```javascript
            App.Person = Ember.Object.extend({
              say: function(thing) {
                alert(thing);
               }
            });
            ```

            This defines a new subclass of Ember.Object: `App.Person`. It contains one method: `say()`.

            You can also create a subclass from any existing class by calling its `extend()`  method. For example, you might want to create a subclass of Ember's built-in `Ember.View` class:

            ```javascript
            App.PersonView = Ember.View.extend({
              tagName: 'li',
              classNameBindings: ['isAdministrator']
            });
            ```

            When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special `_super()` method:

            ```javascript
            App.Person = Ember.Object.extend({
              say: function(thing) {
                var name = this.get('name');
                alert(name + ' says: ' + thing);
              }
            });

            App.Soldier = App.Person.extend({
              say: function(thing) {
                this._super(thing + ", sir!");
              },
              march: function(numberOfHours) {
                alert(this.get('name') + ' marches for ' + numberOfHours + ' hours.')
              }
            });

            var yehuda = App.Soldier.create({
              name: "Yehuda Katz"
            });

            yehuda.say("Yes");  // alerts "Yehuda Katz says: Yes, sir!"
            ```

            The `create()` on line #17 creates an *instance* of the `App.Soldier` class. The `extend()` on line #8 creates a *subclass* of `App.Person`. Any instance of the `App.Person` class will *not* have the `march()` method.

            You can also pass `Mixin` classes to add additional properties to the subclass.

            ```javascript
            App.Person = Ember.Object.extend({
              say: function(thing) {
                alert(this.get('name') + ' says: ' + thing);
              }
            });

            App.SingingMixin = Mixin.create({
              sing: function(thing){
                alert(this.get('name') + ' sings: la la la ' + thing);
              }
            });

            App.BroadwayStar = App.Person.extend(App.SingingMixin, {
              dance: function() {
                alert(this.get('name') + ' dances: tap tap tap tap ');
              }
            });
            ```

            The `App.BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.

            @method extend
            @static

            @param {Mixin} [mixins]* One or more Mixin classes
            @param {Object} [arguments]* Object containing values to use within the new class
          */
          extend: function() {
            var Class = makeCtor(), proto;
            Class.ClassMixin = ember$metal$mixin$$Mixin.create(this.ClassMixin);
            Class.PrototypeMixin = ember$metal$mixin$$Mixin.create(this.PrototypeMixin);

            Class.ClassMixin.ownerConstructor = Class;
            Class.PrototypeMixin.ownerConstructor = Class;

            reopen.apply(Class.PrototypeMixin, arguments);

            Class.superclass = this;
            Class.__super__  = this.prototype;

            proto = Class.prototype = o_create(this.prototype);
            proto.constructor = Class;
            ember$metal$utils$$generateGuid(proto);
            ember$metal$utils$$meta(proto).proto = proto; // this will disable observers on prototype

            Class.ClassMixin.apply(Class);
            return Class;
          },

          /**
            Equivalent to doing `extend(arguments).create()`.
            If possible use the normal `create` method instead.

            @method createWithMixins
            @static
            @param [arguments]*
          */
          createWithMixins: function() {
            var C = this;
            if (arguments.length>0) { this._initMixins(arguments); }
            return new C();
          },

          /**
            Creates an instance of a class. Accepts either no arguments, or an object
            containing values to initialize the newly instantiated object with.

            ```javascript
            App.Person = Ember.Object.extend({
              helloWorld: function() {
                alert("Hi, my name is " + this.get('name'));
              }
            });

            var tom = App.Person.create({
              name: 'Tom Dale'
            });

            tom.helloWorld(); // alerts "Hi, my name is Tom Dale".
            ```

            `create` will call the `init` function if defined during
            `Ember.AnyObject.extend`

            If no arguments are passed to `create`, it will not set values to the new
            instance during initialization:

            ```javascript
            var noName = App.Person.create();
            noName.helloWorld(); // alerts undefined
            ```

            NOTE: For performance reasons, you cannot declare methods or computed
            properties during `create`. You should instead declare methods and computed
            properties when using `extend` or use the `createWithMixins` shorthand.

            @method create
            @static
            @param [arguments]*
          */
          create: function() {
            var C = this;
            if (arguments.length>0) { this._initProperties(arguments); }
            return new C();
          },

          /**
            Augments a constructor's prototype with additional
            properties and functions:

            ```javascript
            MyObject = Ember.Object.extend({
              name: 'an object'
            });

            o = MyObject.create();
            o.get('name'); // 'an object'

            MyObject.reopen({
              say: function(msg){
                console.log(msg);
              }
            })

            o2 = MyObject.create();
            o2.say("hello"); // logs "hello"

            o.say("goodbye"); // logs "goodbye"
            ```

            To add functions and properties to the constructor itself,
            see `reopenClass`

            @method reopen
          */
          reopen: function() {
            this.willReopen();
            ember$metal$utils$$apply(this.PrototypeMixin, reopen, arguments);
            return this;
          },

          /**
            Augments a constructor's own properties and functions:

            ```javascript
            MyObject = Ember.Object.extend({
              name: 'an object'
            });

            MyObject.reopenClass({
              canBuild: false
            });

            MyObject.canBuild; // false
            o = MyObject.create();
            ```

            In other words, this creates static properties and functions for the class. These are only available on the class
            and not on any instance of that class.

            ```javascript
            App.Person = Ember.Object.extend({
              name : "",
              sayHello : function(){
                alert("Hello. My name is " + this.get('name'));
              }
            });

            App.Person.reopenClass({
              species : "Homo sapiens",
              createPerson: function(newPersonsName){
                return App.Person.create({
                  name:newPersonsName
                });
              }
            });

            var tom = App.Person.create({
              name : "Tom Dale"
            });
            var yehuda = App.Person.createPerson("Yehuda Katz");

            tom.sayHello(); // "Hello. My name is Tom Dale"
            yehuda.sayHello(); // "Hello. My name is Yehuda Katz"
            alert(App.Person.species); // "Homo sapiens"
            ```

            Note that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`
            variables. They are only valid on `App.Person`.

            To add functions and properties to instances of
            a constructor by extending the constructor's prototype
            see `reopen`

            @method reopenClass
          */
          reopenClass: function() {
            ember$metal$utils$$apply(this.ClassMixin, reopen, arguments);
            applyMixin(this, arguments, false);
            return this;
          },

          detect: function(obj) {
            if ('function' !== typeof obj) { return false; }
            while(obj) {
              if (obj===this) { return true; }
              obj = obj.superclass;
            }
            return false;
          },

          detectInstance: function(obj) {
            return obj instanceof this;
          },

          /**
            In some cases, you may want to annotate computed properties with additional
            metadata about how they function or what values they operate on. For
            example, computed property functions may close over variables that are then
            no longer available for introspection.

            You can pass a hash of these values to a computed property like this:

            ```javascript
            person: function() {
              var personId = this.get('personId');
              return App.Person.create({ id: personId });
            }.property().meta({ type: App.Person })
            ```

            Once you've done this, you can retrieve the values saved to the computed
            property from your class like this:

            ```javascript
            MyClass.metaForProperty('person');
            ```

            This will return the original hash that was passed to `meta()`.

            @method metaForProperty
            @param key {String} property name
          */
          metaForProperty: function(key) {
            var meta = this.proto()[ember$metal$utils$$META_KEY],
                desc = meta && meta.descs[key];

            ember$metal$core$$default.assert("metaForProperty() could not find a computed property with key '"+key+"'.", !!desc && desc instanceof ember$metal$computed$$ComputedProperty);
            return desc._meta || {};
          },

          /**
            Iterate over each computed property for the class, passing its name
            and any associated metadata (see `metaForProperty`) to the callback.

            @method eachComputedProperty
            @param {Function} callback
            @param {Object} binding
          */
          eachComputedProperty: function(callback, binding) {
            var proto = this.proto(),
                descs = ember$metal$utils$$meta(proto).descs,
                empty = {},
                property;

            for (var name in descs) {
              property = descs[name];

              if (property instanceof ember$metal$computed$$ComputedProperty) {
                callback.call(binding || this, name, property._meta || empty);
              }
            }
          }

        });

        ClassMixin.ownerConstructor = CoreObject;

        if (ember$metal$core$$default.config.overrideClassMixin) {
          ember$metal$core$$default.config.overrideClassMixin(ClassMixin);
        }

        CoreObject.ClassMixin = ClassMixin;
        ClassMixin.apply(CoreObject);
        ember$runtime$system$core_object$$default = CoreObject;
    }).call(this);

    (function() {
        ember$metal$get_properties$$default = function getProperties(obj) {
          var ret = {},
              propertyNames = arguments,
              i = 1;

          if (arguments.length === 2 && ember$metal$utils$$typeOf(arguments[1]) === 'array') {
            i = 0;
            propertyNames = arguments[1];
          }
          for(var len = propertyNames.length; i < len; i++) {
            ret[propertyNames[i]] = ember$metal$property_get$$get(obj, propertyNames[i]);
          }
          return ret;
        };
    }).call(this);

    (function() {
        ember$metal$set_properties$$default = function setProperties(self, hash) {
          ember$metal$property_events$$changeProperties(function() {
            for(var prop in hash) {
              if (hash.hasOwnProperty(prop)) { ember$metal$property_set$$set(self, prop, hash[prop]); }
            }
          });
          return self;
        };
    }).call(this);

    (function() {
        var slice = Array.prototype.slice;

        ember$runtime$mixins$observable$$default = ember$metal$mixin$$Mixin.create({

          /**
            Retrieves the value of a property from the object.

            This method is usually similar to using `object[keyName]` or `object.keyName`,
            however it supports both computed properties and the unknownProperty
            handler.

            Because `get` unifies the syntax for accessing all these kinds
            of properties, it can make many refactorings easier, such as replacing a
            simple property with a computed property, or vice versa.

            ### Computed Properties

            Computed properties are methods defined with the `property` modifier
            declared at the end, such as:

            ```javascript
            fullName: function() {
              return this.get('firstName') + ' ' + this.get('lastName');
            }.property('firstName', 'lastName')
            ```

            When you call `get` on a computed property, the function will be
            called and the return value will be returned instead of the function
            itself.

            ### Unknown Properties

            Likewise, if you try to call `get` on a property whose value is
            `undefined`, the `unknownProperty()` method will be called on the object.
            If this method returns any value other than `undefined`, it will be returned
            instead. This allows you to implement "virtual" properties that are
            not defined upfront.

            @method get
            @param {String} keyName The property to retrieve
            @return {Object} The property value or undefined.
          */
          get: function(keyName) {
            return ember$metal$property_get$$get(this, keyName);
          },

          /**
            To get multiple properties at once, call `getProperties`
            with a list of strings or an array:

            ```javascript
            record.getProperties('firstName', 'lastName', 'zipCode');  // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
            ```

            is equivalent to:

            ```javascript
            record.getProperties(['firstName', 'lastName', 'zipCode']);  // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
            ```

            @method getProperties
            @param {String...|Array} list of keys to get
            @return {Hash}
          */
          getProperties: function() {
            return ember$metal$utils$$apply(null, ember$metal$get_properties$$default, [this].concat(slice.call(arguments)));
          },

          /**
            Sets the provided key or path to the value.

            This method is generally very similar to calling `object[key] = value` or
            `object.key = value`, except that it provides support for computed
            properties, the `setUnknownProperty()` method and property observers.

            ### Computed Properties

            If you try to set a value on a key that has a computed property handler
            defined (see the `get()` method for an example), then `set()` will call
            that method, passing both the value and key instead of simply changing
            the value itself. This is useful for those times when you need to
            implement a property that is composed of one or more member
            properties.

            ### Unknown Properties

            If you try to set a value on a key that is undefined in the target
            object, then the `setUnknownProperty()` handler will be called instead. This
            gives you an opportunity to implement complex "virtual" properties that
            are not predefined on the object. If `setUnknownProperty()` returns
            undefined, then `set()` will simply set the value on the object.

            ### Property Observers

            In addition to changing the property, `set()` will also register a property
            change with the object. Unless you have placed this call inside of a
            `beginPropertyChanges()` and `endPropertyChanges(),` any "local" observers
            (i.e. observer methods declared on the same object), will be called
            immediately. Any "remote" observers (i.e. observer methods declared on
            another object) will be placed in a queue and called at a later time in a
            coalesced manner.

            ### Chaining

            In addition to property changes, `set()` returns the value of the object
            itself so you can do chaining like this:

            ```javascript
            record.set('firstName', 'Charles').set('lastName', 'Jolley');
            ```

            @method set
            @param {String} keyName The property to set
            @param {Object} value The value to set or `null`.
            @return {Ember.Observable}
          */
          set: function(keyName, value) {
            ember$metal$property_set$$set(this, keyName, value);
            return this;
          },


          /**
            Sets a list of properties at once. These properties are set inside
            a single `beginPropertyChanges` and `endPropertyChanges` batch, so
            observers will be buffered.

            ```javascript
            record.setProperties({ firstName: 'Charles', lastName: 'Jolley' });
            ```

            @method setProperties
            @param {Hash} hash the hash of keys and values to set
            @return {Ember.Observable}
          */
          setProperties: function(hash) {
            return ember$metal$set_properties$$default(this, hash);
          },

          /**
            Begins a grouping of property changes.

            You can use this method to group property changes so that notifications
            will not be sent until the changes are finished. If you plan to make a
            large number of changes to an object at one time, you should call this
            method at the beginning of the changes to begin deferring change
            notifications. When you are done making changes, call
            `endPropertyChanges()` to deliver the deferred change notifications and end
            deferring.

            @method beginPropertyChanges
            @return {Ember.Observable}
          */
          beginPropertyChanges: function() {
            ember$metal$property_events$$beginPropertyChanges();
            return this;
          },

          /**
            Ends a grouping of property changes.

            You can use this method to group property changes so that notifications
            will not be sent until the changes are finished. If you plan to make a
            large number of changes to an object at one time, you should call
            `beginPropertyChanges()` at the beginning of the changes to defer change
            notifications. When you are done making changes, call this method to
            deliver the deferred change notifications and end deferring.

            @method endPropertyChanges
            @return {Ember.Observable}
          */
          endPropertyChanges: function() {
            ember$metal$property_events$$endPropertyChanges();
            return this;
          },

          /**
            Notify the observer system that a property is about to change.

            Sometimes you need to change a value directly or indirectly without
            actually calling `get()` or `set()` on it. In this case, you can use this
            method and `propertyDidChange()` instead. Calling these two methods
            together will notify all observers that the property has potentially
            changed value.

            Note that you must always call `propertyWillChange` and `propertyDidChange`
            as a pair. If you do not, it may get the property change groups out of
            order and cause notifications to be delivered more often than you would
            like.

            @method propertyWillChange
            @param {String} keyName The property key that is about to change.
            @return {Ember.Observable}
          */
          propertyWillChange: function(keyName) {
            ember$metal$property_events$$propertyWillChange(this, keyName);
            return this;
          },

          /**
            Notify the observer system that a property has just changed.

            Sometimes you need to change a value directly or indirectly without
            actually calling `get()` or `set()` on it. In this case, you can use this
            method and `propertyWillChange()` instead. Calling these two methods
            together will notify all observers that the property has potentially
            changed value.

            Note that you must always call `propertyWillChange` and `propertyDidChange`
            as a pair. If you do not, it may get the property change groups out of
            order and cause notifications to be delivered more often than you would
            like.

            @method propertyDidChange
            @param {String} keyName The property key that has just changed.
            @return {Ember.Observable}
          */
          propertyDidChange: function(keyName) {
            ember$metal$property_events$$propertyDidChange(this, keyName);
            return this;
          },

          /**
            Convenience method to call `propertyWillChange` and `propertyDidChange` in
            succession.

            @method notifyPropertyChange
            @param {String} keyName The property key to be notified about.
            @return {Ember.Observable}
          */
          notifyPropertyChange: function(keyName) {
            this.propertyWillChange(keyName);
            this.propertyDidChange(keyName);
            return this;
          },

          addBeforeObserver: function(key, target, method) {
            ember$metal$observer$$addBeforeObserver(this, key, target, method);
          },

          /**
            Adds an observer on a property.

            This is the core method used to register an observer for a property.

            Once you call this method, any time the key's value is set, your observer
            will be notified. Note that the observers are triggered any time the
            value is set, regardless of whether it has actually changed. Your
            observer should be prepared to handle that.

            You can also pass an optional context parameter to this method. The
            context will be passed to your observer method whenever it is triggered.
            Note that if you add the same target/method pair on a key multiple times
            with different context parameters, your observer will only be called once
            with the last context you passed.

            ### Observer Methods

            Observer methods you pass should generally have the following signature if
            you do not pass a `context` parameter:

            ```javascript
            fooDidChange: function(sender, key, value, rev) { };
            ```

            The sender is the object that changed. The key is the property that
            changes. The value property is currently reserved and unused. The rev
            is the last property revision of the object when it changed, which you can
            use to detect if the key value has really changed or not.

            If you pass a `context` parameter, the context will be passed before the
            revision like so:

            ```javascript
            fooDidChange: function(sender, key, value, context, rev) { };
            ```

            Usually you will not need the value, context or revision parameters at
            the end. In this case, it is common to write observer methods that take
            only a sender and key value as parameters or, if you aren't interested in
            any of these values, to write an observer that has no parameters at all.

            @method addObserver
            @param {String} key The key to observer
            @param {Object} target The target object to invoke
            @param {String|Function} method The method to invoke.
          */
          addObserver: function(key, target, method) {
            ember$metal$observer$$addObserver(this, key, target, method);
          },

          /**
            Remove an observer you have previously registered on this object. Pass
            the same key, target, and method you passed to `addObserver()` and your
            target will no longer receive notifications.

            @method removeObserver
            @param {String} key The key to observer
            @param {Object} target The target object to invoke
            @param {String|Function} method The method to invoke.
          */
          removeObserver: function(key, target, method) {
            ember$metal$observer$$removeObserver(this, key, target, method);
          },

          /**
            Returns `true` if the object currently has observers registered for a
            particular key. You can use this method to potentially defer performing
            an expensive action until someone begins observing a particular property
            on the object.

            @method hasObserverFor
            @param {String} key Key to check
            @return {Boolean}
          */
          hasObserverFor: function(key) {
            return ember$metal$events$$hasListeners(this, key+':change');
          },

          /**
            Retrieves the value of a property, or a default value in the case that the
            property returns `undefined`.

            ```javascript
            person.getWithDefault('lastName', 'Doe');
            ```

            @method getWithDefault
            @param {String} keyName The name of the property to retrieve
            @param {Object} defaultValue The value to return if the property value is undefined
            @return {Object} The property value or the defaultValue.
          */
          getWithDefault: function(keyName, defaultValue) {
            return ember$metal$property_get$$getWithDefault(this, keyName, defaultValue);
          },

          /**
            Set the value of a property to the current value plus some amount.

            ```javascript
            person.incrementProperty('age');
            team.incrementProperty('score', 2);
            ```

            @method incrementProperty
            @param {String} keyName The name of the property to increment
            @param {Number} increment The amount to increment by. Defaults to 1
            @return {Number} The new property value
          */
          incrementProperty: function(keyName, increment) {
            if (ember$metal$is_none$$isNone(increment)) { increment = 1; }
            ember$metal$core$$default.assert("Must pass a numeric value to incrementProperty", (!isNaN(parseFloat(increment)) && isFinite(increment)));
            ember$metal$property_set$$set(this, keyName, (parseFloat(ember$metal$property_get$$get(this, keyName)) || 0) + increment);
            return ember$metal$property_get$$get(this, keyName);
          },

          /**
            Set the value of a property to the current value minus some amount.

            ```javascript
            player.decrementProperty('lives');
            orc.decrementProperty('health', 5);
            ```

            @method decrementProperty
            @param {String} keyName The name of the property to decrement
            @param {Number} decrement The amount to decrement by. Defaults to 1
            @return {Number} The new property value
          */
          decrementProperty: function(keyName, decrement) {
            if (ember$metal$is_none$$isNone(decrement)) { decrement = 1; }
            ember$metal$core$$default.assert("Must pass a numeric value to decrementProperty", (!isNaN(parseFloat(decrement)) && isFinite(decrement)));
            ember$metal$property_set$$set(this, keyName, (ember$metal$property_get$$get(this, keyName) || 0) - decrement);
            return ember$metal$property_get$$get(this, keyName);
          },

          /**
            Set the value of a boolean property to the opposite of it's
            current value.

            ```javascript
            starship.toggleProperty('warpDriveEngaged');
            ```

            @method toggleProperty
            @param {String} keyName The name of the property to toggle
            @return {Object} The new property value
          */
          toggleProperty: function(keyName) {
            ember$metal$property_set$$set(this, keyName, !ember$metal$property_get$$get(this, keyName));
            return ember$metal$property_get$$get(this, keyName);
          },

          /**
            Returns the cached value of a computed property, if it exists.
            This allows you to inspect the value of a computed property
            without accidentally invoking it if it is intended to be
            generated lazily.

            @method cacheFor
            @param {String} keyName
            @return {Object} The cached value of the computed property, if any
          */
          cacheFor: function(keyName) {
            return ember$metal$computed$$cacheFor(this, keyName);
          },

          // intended for debugging purposes
          observersForKey: function(keyName) {
            return ember$metal$observer$$observersFor(this, keyName);
          }
        });
    }).call(this);

    (function() {
        /**
          `Ember.Object` is the main base class for all Ember objects. It is a subclass
          of `Ember.CoreObject` with the `Ember.Observable` mixin applied. For details,
          see the documentation for each of these.

          @class Object
          @namespace Ember
          @extends Ember.CoreObject
          @uses Ember.Observable
        */
        var EmberObject = ember$runtime$system$core_object$$default.extend(ember$runtime$mixins$observable$$default);

        EmberObject.toString = function() {
          return "Ember.Object";
        };

        ember$runtime$system$object$$default = EmberObject;
    }).call(this);

    (function() {
        ember$runtime$mixins$evented$$default = ember$metal$mixin$$Mixin.create({

          /**
           Subscribes to a named event with given function.

           ```javascript
           person.on('didLoad', function() {
             // fired once the person has loaded
           });
           ```

           An optional target can be passed in as the 2nd argument that will
           be set as the "this" for the callback. This is a good way to give your
           function access to the object triggering the event. When the target
           parameter is used the callback becomes the third argument.

           @method on
           @param {String} name The name of the event
           @param {Object} [target] The "this" binding for the callback
           @param {Function} method The callback to execute
           @return this
          */
          on: function(name, target, method) {
            ember$metal$events$$addListener(this, name, target, method);
            return this;
          },

          /**
            Subscribes a function to a named event and then cancels the subscription
            after the first time the event is triggered. It is good to use ``one`` when
            you only care about the first time an event has taken place.

            This function takes an optional 2nd argument that will become the "this"
            value for the callback. If this argument is passed then the 3rd argument
            becomes the function.

            @method one
            @param {String} name The name of the event
            @param {Object} [target] The "this" binding for the callback
            @param {Function} method The callback to execute
            @return this
          */
          one: function(name, target, method) {
            if (!method) {
              method = target;
              target = null;
            }

            ember$metal$events$$addListener(this, name, target, method, true);
            return this;
          },

          /**
            Triggers a named event for the object. Any additional arguments
            will be passed as parameters to the functions that are subscribed to the
            event.

            ```javascript
            person.on('didEat', function(food) {
              console.log('person ate some ' + food);
            });

            person.trigger('didEat', 'broccoli');

            // outputs: person ate some broccoli
            ```
            @method trigger
            @param {String} name The name of the event
            @param {Object...} args Optional arguments to pass on
          */
          trigger: function(name) {
            var length = arguments.length;
            var args = new Array(length - 1);

            for (var i = 1; i < length; i++) {
              args[i - 1] = arguments[i];
            }

            ember$metal$events$$sendEvent(this, name, args);
          },

          /**
            Cancels subscription for given name, target, and method.

            @method off
            @param {String} name The name of the event
            @param {Object} target The target of the subscription
            @param {Function} method The function of the subscription
            @return this
          */
          off: function(name, target, method) {
            ember$metal$events$$removeListener(this, name, target, method);
            return this;
          },

          /**
            Checks to see if object has any subscriptions for named event.

            @method has
            @param {String} name The name of the event
            @return {Boolean} does the object have a subscription for event
           */
          has: function(name) {
            return ember$metal$events$$hasListeners(this, name);
          }
        });
    }).call(this);

    (function() {
        /**
        @module ember
        @submodule ember-views
        */

        /* BEGIN METAMORPH HELPERS */

        // Internet Explorer prior to 9 does not allow setting innerHTML if the first element
        // is a "zero-scope" element. This problem can be worked around by making
        // the first node an invisible text node. We, like Modernizr, use &shy;

        var needsShy = typeof document !== 'undefined' && (function() {
          var testEl = document.createElement('div');
          testEl.innerHTML = "<div></div>";
          testEl.firstChild.innerHTML = "<script></script>";
          return testEl.firstChild.innerHTML === '';
        })();

        // IE 8 (and likely earlier) likes to move whitespace preceeding
        // a script tag to appear after it. This means that we can
        // accidentally remove whitespace when updating a morph.
        var movesWhitespace = typeof document !== 'undefined' && (function() {
          var testEl = document.createElement('div');
          testEl.innerHTML = "Test: <script type='text/x-placeholder'></script>Value";
          return testEl.childNodes[0].nodeValue === 'Test:' &&
                  testEl.childNodes[2].nodeValue === ' Value';
        })();

        // Use this to find children by ID instead of using jQuery
        var findChildById = function(element, id) {
          if (element.getAttribute('id') === id) { return element; }

          var len = element.childNodes.length, idx, node, found;
          for (idx=0; idx<len; idx++) {
            node = element.childNodes[idx];
            found = node.nodeType === 1 && findChildById(node, id);
            if (found) { return found; }
          }
        };

        var setInnerHTMLWithoutFix = function(element, html) {
          if (needsShy) {
            html = '&shy;' + html;
          }

          var matches = [];
          if (movesWhitespace) {
            // Right now we only check for script tags with ids with the
            // goal of targeting morphs.
            html = html.replace(/(\s+)(<script id='([^']+)')/g, function(match, spaces, tag, id) {
              matches.push([id, spaces]);
              return tag;
            });
          }

          element.innerHTML = html;

          // If we have to do any whitespace adjustments do them now
          if (matches.length > 0) {
            var len = matches.length, idx;
            for (idx=0; idx<len; idx++) {
              var script = findChildById(element, matches[idx][0]),
                  node = document.createTextNode(matches[idx][1]);
              script.parentNode.insertBefore(node, script);
            }
          }

          if (needsShy) {
            var shyElement = element.firstChild;
            while (shyElement.nodeType === 1 && !shyElement.nodeName) {
              shyElement = shyElement.firstChild;
            }
            if (shyElement.nodeType === 3 && shyElement.nodeValue.charAt(0) === "\u00AD") {
              shyElement.nodeValue = shyElement.nodeValue.slice(1);
            }
          }
        };

        /* END METAMORPH HELPERS */


        var innerHTMLTags = {};

        var canSetInnerHTML = function(tagName) {
          if (innerHTMLTags[tagName] !== undefined) {
            return innerHTMLTags[tagName];
          }

          var canSet = true;

          // IE 8 and earlier don't allow us to do innerHTML on select
          if (tagName.toLowerCase() === 'select') {
            var el = document.createElement('select');
            setInnerHTMLWithoutFix(el, '<option value="test">Test</option>');
            canSet = el.options.length === 1;
          }

          innerHTMLTags[tagName] = canSet;

          return canSet;
        };

        function setInnerHTML(element, html) {
          var tagName = element.tagName;

          if (canSetInnerHTML(tagName)) {
            setInnerHTMLWithoutFix(element, html);
          } else {
            // Firefox versions < 11 do not have support for element.outerHTML.
            var outerHTML = element.outerHTML || new XMLSerializer().serializeToString(element);
            ember$metal$core$$default.assert("Can't set innerHTML on "+element.tagName+" in this browser", outerHTML);

            var startTag = outerHTML.match(new RegExp("<"+tagName+"([^>]*)>", 'i'))[0],
                endTag = '</'+tagName+'>';

            var wrapper = document.createElement('div');
            setInnerHTMLWithoutFix(wrapper, startTag + html + endTag);
            element = wrapper.firstChild;
            while (element.tagName !== tagName) {
              element = element.nextSibling;
            }
          }

          return element;
        }

        ember$views$system$utils$$setInnerHTML = setInnerHTML;

        function isSimpleClick(event) {
          var modifier = event.shiftKey || event.metaKey || event.altKey || event.ctrlKey,
              secondaryClick = event.which > 1; // IE9 may return undefined

          return !modifier && !secondaryClick;
        }

        ember$views$system$utils$$isSimpleClick = isSimpleClick;
    }).call(this);

    (function() {
        var STRING_DASHERIZE_REGEXP = (/[ _]/g);
        var STRING_DASHERIZE_CACHE = {};
        var STRING_DECAMELIZE_REGEXP = (/([a-z\d])([A-Z])/g);
        var STRING_CAMELIZE_REGEXP = (/(\-|_|\.|\s)+(.)?/g);
        var STRING_UNDERSCORE_REGEXP_1 = (/([a-z\d])([A-Z]+)/g);
        var STRING_UNDERSCORE_REGEXP_2 = (/\-|\s+/g);

        function fmt(str, formats) {
          if (!ember$metal$utils$$isArray(formats) || arguments.length > 2) {
            formats = Array.prototype.slice.call(arguments, 1);
          }

          // first, replace any ORDERED replacements.
          var idx  = 0; // the current index for non-numerical replacements
          return str.replace(/%@([0-9]+)?/g, function(s, argIndex) {
            argIndex = (argIndex) ? parseInt(argIndex, 10) - 1 : idx++;
            s = formats[argIndex];
            return (s === null) ? '(null)' : (s === undefined) ? '' : ember$metal$utils$$inspect(s);
          });
        }

        ember$runtime$system$string$$fmt = fmt;

        function loc(str, formats) {
          if (!ember$metal$utils$$isArray(formats) || arguments.length > 2) {
            formats = Array.prototype.slice.call(arguments, 1);
          }

          str = ember$metal$core$$default.STRINGS[str] || str;
          return ember$runtime$system$string$$fmt(str, formats);
        }

        ember$runtime$system$string$$loc = loc;

        function w(str) {
          return str.split(/\s+/);
        }

        ember$runtime$system$string$$w = w;

        function decamelize(str) {
          return str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase();
        }

        ember$runtime$system$string$$decamelize = decamelize;

        function dasherize(str) {
          var cache = STRING_DASHERIZE_CACHE,
              hit   = cache.hasOwnProperty(str),
              ret;

          if (hit) {
            return cache[str];
          } else {
            ret = ember$runtime$system$string$$decamelize(str).replace(STRING_DASHERIZE_REGEXP,'-');
            cache[str] = ret;
          }

          return ret;
        }

        ember$runtime$system$string$$dasherize = dasherize;

        function camelize(str) {
          return str.replace(STRING_CAMELIZE_REGEXP, function(match, separator, chr) {
            return chr ? chr.toUpperCase() : '';
          }).replace(/^([A-Z])/, function(match, separator, chr) {
            return match.toLowerCase();
          });
        }

        ember$runtime$system$string$$camelize = camelize;

        function classify(str) {
          var parts = str.split("."),
              out = [];

          for (var i=0, l=parts.length; i<l; i++) {
            var camelized = ember$runtime$system$string$$camelize(parts[i]);
            out.push(camelized.charAt(0).toUpperCase() + camelized.substr(1));
          }

          return out.join(".");
        }

        ember$runtime$system$string$$classify = classify;

        function underscore(str) {
          return str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').
            replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase();
        }

        ember$runtime$system$string$$underscore = underscore;

        function capitalize(str) {
          return str.charAt(0).toUpperCase() + str.substr(1);
        }

        ember$runtime$system$string$$capitalize = capitalize;

        /**
          Defines the hash of localized strings for the current language. Used by
          the `Ember.String.loc()` helper. To localize, add string values to this
          hash.

          @property STRINGS
          @for Ember
          @type Hash
        */
        ember$metal$core$$default.STRINGS = {};

        ember$runtime$system$string$$default = {
          /**
            Apply formatting options to the string. This will look for occurrences
            of "%@" in your string and substitute them with the arguments you pass into
            this method. If you want to control the specific order of replacement,
            you can add a number after the key as well to indicate which argument
            you want to insert.

            Ordered insertions are most useful when building loc strings where values
            you need to insert may appear in different orders.

            ```javascript
            "Hello %@ %@".fmt('John', 'Doe');     // "Hello John Doe"
            "Hello %@2, %@1".fmt('John', 'Doe');  // "Hello Doe, John"
            ```

            @method fmt
            @param {String} str The string to format
            @param {Array} formats An array of parameters to interpolate into string.
            @return {String} formatted string
          */
          fmt: ember$runtime$system$string$$fmt,

          /**
            Formats the passed string, but first looks up the string in the localized
            strings hash. This is a convenient way to localize text. See
            `Ember.String.fmt()` for more information on formatting.

            Note that it is traditional but not required to prefix localized string
            keys with an underscore or other character so you can easily identify
            localized strings.

            ```javascript
            Ember.STRINGS = {
              '_Hello World': 'Bonjour le monde',
              '_Hello %@ %@': 'Bonjour %@ %@'
            };

            Ember.String.loc("_Hello World");  // 'Bonjour le monde';
            Ember.String.loc("_Hello %@ %@", ["John", "Smith"]);  // "Bonjour John Smith";
            ```

            @method loc
            @param {String} str The string to format
            @param {Array} formats Optional array of parameters to interpolate into string.
            @return {String} formatted string
          */
          loc: ember$runtime$system$string$$loc,

          /**
            Splits a string into separate units separated by spaces, eliminating any
            empty strings in the process. This is a convenience method for split that
            is mostly useful when applied to the `String.prototype`.

            ```javascript
            Ember.String.w("alpha beta gamma").forEach(function(key) {
              console.log(key);
            });

            // > alpha
            // > beta
            // > gamma
            ```

            @method w
            @param {String} str The string to split
            @return {Array} array containing the split strings
          */
          w: ember$runtime$system$string$$w,

          /**
            Converts a camelized string into all lower case separated by underscores.

            ```javascript
            'innerHTML'.decamelize();           // 'inner_html'
            'action_name'.decamelize();        // 'action_name'
            'css-class-name'.decamelize();     // 'css-class-name'
            'my favorite items'.decamelize();  // 'my favorite items'
            ```

            @method decamelize
            @param {String} str The string to decamelize.
            @return {String} the decamelized string.
          */
          decamelize: ember$runtime$system$string$$decamelize,

          /**
            Replaces underscores, spaces, or camelCase with dashes.

            ```javascript
            'innerHTML'.dasherize();          // 'inner-html'
            'action_name'.dasherize();        // 'action-name'
            'css-class-name'.dasherize();     // 'css-class-name'
            'my favorite items'.dasherize();  // 'my-favorite-items'
            ```

            @method dasherize
            @param {String} str The string to dasherize.
            @return {String} the dasherized string.
          */
          dasherize: ember$runtime$system$string$$dasherize,

          /**
            Returns the lowerCamelCase form of a string.

            ```javascript
            'innerHTML'.camelize();          // 'innerHTML'
            'action_name'.camelize();        // 'actionName'
            'css-class-name'.camelize();     // 'cssClassName'
            'my favorite items'.camelize();  // 'myFavoriteItems'
            'My Favorite Items'.camelize();  // 'myFavoriteItems'
            ```

            @method camelize
            @param {String} str The string to camelize.
            @return {String} the camelized string.
          */
          camelize: ember$runtime$system$string$$camelize,

          /**
            Returns the UpperCamelCase form of a string.

            ```javascript
            'innerHTML'.classify();          // 'InnerHTML'
            'action_name'.classify();        // 'ActionName'
            'css-class-name'.classify();     // 'CssClassName'
            'my favorite items'.classify();  // 'MyFavoriteItems'
            ```

            @method classify
            @param {String} str the string to classify
            @return {String} the classified string
          */
          classify: ember$runtime$system$string$$classify,

          /**
            More general than decamelize. Returns the lower\_case\_and\_underscored
            form of a string.

            ```javascript
            'innerHTML'.underscore();          // 'inner_html'
            'action_name'.underscore();        // 'action_name'
            'css-class-name'.underscore();     // 'css_class_name'
            'my favorite items'.underscore();  // 'my_favorite_items'
            ```

            @method underscore
            @param {String} str The string to underscore.
            @return {String} the underscored string.
          */
          underscore: ember$runtime$system$string$$underscore,

          /**
            Returns the Capitalized form of a string

            ```javascript
            'innerHTML'.capitalize()         // 'InnerHTML'
            'action_name'.capitalize()       // 'Action_name'
            'css-class-name'.capitalize()    // 'Css-class-name'
            'my favorite items'.capitalize() // 'My favorite items'
            ```

            @method capitalize
            @param {String} str The string to capitalize.
            @return {String} The capitalized string.
          */
          capitalize: ember$runtime$system$string$$capitalize
        };
    }).call(this);

    (function() {
        var forEach = ember$metal$enumerable_utils$$default.forEach;

        /**
        Ember Views

        @module ember
        @submodule ember-views
        @requires ember-runtime
        @main ember-views
        */

        var jQuery = (ember$metal$core$$default.imports && ember$metal$core$$default.imports.jQuery) || (this && this.jQuery);

        if (!jQuery && typeof require === 'function') {
          jQuery = require('jquery');
        }

        ember$metal$core$$default.assert("Ember Views require jQuery between 1.7 and 2.1", jQuery && (jQuery().jquery.match(/^((1\.(7|8|9|10|11))|(2\.(0|1)))(\.\d+)?(pre|rc\d?)?/) || ember$metal$core$$default.ENV.FORCE_JQUERY));

        /**
        @module ember
        @submodule ember-views
        */
        if (jQuery) {
          // http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dndevents
          var dragEvents = ember$runtime$system$string$$w('dragstart drag dragenter dragleave dragover drop dragend');

          // Copies the `dataTransfer` property from a browser event object onto the
          // jQuery event object for the specified events
          forEach(dragEvents, function(eventName) {
            jQuery.event.fixHooks[eventName] = { props: ['dataTransfer'] };
          });
        }

        ember$views$system$jquery$$default = jQuery;
    }).call(this);

    (function() {
        function ClassSet() {
          this.seen = {};
          this.list = [];
        }

        ClassSet.prototype = {
          add: function(string) {
            if (string in this.seen) { return; }
            this.seen[string] = true;

            this.list.push(string);
          },

          toDOM: function() {
            return this.list.join(" ");
          }
        };

        var BAD_TAG_NAME_TEST_REGEXP = /[^a-zA-Z0-9\-]/;
        var BAD_TAG_NAME_REPLACE_REGEXP = /[^a-zA-Z0-9\-]/g;

        function stripTagName(tagName) {
          if (!tagName) {
            return tagName;
          }

          if (!BAD_TAG_NAME_TEST_REGEXP.test(tagName)) {
            return tagName;
          }

          return tagName.replace(BAD_TAG_NAME_REPLACE_REGEXP, '');
        }

        var BAD_CHARS_REGEXP = /&(?!\w+;)|[<>"'`]/g;
        var POSSIBLE_CHARS_REGEXP = /[&<>"'`]/;

        function escapeAttribute(value) {
          // Stolen shamelessly from Handlebars

          var escape = {
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#x27;",
            "`": "&#x60;"
          };

          var escapeChar = function(chr) {
            return escape[chr] || "&amp;";
          };

          var string = value.toString();

          if(!POSSIBLE_CHARS_REGEXP.test(string)) { return string; }
          return string.replace(BAD_CHARS_REGEXP, escapeChar);
        }

        // IE 6/7 have bugs around setting names on inputs during creation.
        // From http://msdn.microsoft.com/en-us/library/ie/ms536389(v=vs.85).aspx:
        // "To include the NAME attribute at run time on objects created with the createElement method, use the eTag."
        var canSetNameOnInputs = (function() {
          var div = document.createElement('div'),
              el = document.createElement('input');

          el.setAttribute('name', 'foo');
          div.appendChild(el);

          return !!div.innerHTML.match('foo');
        })();

        ember$views$system$render_buffer$$default = function RenderBuffer(tagName) {
          return new _RenderBuffer(tagName); // jshint ignore:line
        };

        function _RenderBuffer(tagName) {
          this.tagNames = [tagName || null];
          this.buffer = "";
        }

        _RenderBuffer.prototype = {

          // The root view's element
          _element: null,

          _hasElement: true,

          /**
            An internal set used to de-dupe class names when `addClass()` is
            used. After each call to `addClass()`, the `classes` property
            will be updated.

            @private
            @property elementClasses
            @type Array
            @default null
          */
          elementClasses: null,

          /**
            Array of class names which will be applied in the class attribute.

            You can use `setClasses()` to set this property directly. If you
            use `addClass()`, it will be maintained for you.

            @property classes
            @type Array
            @default null
          */
          classes: null,

          /**
            The id in of the element, to be applied in the id attribute.

            You should not set this property yourself, rather, you should use
            the `id()` method of `Ember.RenderBuffer`.

            @property elementId
            @type String
            @default null
          */
          elementId: null,

          /**
            A hash keyed on the name of the attribute and whose value will be
            applied to that attribute. For example, if you wanted to apply a
            `data-view="Foo.bar"` property to an element, you would set the
            elementAttributes hash to `{'data-view':'Foo.bar'}`.

            You should not maintain this hash yourself, rather, you should use
            the `attr()` method of `Ember.RenderBuffer`.

            @property elementAttributes
            @type Hash
            @default {}
          */
          elementAttributes: null,

          /**
            A hash keyed on the name of the properties and whose value will be
            applied to that property. For example, if you wanted to apply a
            `checked=true` property to an element, you would set the
            elementProperties hash to `{'checked':true}`.

            You should not maintain this hash yourself, rather, you should use
            the `prop()` method of `Ember.RenderBuffer`.

            @property elementProperties
            @type Hash
            @default {}
          */
          elementProperties: null,

          /**
            The tagname of the element an instance of `Ember.RenderBuffer` represents.

            Usually, this gets set as the first parameter to `Ember.RenderBuffer`. For
            example, if you wanted to create a `p` tag, then you would call

            ```javascript
            Ember.RenderBuffer('p')
            ```

            @property elementTag
            @type String
            @default null
          */
          elementTag: null,

          /**
            A hash keyed on the name of the style attribute and whose value will
            be applied to that attribute. For example, if you wanted to apply a
            `background-color:black;` style to an element, you would set the
            elementStyle hash to `{'background-color':'black'}`.

            You should not maintain this hash yourself, rather, you should use
            the `style()` method of `Ember.RenderBuffer`.

            @property elementStyle
            @type Hash
            @default {}
          */
          elementStyle: null,

          /**
            Nested `RenderBuffers` will set this to their parent `RenderBuffer`
            instance.

            @property parentBuffer
            @type Ember._RenderBuffer
          */
          parentBuffer: null,

          /**
            Adds a string of HTML to the `RenderBuffer`.

            @method push
            @param {String} string HTML to push into the buffer
            @chainable
          */
          push: function(string) {
            this.buffer += string;
            return this;
          },

          /**
            Adds a class to the buffer, which will be rendered to the class attribute.

            @method addClass
            @param {String} className Class name to add to the buffer
            @chainable
          */
          addClass: function(className) {
            // lazily create elementClasses
            this.elementClasses = (this.elementClasses || new ClassSet());
            this.elementClasses.add(className);
            this.classes = this.elementClasses.list;

            return this;
          },

          setClasses: function(classNames) {
            this.elementClasses = null;
            var len = classNames.length, i;
            for (i = 0; i < len; i++) {
              this.addClass(classNames[i]);
            }
          },

          /**
            Sets the elementID to be used for the element.

            @method id
            @param {String} id
            @chainable
          */
          id: function(id) {
            this.elementId = id;
            return this;
          },

          // duck type attribute functionality like jQuery so a render buffer
          // can be used like a jQuery object in attribute binding scenarios.

          /**
            Adds an attribute which will be rendered to the element.

            @method attr
            @param {String} name The name of the attribute
            @param {String} value The value to add to the attribute
            @chainable
            @return {Ember.RenderBuffer|String} this or the current attribute value
          */
          attr: function(name, value) {
            var attributes = this.elementAttributes = (this.elementAttributes || {});

            if (arguments.length === 1) {
              return attributes[name];
            } else {
              attributes[name] = value;
            }

            return this;
          },

          /**
            Remove an attribute from the list of attributes to render.

            @method removeAttr
            @param {String} name The name of the attribute
            @chainable
          */
          removeAttr: function(name) {
            var attributes = this.elementAttributes;
            if (attributes) { delete attributes[name]; }

            return this;
          },

          /**
            Adds a property which will be rendered to the element.

            @method prop
            @param {String} name The name of the property
            @param {String} value The value to add to the property
            @chainable
            @return {Ember.RenderBuffer|String} this or the current property value
          */
          prop: function(name, value) {
            var properties = this.elementProperties = (this.elementProperties || {});

            if (arguments.length === 1) {
              return properties[name];
            } else {
              properties[name] = value;
            }

            return this;
          },

          /**
            Remove an property from the list of properties to render.

            @method removeProp
            @param {String} name The name of the property
            @chainable
          */
          removeProp: function(name) {
            var properties = this.elementProperties;
            if (properties) { delete properties[name]; }

            return this;
          },

          /**
            Adds a style to the style attribute which will be rendered to the element.

            @method style
            @param {String} name Name of the style
            @param {String} value
            @chainable
          */
          style: function(name, value) {
            this.elementStyle = (this.elementStyle || {});

            this.elementStyle[name] = value;
            return this;
          },

          begin: function(tagName) {
            this.tagNames.push(tagName || null);
            return this;
          },

          pushOpeningTag: function() {
            var tagName = this.currentTagName();
            if (!tagName) { return; }

            if (this._hasElement && !this._element && this.buffer.length === 0) {
              this._element = this.generateElement();
              return;
            }

            var buffer = this.buffer,
                id = this.elementId,
                classes = this.classes,
                attrs = this.elementAttributes,
                props = this.elementProperties,
                style = this.elementStyle,
                attr, prop;

            buffer += '<' + stripTagName(tagName);

            if (id) {
              buffer += ' id="' + escapeAttribute(id) + '"';
              this.elementId = null;
            }
            if (classes) {
              buffer += ' class="' + escapeAttribute(classes.join(' ')) + '"';
              this.classes = null;
              this.elementClasses = null;
            }

            if (style) {
              buffer += ' style="';

              for (prop in style) {
                if (style.hasOwnProperty(prop)) {
                  buffer += prop + ':' + escapeAttribute(style[prop]) + ';';
                }
              }

              buffer += '"';

              this.elementStyle = null;
            }

            if (attrs) {
              for (attr in attrs) {
                if (attrs.hasOwnProperty(attr)) {
                  buffer += ' ' + attr + '="' + escapeAttribute(attrs[attr]) + '"';
                }
              }

              this.elementAttributes = null;
            }

            if (props) {
              for (prop in props) {
                if (props.hasOwnProperty(prop)) {
                  var value = props[prop];
                  if (value || typeof(value) === 'number') {
                    if (value === true) {
                      buffer += ' ' + prop + '="' + prop + '"';
                    } else {
                      buffer += ' ' + prop + '="' + escapeAttribute(props[prop]) + '"';
                    }
                  }
                }
              }

              this.elementProperties = null;
            }

            buffer += '>';
            this.buffer = buffer;
          },

          pushClosingTag: function() {
            var tagName = this.tagNames.pop();
            if (tagName) { this.buffer += '</' + stripTagName(tagName) + '>'; }
          },

          currentTagName: function() {
            return this.tagNames[this.tagNames.length-1];
          },

          generateElement: function() {
            var tagName = this.tagNames.pop(), // pop since we don't need to close
                id = this.elementId,
                classes = this.classes,
                attrs = this.elementAttributes,
                props = this.elementProperties,
                style = this.elementStyle,
                styleBuffer = '', attr, prop, tagString;

            if (attrs && attrs.name && !canSetNameOnInputs) {
              // IE allows passing a tag to createElement. See note on `canSetNameOnInputs` above as well.
              tagString = '<'+stripTagName(tagName)+' name="'+escapeAttribute(attrs.name)+'">';
            } else {
              tagString = tagName;
            }

            var element = document.createElement(tagString),
                $element = ember$views$system$jquery$$default(element);

            if (id) {
              $element.attr('id', id);
              this.elementId = null;
            }
            if (classes) {
              $element.attr('class', classes.join(' '));
              this.classes = null;
              this.elementClasses = null;
            }

            if (style) {
              for (prop in style) {
                if (style.hasOwnProperty(prop)) {
                  styleBuffer += (prop + ':' + style[prop] + ';');
                }
              }

              $element.attr('style', styleBuffer);

              this.elementStyle = null;
            }

            if (attrs) {
              for (attr in attrs) {
                if (attrs.hasOwnProperty(attr)) {
                  $element.attr(attr, attrs[attr]);
                }
              }

              this.elementAttributes = null;
            }

            if (props) {
              for (prop in props) {
                if (props.hasOwnProperty(prop)) {
                  $element.prop(prop, props[prop]);
                }
              }

              this.elementProperties = null;
            }

            return element;
          },

          /**
            @method element
            @return {DOMElement} The element corresponding to the generated HTML
              of this buffer
          */
          element: function() {
            var html = this.innerString();

            if (html) {
              this._element = ember$views$system$utils$$setInnerHTML(this._element, html);
            }

            return this._element;
          },

          /**
            Generates the HTML content for this buffer.

            @method string
            @return {String} The generated HTML
          */
          string: function() {
            if (this._hasElement && this._element) {
              // Firefox versions < 11 do not have support for element.outerHTML.
              var thisElement = this.element(), outerHTML = thisElement.outerHTML;
              if (typeof outerHTML === 'undefined') {
                return ember$views$system$jquery$$default('<div/>').append(thisElement).html();
              }
              return outerHTML;
            } else {
              return this.innerString();
            }
          },

          innerString: function() {
            return this.buffer;
          }
        };
    }).call(this);

    (function() {
        function InheritingDict(parent) {
          this.parent = parent;
          this.dict = {};
        }

        InheritingDict.prototype = {

          /**
            @property parent
            @type InheritingDict
            @default null
          */

          parent: null,

          /**
            Object used to store the current nodes data.

            @property dict
            @type Object
            @default Object
          */
          dict: null,

          /**
            Retrieve the value given a key, if the value is present at the current
            level use it, otherwise walk up the parent hierarchy and try again. If
            no matching key is found, return undefined.

            @method get
            @param {String} key
            @return {any}
          */
          get: function(key) {
            var dict = this.dict;

            if (dict.hasOwnProperty(key)) {
              return dict[key];
            }

            if (this.parent) {
              return this.parent.get(key);
            }
          },

          /**
            Set the given value for the given key, at the current level.

            @method set
            @param {String} key
            @param {Any} value
          */
          set: function(key, value) {
            this.dict[key] = value;
          },

          /**
            Delete the given key

            @method remove
            @param {String} key
          */
          remove: function(key) {
            delete this.dict[key];
          },

          /**
            Check for the existence of given a key, if the key is present at the current
            level return true, otherwise walk up the parent hierarchy and try again. If
            no matching key is found, return false.

            @method has
            @param {String} key
            @return {Boolean}
          */
          has: function(key) {
            var dict = this.dict;

            if (dict.hasOwnProperty(key)) {
              return true;
            }

            if (this.parent) {
              return this.parent.has(key);
            }

            return false;
          },

          /**
            Iterate and invoke a callback for each local key-value pair.

            @method eachLocal
            @param {Function} callback
            @param {Object} binding
          */
          eachLocal: function(callback, binding) {
            var dict = this.dict;

            for (var prop in dict) {
              if (dict.hasOwnProperty(prop)) {
                callback.call(binding, prop, dict[prop]);
              }
            }
          }
        };

        container$inheriting_dict$$default = InheritingDict;
    }).call(this);

    (function() {
        // A lightweight container that helps to assemble and decouple components.
        // Public api for the container is still in flux.
        // The public api, specified on the application namespace should be considered the stable api.
        function Container(parent) {
          this.parent = parent;
          this.children = [];

          this.resolver = parent && parent.resolver || function() {};

          this.registry = new container$inheriting_dict$$default(parent && parent.registry);
          this.cache = new container$inheriting_dict$$default(parent && parent.cache);
          this.factoryCache = new container$inheriting_dict$$default(parent && parent.factoryCache);
          this.resolveCache = new container$inheriting_dict$$default(parent && parent.resolveCache);
          this.typeInjections = new container$inheriting_dict$$default(parent && parent.typeInjections);
          this.injections = {};

          this.factoryTypeInjections = new container$inheriting_dict$$default(parent && parent.factoryTypeInjections);
          this.factoryInjections = {};

          this._options = new container$inheriting_dict$$default(parent && parent._options);
          this._typeOptions = new container$inheriting_dict$$default(parent && parent._typeOptions);
        }

        Container.prototype = {

          /**
            @property parent
            @type Container
            @default null
          */
          parent: null,

          /**
            @property children
            @type Array
            @default []
          */
          children: null,

          /**
            @property resolver
            @type function
          */
          resolver: null,

          /**
            @property registry
            @type InheritingDict
          */
          registry: null,

          /**
            @property cache
            @type InheritingDict
          */
          cache: null,

          /**
            @property typeInjections
            @type InheritingDict
          */
          typeInjections: null,

          /**
            @property injections
            @type Object
            @default {}
          */
          injections: null,

          /**
            @private

            @property _options
            @type InheritingDict
            @default null
          */
          _options: null,

          /**
            @private

            @property _typeOptions
            @type InheritingDict
          */
          _typeOptions: null,

          /**
            Returns a new child of the current container. These children are configured
            to correctly inherit from the current container.

            @method child
            @return {Container}
          */
          child: function() {
            var container = new Container(this);
            this.children.push(container);
            return container;
          },

          /**
            Sets a key-value pair on the current container. If a parent container,
            has the same key, once set on a child, the parent and child will diverge
            as expected.

            @method set
            @param {Object} object
            @param {String} key
            @param {any} value
          */
          set: function(object, key, value) {
            object[key] = value;
          },

          /**
            Registers a factory for later injection.

            Example:

            ```javascript
            var container = new Container();

            container.register('model:user', Person, {singleton: false });
            container.register('fruit:favorite', Orange);
            container.register('communication:main', Email, {singleton: false});
            ```

            @method register
            @param {String} fullName
            @param {Function} factory
            @param {Object} options
          */
          register: function(fullName, factory, options) {
            validateFullName(fullName);

            if (factory === undefined) {
              throw new TypeError('Attempting to register an unknown factory: `' + fullName + '`');
            }

            var normalizedName = this.normalize(fullName);

            if (this.cache.has(normalizedName)) {
              throw new Error('Cannot re-register: `' + fullName +'`, as it has already been looked up.');
            }

            this.registry.set(normalizedName, factory);
            this._options.set(normalizedName, options || {});
          },

          /**
            Unregister a fullName

            ```javascript
            var container = new Container();
            container.register('model:user', User);

            container.lookup('model:user') instanceof User //=> true

            container.unregister('model:user')
            container.lookup('model:user') === undefined //=> true
            ```

            @method unregister
            @param {String} fullName
           */
          unregister: function(fullName) {
            validateFullName(fullName);

            var normalizedName = this.normalize(fullName);

            this.registry.remove(normalizedName);
            this.cache.remove(normalizedName);
            this.factoryCache.remove(normalizedName);
            this.resolveCache.remove(normalizedName);
            this._options.remove(normalizedName);
          },

          /**
            Given a fullName return the corresponding factory.

            By default `resolve` will retrieve the factory from
            its container's registry.

            ```javascript
            var container = new Container();
            container.register('api:twitter', Twitter);

            container.resolve('api:twitter') // => Twitter
            ```

            Optionally the container can be provided with a custom resolver.
            If provided, `resolve` will first provide the custom resolver
            the oppertunity to resolve the fullName, otherwise it will fallback
            to the registry.

            ```javascript
            var container = new Container();
            container.resolver = function(fullName) {
              // lookup via the module system of choice
            };

            // the twitter factory is added to the module system
            container.resolve('api:twitter') // => Twitter
            ```

            @method resolve
            @param {String} fullName
            @return {Function} fullName's factory
          */
          resolve: function(fullName) {
            validateFullName(fullName);

            var normalizedName = this.normalize(fullName);
            var cached = this.resolveCache.get(normalizedName);

            if (cached) { return cached; }

            var resolved = this.resolver(normalizedName) || this.registry.get(normalizedName);

            this.resolveCache.set(normalizedName, resolved);

            return resolved;
          },

          /**
            A hook that can be used to describe how the resolver will
            attempt to find the factory.

            For example, the default Ember `.describe` returns the full
            class name (including namespace) where Ember's resolver expects
            to find the `fullName`.

            @method describe
            @param {String} fullName
            @return {string} described fullName
          */
          describe: function(fullName) {
            return fullName;
          },

          /**
            A hook to enable custom fullName normalization behaviour

            @method normalize
            @param {String} fullName
            @return {string} normalized fullName
          */
          normalize: function(fullName) {
            return fullName;
          },

          /**
            @method makeToString

            @param {any} factory
            @param {string} fullName
            @return {function} toString function
          */
          makeToString: function(factory, fullName) {
            return factory.toString();
          },

          /**
            Given a fullName return a corresponding instance.

            The default behaviour is for lookup to return a singleton instance.
            The singleton is scoped to the container, allowing multiple containers
            to all have their own locally scoped singletons.

            ```javascript
            var container = new Container();
            container.register('api:twitter', Twitter);

            var twitter = container.lookup('api:twitter');

            twitter instanceof Twitter; // => true

            // by default the container will return singletons
            var twitter2 = container.lookup('api:twitter');
            twitter instanceof Twitter; // => true

            twitter === twitter2; //=> true
            ```

            If singletons are not wanted an optional flag can be provided at lookup.

            ```javascript
            var container = new Container();
            container.register('api:twitter', Twitter);

            var twitter = container.lookup('api:twitter', { singleton: false });
            var twitter2 = container.lookup('api:twitter', { singleton: false });

            twitter === twitter2; //=> false
            ```

            @method lookup
            @param {String} fullName
            @param {Object} options
            @return {any}
          */
          lookup: function(fullName, options) {
            validateFullName(fullName);
            return lookup(this, this.normalize(fullName), options);
          },

          /**
            Given a fullName return the corresponding factory.

            @method lookupFactory
            @param {String} fullName
            @return {any}
          */
          lookupFactory: function(fullName) {
            validateFullName(fullName);
            return factoryFor(this, this.normalize(fullName));
          },

          /**
            Given a fullName check if the container is aware of its factory
            or singleton instance.

            @method has
            @param {String} fullName
            @return {Boolean}
          */
          has: function(fullName) {
            validateFullName(fullName);
            return has(this, this.normalize(fullName));
          },

          /**
            Allow registering options for all factories of a type.

            ```javascript
            var container = new Container();

            // if all of type `connection` must not be singletons
            container.optionsForType('connection', { singleton: false });

            container.register('connection:twitter', TwitterConnection);
            container.register('connection:facebook', FacebookConnection);

            var twitter = container.lookup('connection:twitter');
            var twitter2 = container.lookup('connection:twitter');

            twitter === twitter2; // => false

            var facebook = container.lookup('connection:facebook');
            var facebook2 = container.lookup('connection:facebook');

            facebook === facebook2; // => false
            ```

            @method optionsForType
            @param {String} type
            @param {Object} options
          */
          optionsForType: function(type, options) {
            if (this.parent) { illegalChildOperation('optionsForType'); }

            this._typeOptions.set(type, options);
          },

          /**
            @method options
            @param {String} type
            @param {Object} options
          */
          options: function(type, options) {
            this.optionsForType(type, options);
          },

          /**
            Used only via `injection`.

            Provides a specialized form of injection, specifically enabling
            all objects of one type to be injected with a reference to another
            object.

            For example, provided each object of type `controller` needed a `router`.
            one would do the following:

            ```javascript
            var container = new Container();

            container.register('router:main', Router);
            container.register('controller:user', UserController);
            container.register('controller:post', PostController);

            container.typeInjection('controller', 'router', 'router:main');

            var user = container.lookup('controller:user');
            var post = container.lookup('controller:post');

            user.router instanceof Router; //=> true
            post.router instanceof Router; //=> true

            // both controllers share the same router
            user.router === post.router; //=> true
            ```

            @private
            @method typeInjection
            @param {String} type
            @param {String} property
            @param {String} fullName
          */
          typeInjection: function(type, property, fullName) {
            validateFullName(fullName);
            if (this.parent) { illegalChildOperation('typeInjection'); }

            var fullNameType = fullName.split(':')[0];
            if(fullNameType === type) {
              throw new Error('Cannot inject a `' + fullName + '` on other ' + type + '(s). Register the `' + fullName + '` as a different type and perform the typeInjection.');
            }
            addTypeInjection(this.typeInjections, type, property, fullName);
          },

          /**
            Defines injection rules.

            These rules are used to inject dependencies onto objects when they
            are instantiated.

            Two forms of injections are possible:

            * Injecting one fullName on another fullName
            * Injecting one fullName on a type

            Example:

            ```javascript
            var container = new Container();

            container.register('source:main', Source);
            container.register('model:user', User);
            container.register('model:post', Post);

            // injecting one fullName on another fullName
            // eg. each user model gets a post model
            container.injection('model:user', 'post', 'model:post');

            // injecting one fullName on another type
            container.injection('model', 'source', 'source:main');

            var user = container.lookup('model:user');
            var post = container.lookup('model:post');

            user.source instanceof Source; //=> true
            post.source instanceof Source; //=> true

            user.post instanceof Post; //=> true

            // and both models share the same source
            user.source === post.source; //=> true
            ```

            @method injection
            @param {String} factoryName
            @param {String} property
            @param {String} injectionName
          */
          injection: function(fullName, property, injectionName) {
            if (this.parent) { illegalChildOperation('injection'); }

            validateFullName(injectionName);
            var normalizedInjectionName = this.normalize(injectionName);

            if (fullName.indexOf(':') === -1) {
              return this.typeInjection(fullName, property, normalizedInjectionName);
            }

            validateFullName(fullName);
            var normalizedName = this.normalize(fullName);

            if (this.cache.has(normalizedName)) {
              throw new Error("Attempted to register an injection for a type that has already been looked up. ('" + normalizedName + "', '" + property + "', '" + injectionName + "')");
            }
            addInjection(this.injections, normalizedName, property, normalizedInjectionName);
          },


          /**
            Used only via `factoryInjection`.

            Provides a specialized form of injection, specifically enabling
            all factory of one type to be injected with a reference to another
            object.

            For example, provided each factory of type `model` needed a `store`.
            one would do the following:

            ```javascript
            var container = new Container();

            container.register('store:main', SomeStore);

            container.factoryTypeInjection('model', 'store', 'store:main');

            var store = container.lookup('store:main');
            var UserFactory = container.lookupFactory('model:user');

            UserFactory.store instanceof SomeStore; //=> true
            ```

            @private
            @method factoryTypeInjection
            @param {String} type
            @param {String} property
            @param {String} fullName
          */
          factoryTypeInjection: function(type, property, fullName) {
            if (this.parent) { illegalChildOperation('factoryTypeInjection'); }

            addTypeInjection(this.factoryTypeInjections, type, property, this.normalize(fullName));
          },

          /**
            Defines factory injection rules.

            Similar to regular injection rules, but are run against factories, via
            `Container#lookupFactory`.

            These rules are used to inject objects onto factories when they
            are looked up.

            Two forms of injections are possible:

          * Injecting one fullName on another fullName
          * Injecting one fullName on a type

            Example:

            ```javascript
            var container = new Container();

            container.register('store:main', Store);
            container.register('store:secondary', OtherStore);
            container.register('model:user', User);
            container.register('model:post', Post);

            // injecting one fullName on another type
            container.factoryInjection('model', 'store', 'store:main');

            // injecting one fullName on another fullName
            container.factoryInjection('model:post', 'secondaryStore', 'store:secondary');

            var UserFactory = container.lookupFactory('model:user');
            var PostFactory = container.lookupFactory('model:post');
            var store = container.lookup('store:main');

            UserFactory.store instanceof Store; //=> true
            UserFactory.secondaryStore instanceof OtherStore; //=> false

            PostFactory.store instanceof Store; //=> true
            PostFactory.secondaryStore instanceof OtherStore; //=> true

            // and both models share the same source instance
            UserFactory.store === PostFactory.store; //=> true
            ```

            @method factoryInjection
            @param {String} factoryName
            @param {String} property
            @param {String} injectionName
          */
          factoryInjection: function(fullName, property, injectionName) {
            if (this.parent) { illegalChildOperation('injection'); }

            var normalizedName = this.normalize(fullName);
            var normalizedInjectionName = this.normalize(injectionName);

            validateFullName(injectionName);

            if (fullName.indexOf(':') === -1) {
              return this.factoryTypeInjection(normalizedName, property, normalizedInjectionName);
            }

            validateFullName(fullName);

            if (this.factoryCache.has(normalizedName)) {
              throw new Error("Attempted to register a factoryInjection for a type that has already been looked up. ('" + normalizedName + "', '" + property + "', '" + injectionName + "')");
            }
            addInjection(this.factoryInjections, normalizedName, property, normalizedInjectionName);
          },

          /**
            A depth first traversal, destroying the container, its descendant containers and all
            their managed objects.

            @method destroy
          */
          destroy: function() {
            for (var i=0, l=this.children.length; i<l; i++) {
              this.children[i].destroy();
            }

            this.children = [];

            eachDestroyable(this, function(item) {
              item.destroy();
            });

            this.parent = undefined;
            this.isDestroyed = true;
          },

          /**
            @method reset
          */
          reset: function() {
            for (var i=0, l=this.children.length; i<l; i++) {
              resetCache(this.children[i]);
            }
            resetCache(this);
          }
        };

        function has(container, fullName){
          if (container.cache.has(fullName)) {
            return true;
          }

          return !!container.resolve(fullName);
        }

        function lookup(container, fullName, options) {
          options = options || {};

          if (container.cache.has(fullName) && options.singleton !== false) {
            return container.cache.get(fullName);
          }

          var value = instantiate(container, fullName);

          if (value === undefined) { return; }

          if (isSingleton(container, fullName) && options.singleton !== false) {
            container.cache.set(fullName, value);
          }

          return value;
        }

        function illegalChildOperation(operation) {
          throw new Error(operation + " is not currently supported on child containers");
        }

        function isSingleton(container, fullName) {
          var singleton = option(container, fullName, 'singleton');

          return singleton !== false;
        }

        function buildInjections(container, injections) {
          var hash = {};

          if (!injections) { return hash; }

          var injection, injectable;

          for (var i=0, l=injections.length; i<l; i++) {
            injection = injections[i];
            injectable = lookup(container, injection.fullName);

            if (injectable !== undefined) {
              hash[injection.property] = injectable;
            } else {
              throw new Error('Attempting to inject an unknown injection: `' + injection.fullName + '`');
            }
          }

          return hash;
        }

        function option(container, fullName, optionName) {
          var options = container._options.get(fullName);

          if (options && options[optionName] !== undefined) {
            return options[optionName];
          }

          var type = fullName.split(":")[0];
          options = container._typeOptions.get(type);

          if (options) {
            return options[optionName];
          }
        }

        function factoryFor(container, fullName) {
          var name = fullName;
          var factory = container.resolve(name);
          var injectedFactory;
          var cache = container.factoryCache;
          var type = fullName.split(":")[0];

          if (factory === undefined) { return; }

          if (cache.has(fullName)) {
            return cache.get(fullName);
          }

          if (!factory || typeof factory.extend !== 'function' || (!Ember.MODEL_FACTORY_INJECTIONS && type === 'model')) {
            // TODO: think about a 'safe' merge style extension
            // for now just fallback to create time injection
            return factory;
          } else {

            var injections        = injectionsFor(container, fullName);
            var factoryInjections = factoryInjectionsFor(container, fullName);

            factoryInjections._toString = container.makeToString(factory, fullName);

            injectedFactory = factory.extend(injections);
            injectedFactory.reopenClass(factoryInjections);

            cache.set(fullName, injectedFactory);

            return injectedFactory;
          }
        }

        function injectionsFor(container, fullName) {
          var splitName = fullName.split(":"),
            type = splitName[0],
            injections = [];

          injections = injections.concat(container.typeInjections.get(type) || []);
          injections = injections.concat(container.injections[fullName] || []);

          injections = buildInjections(container, injections);
          injections._debugContainerKey = fullName;
          injections.container = container;

          return injections;
        }

        function factoryInjectionsFor(container, fullName) {
          var splitName = fullName.split(":"),
            type = splitName[0],
            factoryInjections = [];

          factoryInjections = factoryInjections.concat(container.factoryTypeInjections.get(type) || []);
          factoryInjections = factoryInjections.concat(container.factoryInjections[fullName] || []);

          factoryInjections = buildInjections(container, factoryInjections);
          factoryInjections._debugContainerKey = fullName;

          return factoryInjections;
        }

        function instantiate(container, fullName) {
          var factory = factoryFor(container, fullName);

          if (option(container, fullName, 'instantiate') === false) {
            return factory;
          }

          if (factory) {
            if (typeof factory.extend === 'function') {
              // assume the factory was extendable and is already injected
              return factory.create();
            } else {
              // assume the factory was extendable
              // to create time injections
              // TODO: support new'ing for instantiation and merge injections for pure JS Functions
              return factory.create(injectionsFor(container, fullName));
            }
          }
        }

        function eachDestroyable(container, callback) {
          container.cache.eachLocal(function(key, value) {
            if (option(container, key, 'instantiate') === false) { return; }
            callback(value);
          });
        }

        function resetCache(container) {
          container.cache.eachLocal(function(key, value) {
            if (option(container, key, 'instantiate') === false) { return; }
            value.destroy();
          });
          container.cache.dict = {};
        }

        function addTypeInjection(rules, type, property, fullName) {
          var injections = rules.get(type);

          if (!injections) {
            injections = [];
            rules.set(type, injections);
          }

          injections.push({
            property: property,
            fullName: fullName
          });
        }

        var VALID_FULL_NAME_REGEXP = /^[^:]+.+:[^:]+$/;

        function validateFullName(fullName) {
          if (!VALID_FULL_NAME_REGEXP.test(fullName)) {
            throw new TypeError('Invalid Fullname, expected: `type:name` got: ' + fullName);
          }
        }

        function addInjection(rules, factoryName, property, injectionName) {
          var injections = rules[factoryName] = rules[factoryName] || [];
          injections.push({ property: property, fullName: injectionName });
        }

        container$container$$default = Container;
    }).call(this);

    (function() {
        ember$runtime$mixins$comparable$$default = ember$metal$mixin$$Mixin.create({

          /**
            Override to return the result of the comparison of the two parameters. The
            compare method should return:

            - `-1` if `a < b`
            - `0` if `a == b`
            - `1` if `a > b`

            Default implementation raises an exception.

            @method compare
            @param a {Object} the first object to compare
            @param b {Object} the second object to compare
            @return {Integer} the result of the comparison
          */
          compare: ember$metal$mixin$$required(Function)
        });
    }).call(this);

    (function() {
        // Used by Ember.compare
        ember$metal$core$$default.ORDER_DEFINITION = ember$metal$core$$default.ENV.ORDER_DEFINITION || [
          'undefined',
          'null',
          'boolean',
          'number',
          'string',
          'array',
          'object',
          'instance',
          'function',
          'class',
          'date'
        ];

        ember$runtime$compare$$default = function compare(v, w) {
          if (v === w) { return 0; }

          var type1 = ember$metal$utils$$typeOf(v);
          var type2 = ember$metal$utils$$typeOf(w);

          if (ember$runtime$mixins$comparable$$default) {
            if (type1==='instance' && ember$runtime$mixins$comparable$$default.detect(v.constructor)) {
              return v.constructor.compare(v, w);
            }

            if (type2 === 'instance' && ember$runtime$mixins$comparable$$default.detect(w.constructor)) {
              return 1-w.constructor.compare(w, v);
            }
          }

          // If we haven't yet generated a reverse-mapping of Ember.ORDER_DEFINITION,
          // do so now.
          var mapping = ember$metal$core$$default.ORDER_DEFINITION_MAPPING;
          if (!mapping) {
            var order = ember$metal$core$$default.ORDER_DEFINITION;
            mapping = ember$metal$core$$default.ORDER_DEFINITION_MAPPING = {};
            var idx, len;
            for (idx = 0, len = order.length; idx < len;  ++idx) {
              mapping[order[idx]] = idx;
            }

            // We no longer need Ember.ORDER_DEFINITION.
            delete ember$metal$core$$default.ORDER_DEFINITION;
          }

          var type1Index = mapping[type1];
          var type2Index = mapping[type2];

          if (type1Index < type2Index) { return -1; }
          if (type1Index > type2Index) { return 1; }

          // types are equal - so we have to check values now
          switch (type1) {
            case 'boolean':
            case 'number':
              if (v < w) { return -1; }
              if (v > w) { return 1; }
              return 0;

            case 'string':
              var comp = v.localeCompare(w);
              if (comp < 0) { return -1; }
              if (comp > 0) { return 1; }
              return 0;

            case 'array':
              var vLen = v.length;
              var wLen = w.length;
              var l = Math.min(vLen, wLen);
              var r = 0;
              var i = 0;
              while (r === 0 && i < l) {
                r = compare(v[i],w[i]);
                i++;
              }
              if (r !== 0) { return r; }

              // all elements are equal now
              // shorter array should be ordered first
              if (vLen < wLen) { return -1; }
              if (vLen > wLen) { return 1; }
              // arrays are equal now
              return 0;

            case 'instance':
              if (ember$runtime$mixins$comparable$$default && ember$runtime$mixins$comparable$$default.detect(v)) {
                return v.compare(v, w);
              }
              return 0;

            case 'date':
              var vNum = v.getTime();
              var wNum = w.getTime();
              if (vNum < wNum) { return -1; }
              if (vNum > wNum) { return 1; }
              return 0;

            default:
              return 0;
          }
        };
    }).call(this);

    (function() {
        var a_slice = Array.prototype.slice;
        var a_indexOf = ember$metal$enumerable_utils$$default.indexOf;
        var contexts = [];

        function popCtx() {
          return contexts.length===0 ? {} : contexts.pop();
        }

        function pushCtx(ctx) {
          contexts.push(ctx);
          return null;
        }

        function iter(key, value) {
          var valueProvided = arguments.length === 2;

          function i(item) {
            var cur = ember$metal$property_get$$get(item, key);
            return valueProvided ? value===cur : !!cur;
          }
          return i ;
        }

        ember$runtime$mixins$enumerable$$default = ember$metal$mixin$$Mixin.create({

          /**
            Implement this method to make your class enumerable.

            This method will be call repeatedly during enumeration. The index value
            will always begin with 0 and increment monotonically. You don't have to
            rely on the index value to determine what object to return, but you should
            always check the value and start from the beginning when you see the
            requested index is 0.

            The `previousObject` is the object that was returned from the last call
            to `nextObject` for the current iteration. This is a useful way to
            manage iteration if you are tracing a linked list, for example.

            Finally the context parameter will always contain a hash you can use as
            a "scratchpad" to maintain any other state you need in order to iterate
            properly. The context object is reused and is not reset between
            iterations so make sure you setup the context with a fresh state whenever
            the index parameter is 0.

            Generally iterators will continue to call `nextObject` until the index
            reaches the your current length-1. If you run out of data before this
            time for some reason, you should simply return undefined.

            The default implementation of this method simply looks up the index.
            This works great on any Array-like objects.

            @method nextObject
            @param {Number} index the current index of the iteration
            @param {Object} previousObject the value returned by the last call to
              `nextObject`.
            @param {Object} context a context object you can use to maintain state.
            @return {Object} the next object in the iteration or undefined
          */
          nextObject: ember$metal$mixin$$required(Function),

          /**
            Helper method returns the first object from a collection. This is usually
            used by bindings and other parts of the framework to extract a single
            object if the enumerable contains only one item.

            If you override this method, you should implement it so that it will
            always return the same value each time it is called. If your enumerable
            contains only one object, this method should always return that object.
            If your enumerable is empty, this method should return `undefined`.

            ```javascript
            var arr = ["a", "b", "c"];
            arr.get('firstObject');  // "a"

            var arr = [];
            arr.get('firstObject');  // undefined
            ```

            @property firstObject
            @return {Object} the object or undefined
          */
          firstObject: ember$metal$computed$$computed(function() {
            if (ember$metal$property_get$$get(this, 'length')===0) return undefined ;

            // handle generic enumerables
            var context = popCtx(), ret;
            ret = this.nextObject(0, null, context);
            pushCtx(context);
            return ret ;
          }).property('[]'),

          /**
            Helper method returns the last object from a collection. If your enumerable
            contains only one object, this method should always return that object.
            If your enumerable is empty, this method should return `undefined`.

            ```javascript
            var arr = ["a", "b", "c"];
            arr.get('lastObject');  // "c"

            var arr = [];
            arr.get('lastObject');  // undefined
            ```

            @property lastObject
            @return {Object} the last object or undefined
          */
          lastObject: ember$metal$computed$$computed(function() {
            var len = ember$metal$property_get$$get(this, 'length');
            if (len===0) return undefined ;
            var context = popCtx(), idx=0, cur, last = null;
            do {
              last = cur;
              cur = this.nextObject(idx++, last, context);
            } while (cur !== undefined);
            pushCtx(context);
            return last;
          }).property('[]'),

          /**
            Returns `true` if the passed object can be found in the receiver. The
            default version will iterate through the enumerable until the object
            is found. You may want to override this with a more efficient version.

            ```javascript
            var arr = ["a", "b", "c"];
            arr.contains("a"); // true
            arr.contains("z"); // false
            ```

            @method contains
            @param {Object} obj The object to search for.
            @return {Boolean} `true` if object is found in enumerable.
          */
          contains: function(obj) {
            return this.find(function(item) { return item===obj; }) !== undefined;
          },

          /**
            Iterates through the enumerable, calling the passed function on each
            item. This method corresponds to the `forEach()` method defined in
            JavaScript 1.6.

            The callback method you provide should have the following signature (all
            parameters are optional):

            ```javascript
            function(item, index, enumerable);
            ```

            - `item` is the current item in the iteration.
            - `index` is the current index in the iteration.
            - `enumerable` is the enumerable object itself.

            Note that in addition to a callback, you can also pass an optional target
            object that will be set as `this` on the context. This is a good way
            to give your iterator function access to the current object.

            @method forEach
            @param {Function} callback The callback to execute
            @param {Object} [target] The target object to use
            @return {Object} receiver
          */
          forEach: function(callback, target) {
            if (typeof callback !== "function") throw new TypeError() ;
            var len = ember$metal$property_get$$get(this, 'length'), last = null, context = popCtx();

            if (target === undefined) target = null;

            for(var idx=0;idx<len;idx++) {
              var next = this.nextObject(idx, last, context) ;
              callback.call(target, next, idx, this);
              last = next ;
            }
            last = null ;
            context = pushCtx(context);
            return this ;
          },

          /**
            Alias for `mapBy`

            @method getEach
            @param {String} key name of the property
            @return {Array} The mapped array.
          */
          getEach: function(key) {
            return this.mapBy(key);
          },

          /**
            Sets the value on the named property for each member. This is more
            efficient than using other methods defined on this helper. If the object
            implements Ember.Observable, the value will be changed to `set(),` otherwise
            it will be set directly. `null` objects are skipped.

            @method setEach
            @param {String} key The key to set
            @param {Object} value The object to set
            @return {Object} receiver
          */
          setEach: function(key, value) {
            return this.forEach(function(item) {
              ember$metal$property_set$$set(item, key, value);
            });
          },

          /**
            Maps all of the items in the enumeration to another value, returning
            a new array. This method corresponds to `map()` defined in JavaScript 1.6.

            The callback method you provide should have the following signature (all
            parameters are optional):

            ```javascript
            function(item, index, enumerable);
            ```

            - `item` is the current item in the iteration.
            - `index` is the current index in the iteration.
            - `enumerable` is the enumerable object itself.

            It should return the mapped value.

            Note that in addition to a callback, you can also pass an optional target
            object that will be set as `this` on the context. This is a good way
            to give your iterator function access to the current object.

            @method map
            @param {Function} callback The callback to execute
            @param {Object} [target] The target object to use
            @return {Array} The mapped array.
          */
          map: function(callback, target) {
            var ret = ember$metal$core$$default.A();
            this.forEach(function(x, idx, i) {
              ret[idx] = callback.call(target, x, idx,i);
            });
            return ret ;
          },

          /**
            Similar to map, this specialized function returns the value of the named
            property on all items in the enumeration.

            @method mapBy
            @param {String} key name of the property
            @return {Array} The mapped array.
          */
          mapBy: function(key) {
            return this.map(function(next) {
              return ember$metal$property_get$$get(next, key);
            });
          },

          /**
            Similar to map, this specialized function returns the value of the named
            property on all items in the enumeration.

            @method mapProperty
            @param {String} key name of the property
            @return {Array} The mapped array.
            @deprecated Use `mapBy` instead
          */

          mapProperty: ember$metal$mixin$$aliasMethod('mapBy'),

          /**
            Returns an array with all of the items in the enumeration that the passed
            function returns true for. This method corresponds to `filter()` defined in
            JavaScript 1.6.

            The callback method you provide should have the following signature (all
            parameters are optional):

            ```javascript
            function(item, index, enumerable);
            ```

            - `item` is the current item in the iteration.
            - `index` is the current index in the iteration.
            - `enumerable` is the enumerable object itself.

            It should return the `true` to include the item in the results, `false`
            otherwise.

            Note that in addition to a callback, you can also pass an optional target
            object that will be set as `this` on the context. This is a good way
            to give your iterator function access to the current object.

            @method filter
            @param {Function} callback The callback to execute
            @param {Object} [target] The target object to use
            @return {Array} A filtered array.
          */
          filter: function(callback, target) {
            var ret = ember$metal$core$$default.A();
            this.forEach(function(x, idx, i) {
              if (callback.call(target, x, idx, i)) ret.push(x);
            });
            return ret ;
          },

          /**
            Returns an array with all of the items in the enumeration where the passed
            function returns false for. This method is the inverse of filter().

            The callback method you provide should have the following signature (all
            parameters are optional):

            ```javascript
            function(item, index, enumerable);
            ```

            - *item* is the current item in the iteration.
            - *index* is the current index in the iteration
            - *enumerable* is the enumerable object itself.

            It should return the a falsey value to include the item in the results.

            Note that in addition to a callback, you can also pass an optional target
            object that will be set as "this" on the context. This is a good way
            to give your iterator function access to the current object.

            @method reject
            @param {Function} callback The callback to execute
            @param {Object} [target] The target object to use
            @return {Array} A rejected array.
           */
          reject: function(callback, target) {
            return this.filter(function() {
              return !(ember$metal$utils$$apply(target, callback, arguments));
            });
          },

          /**
            Returns an array with just the items with the matched property. You
            can pass an optional second argument with the target value. Otherwise
            this will match any property that evaluates to `true`.

            @method filterBy
            @param {String} key the property to test
            @param {*} [value] optional value to test against.
            @return {Array} filtered array
          */
          filterBy: function(key, value) {
            return this.filter(ember$metal$utils$$apply(this, iter, arguments));
          },

          /**
            Returns an array with just the items with the matched property. You
            can pass an optional second argument with the target value. Otherwise
            this will match any property that evaluates to `true`.

            @method filterProperty
            @param {String} key the property to test
            @param {String} [value] optional value to test against.
            @return {Array} filtered array
            @deprecated Use `filterBy` instead
          */
          filterProperty: ember$metal$mixin$$aliasMethod('filterBy'),

          /**
            Returns an array with the items that do not have truthy values for
            key.  You can pass an optional second argument with the target value.  Otherwise
            this will match any property that evaluates to false.

            @method rejectBy
            @param {String} key the property to test
            @param {String} [value] optional value to test against.
            @return {Array} rejected array
          */
          rejectBy: function(key, value) {
            var exactValue = function(item) { return ember$metal$property_get$$get(item, key) === value; },
                hasValue = function(item) { return !!ember$metal$property_get$$get(item, key); },
                use = (arguments.length === 2 ? exactValue : hasValue);

            return this.reject(use);
          },

          /**
            Returns an array with the items that do not have truthy values for
            key.  You can pass an optional second argument with the target value.  Otherwise
            this will match any property that evaluates to false.

            @method rejectProperty
            @param {String} key the property to test
            @param {String} [value] optional value to test against.
            @return {Array} rejected array
            @deprecated Use `rejectBy` instead
          */
          rejectProperty: ember$metal$mixin$$aliasMethod('rejectBy'),

          /**
            Returns the first item in the array for which the callback returns true.
            This method works similar to the `filter()` method defined in JavaScript 1.6
            except that it will stop working on the array once a match is found.

            The callback method you provide should have the following signature (all
            parameters are optional):

            ```javascript
            function(item, index, enumerable);
            ```

            - `item` is the current item in the iteration.
            - `index` is the current index in the iteration.
            - `enumerable` is the enumerable object itself.

            It should return the `true` to include the item in the results, `false`
            otherwise.

            Note that in addition to a callback, you can also pass an optional target
            object that will be set as `this` on the context. This is a good way
            to give your iterator function access to the current object.

            @method find
            @param {Function} callback The callback to execute
            @param {Object} [target] The target object to use
            @return {Object} Found item or `undefined`.
          */
          find: function(callback, target) {
            var len = ember$metal$property_get$$get(this, 'length') ;
            if (target === undefined) target = null;

            var last = null, next, found = false, ret ;
            var context = popCtx();
            for(var idx=0;idx<len && !found;idx++) {
              next = this.nextObject(idx, last, context) ;
              if (found = callback.call(target, next, idx, this)) ret = next ;
              last = next ;
            }
            next = last = null ;
            context = pushCtx(context);
            return ret ;
          },

          /**
            Returns the first item with a property matching the passed value. You
            can pass an optional second argument with the target value. Otherwise
            this will match any property that evaluates to `true`.

            This method works much like the more generic `find()` method.

            @method findBy
            @param {String} key the property to test
            @param {String} [value] optional value to test against.
            @return {Object} found item or `undefined`
          */
          findBy: function(key, value) {
            return this.find(ember$metal$utils$$apply(this, iter, arguments));
          },

          /**
            Returns the first item with a property matching the passed value. You
            can pass an optional second argument with the target value. Otherwise
            this will match any property that evaluates to `true`.

            This method works much like the more generic `find()` method.

            @method findProperty
            @param {String} key the property to test
            @param {String} [value] optional value to test against.
            @return {Object} found item or `undefined`
            @deprecated Use `findBy` instead
          */
          findProperty: ember$metal$mixin$$aliasMethod('findBy'),

          /**
            Returns `true` if the passed function returns true for every item in the
            enumeration. This corresponds with the `every()` method in JavaScript 1.6.

            The callback method you provide should have the following signature (all
            parameters are optional):

            ```javascript
            function(item, index, enumerable);
            ```

            - `item` is the current item in the iteration.
            - `index` is the current index in the iteration.
            - `enumerable` is the enumerable object itself.

            It should return the `true` or `false`.

            Note that in addition to a callback, you can also pass an optional target
            object that will be set as `this` on the context. This is a good way
            to give your iterator function access to the current object.

            Example Usage:

            ```javascript
            if (people.every(isEngineer)) { Paychecks.addBigBonus(); }
            ```

            @method every
            @param {Function} callback The callback to execute
            @param {Object} [target] The target object to use
            @return {Boolean}
          */
          every: function(callback, target) {
            return !this.find(function(x, idx, i) {
              return !callback.call(target, x, idx, i);
            });
          },

          /**
            @method everyBy
            @param {String} key the property to test
            @param {String} [value] optional value to test against.
            @deprecated Use `isEvery` instead
            @return {Boolean}
          */
          everyBy: ember$metal$mixin$$aliasMethod('isEvery'),

          /**
            @method everyProperty
            @param {String} key the property to test
            @param {String} [value] optional value to test against.
            @deprecated Use `isEvery` instead
            @return {Boolean}
          */
          everyProperty: ember$metal$mixin$$aliasMethod('isEvery'),

          /**
            Returns `true` if the passed property resolves to `true` for all items in
            the enumerable. This method is often simpler/faster than using a callback.

            @method isEvery
            @param {String} key the property to test
            @param {String} [value] optional value to test against.
            @return {Boolean}
            @since 1.3.0
          */
          isEvery: function(key, value) {
            return this.every(ember$metal$utils$$apply(this, iter, arguments));
          },

          /**
            Returns `true` if the passed function returns true for any item in the
            enumeration. This corresponds with the `some()` method in JavaScript 1.6.

            The callback method you provide should have the following signature (all
            parameters are optional):

            ```javascript
            function(item, index, enumerable);
            ```

            - `item` is the current item in the iteration.
            - `index` is the current index in the iteration.
            - `enumerable` is the enumerable object itself.

            It should return the `true` to include the item in the results, `false`
            otherwise.

            Note that in addition to a callback, you can also pass an optional target
            object that will be set as `this` on the context. This is a good way
            to give your iterator function access to the current object.

            Usage Example:

            ```javascript
            if (people.any(isManager)) { Paychecks.addBiggerBonus(); }
            ```

            @method any
            @param {Function} callback The callback to execute
            @param {Object} [target] The target object to use
            @return {Boolean} `true` if the passed function returns `true` for any item
          */
          any: function(callback, target) {
            var len     = ember$metal$property_get$$get(this, 'length'),
                context = popCtx(),
                found   = false,
                last    = null,
                next, idx;

            if (target === undefined) { target = null; }

            for (idx = 0; idx < len && !found; idx++) {
              next  = this.nextObject(idx, last, context);
              found = callback.call(target, next, idx, this);
              last  = next;
            }

            next = last = null;
            context = pushCtx(context);
            return found;
          },

          /**
            Returns `true` if the passed function returns true for any item in the
            enumeration. This corresponds with the `some()` method in JavaScript 1.6.

            The callback method you provide should have the following signature (all
            parameters are optional):

            ```javascript
            function(item, index, enumerable);
            ```

            - `item` is the current item in the iteration.
            - `index` is the current index in the iteration.
            - `enumerable` is the enumerable object itself.

            It should return the `true` to include the item in the results, `false`
            otherwise.

            Note that in addition to a callback, you can also pass an optional target
            object that will be set as `this` on the context. This is a good way
            to give your iterator function access to the current object.

            Usage Example:

            ```javascript
            if (people.some(isManager)) { Paychecks.addBiggerBonus(); }
            ```

            @method some
            @param {Function} callback The callback to execute
            @param {Object} [target] The target object to use
            @return {Boolean} `true` if the passed function returns `true` for any item
            @deprecated Use `any` instead
          */
          some: ember$metal$mixin$$aliasMethod('any'),

          /**
            Returns `true` if the passed property resolves to `true` for any item in
            the enumerable. This method is often simpler/faster than using a callback.

            @method isAny
            @param {String} key the property to test
            @param {String} [value] optional value to test against.
            @return {Boolean} `true` if the passed function returns `true` for any item
            @since 1.3.0
          */
          isAny: function(key, value) {
            return this.any(ember$metal$utils$$apply(this, iter, arguments));
          },

          /**
            @method anyBy
            @param {String} key the property to test
            @param {String} [value] optional value to test against.
            @return {Boolean} `true` if the passed function returns `true` for any item
            @deprecated Use `isAny` instead
          */
          anyBy: ember$metal$mixin$$aliasMethod('isAny'),

          /**
            @method someProperty
            @param {String} key the property to test
            @param {String} [value] optional value to test against.
            @return {Boolean} `true` if the passed function returns `true` for any item
            @deprecated Use `isAny` instead
          */
          someProperty: ember$metal$mixin$$aliasMethod('isAny'),

          /**
            This will combine the values of the enumerator into a single value. It
            is a useful way to collect a summary value from an enumeration. This
            corresponds to the `reduce()` method defined in JavaScript 1.8.

            The callback method you provide should have the following signature (all
            parameters are optional):

            ```javascript
            function(previousValue, item, index, enumerable);
            ```

            - `previousValue` is the value returned by the last call to the iterator.
            - `item` is the current item in the iteration.
            - `index` is the current index in the iteration.
            - `enumerable` is the enumerable object itself.

            Return the new cumulative value.

            In addition to the callback you can also pass an `initialValue`. An error
            will be raised if you do not pass an initial value and the enumerator is
            empty.

            Note that unlike the other methods, this method does not allow you to
            pass a target object to set as this for the callback. It's part of the
            spec. Sorry.

            @method reduce
            @param {Function} callback The callback to execute
            @param {Object} initialValue Initial value for the reduce
            @param {String} reducerProperty internal use only.
            @return {Object} The reduced value.
          */
          reduce: function(callback, initialValue, reducerProperty) {
            if (typeof callback !== "function") { throw new TypeError(); }

            var ret = initialValue;

            this.forEach(function(item, i) {
              ret = callback(ret, item, i, this, reducerProperty);
            }, this);

            return ret;
          },

          /**
            Invokes the named method on every object in the receiver that
            implements it. This method corresponds to the implementation in
            Prototype 1.6.

            @method invoke
            @param {String} methodName the name of the method
            @param {Object...} args optional arguments to pass as well.
            @return {Array} return values from calling invoke.
          */
          invoke: function(methodName) {
            var args, ret = ember$metal$core$$default.A();
            if (arguments.length>1) args = a_slice.call(arguments, 1);

            this.forEach(function(x, idx) {
              var method = x && x[methodName];
              if ('function' === typeof method) {
                ret[idx] = args ? ember$metal$utils$$apply(x, method, args) : x[methodName]();
              }
            }, this);

            return ret;
          },

          /**
            Simply converts the enumerable into a genuine array. The order is not
            guaranteed. Corresponds to the method implemented by Prototype.

            @method toArray
            @return {Array} the enumerable as an array.
          */
          toArray: function() {
            var ret = ember$metal$core$$default.A();
            this.forEach(function(o, idx) { ret[idx] = o; });
            return ret;
          },

          /**
            Returns a copy of the array with all null and undefined elements removed.

            ```javascript
            var arr = ["a", null, "c", undefined];
            arr.compact();  // ["a", "c"]
            ```

            @method compact
            @return {Array} the array without null and undefined elements.
          */
          compact: function() {
            return this.filter(function(value) { return value != null; });
          },

          /**
            Returns a new enumerable that excludes the passed value. The default
            implementation returns an array regardless of the receiver type unless
            the receiver does not contain the value.

            ```javascript
            var arr = ["a", "b", "a", "c"];
            arr.without("a");  // ["b", "c"]
            ```

            @method without
            @param {Object} value
            @return {Ember.Enumerable}
          */
          without: function(value) {
            if (!this.contains(value)) return this; // nothing to do
            var ret = ember$metal$core$$default.A();
            this.forEach(function(k) {
              if (k !== value) ret[ret.length] = k;
            }) ;
            return ret ;
          },

          /**
            Returns a new enumerable that contains only unique values. The default
            implementation returns an array regardless of the receiver type.

            ```javascript
            var arr = ["a", "a", "b", "b"];
            arr.uniq();  // ["a", "b"]
            ```

            @method uniq
            @return {Ember.Enumerable}
          */
          uniq: function() {
            var ret = ember$metal$core$$default.A();
            this.forEach(function(k) {
              if (a_indexOf(ret, k)<0) ret.push(k);
            });
            return ret;
          },

          /**
            This property will trigger anytime the enumerable's content changes.
            You can observe this property to be notified of changes to the enumerables
            content.

            For plain enumerables, this property is read only. `Array` overrides
            this method.

            @property []
            @type Array
            @return this
          */
          '[]': ember$metal$computed$$computed(function(key, value) {
            return this;
          }),

          // ..........................................................
          // ENUMERABLE OBSERVERS
          //

          /**
            Registers an enumerable observer. Must implement `Ember.EnumerableObserver`
            mixin.

            @method addEnumerableObserver
            @param {Object} target
            @param {Hash} [opts]
            @return this
          */
          addEnumerableObserver: function(target, opts) {
            var willChange = (opts && opts.willChange) || 'enumerableWillChange',
                didChange  = (opts && opts.didChange) || 'enumerableDidChange';

            var hasObservers = ember$metal$property_get$$get(this, 'hasEnumerableObservers');
            if (!hasObservers) ember$metal$property_events$$propertyWillChange(this, 'hasEnumerableObservers');
            ember$metal$events$$addListener(this, '@enumerable:before', target, willChange);
            ember$metal$events$$addListener(this, '@enumerable:change', target, didChange);
            if (!hasObservers) ember$metal$property_events$$propertyDidChange(this, 'hasEnumerableObservers');
            return this;
          },

          /**
            Removes a registered enumerable observer.

            @method removeEnumerableObserver
            @param {Object} target
            @param {Hash} [opts]
            @return this
          */
          removeEnumerableObserver: function(target, opts) {
            var willChange = (opts && opts.willChange) || 'enumerableWillChange',
                didChange  = (opts && opts.didChange) || 'enumerableDidChange';

            var hasObservers = ember$metal$property_get$$get(this, 'hasEnumerableObservers');
            if (hasObservers) ember$metal$property_events$$propertyWillChange(this, 'hasEnumerableObservers');
            ember$metal$events$$removeListener(this, '@enumerable:before', target, willChange);
            ember$metal$events$$removeListener(this, '@enumerable:change', target, didChange);
            if (hasObservers) ember$metal$property_events$$propertyDidChange(this, 'hasEnumerableObservers');
            return this;
          },

          /**
            Becomes true whenever the array currently has observers watching changes
            on the array.

            @property hasEnumerableObservers
            @type Boolean
          */
          hasEnumerableObservers: ember$metal$computed$$computed(function() {
            return ember$metal$events$$hasListeners(this, '@enumerable:change') || ember$metal$events$$hasListeners(this, '@enumerable:before');
          }),


          /**
            Invoke this method just before the contents of your enumerable will
            change. You can either omit the parameters completely or pass the objects
            to be removed or added if available or just a count.

            @method enumerableContentWillChange
            @param {Ember.Enumerable|Number} removing An enumerable of the objects to
              be removed or the number of items to be removed.
            @param {Ember.Enumerable|Number} adding An enumerable of the objects to be
              added or the number of items to be added.
            @chainable
          */
          enumerableContentWillChange: function(removing, adding) {

            var removeCnt, addCnt, hasDelta;

            if ('number' === typeof removing) removeCnt = removing;
            else if (removing) removeCnt = ember$metal$property_get$$get(removing, 'length');
            else removeCnt = removing = -1;

            if ('number' === typeof adding) addCnt = adding;
            else if (adding) addCnt = ember$metal$property_get$$get(adding,'length');
            else addCnt = adding = -1;

            hasDelta = addCnt<0 || removeCnt<0 || addCnt-removeCnt!==0;

            if (removing === -1) removing = null;
            if (adding   === -1) adding   = null;

            ember$metal$property_events$$propertyWillChange(this, '[]');
            if (hasDelta) ember$metal$property_events$$propertyWillChange(this, 'length');
            ember$metal$events$$sendEvent(this, '@enumerable:before', [this, removing, adding]);

            return this;
          },

          /**
            Invoke this method when the contents of your enumerable has changed.
            This will notify any observers watching for content changes. If your are
            implementing an ordered enumerable (such as an array), also pass the
            start and end values where the content changed so that it can be used to
            notify range observers.

            @method enumerableContentDidChange
            @param {Ember.Enumerable|Number} removing An enumerable of the objects to
              be removed or the number of items to be removed.
            @param {Ember.Enumerable|Number} adding  An enumerable of the objects to
              be added or the number of items to be added.
            @chainable
          */
          enumerableContentDidChange: function(removing, adding) {
            var removeCnt, addCnt, hasDelta;

            if ('number' === typeof removing) removeCnt = removing;
            else if (removing) removeCnt = ember$metal$property_get$$get(removing, 'length');
            else removeCnt = removing = -1;

            if ('number' === typeof adding) addCnt = adding;
            else if (adding) addCnt = ember$metal$property_get$$get(adding, 'length');
            else addCnt = adding = -1;

            hasDelta = addCnt<0 || removeCnt<0 || addCnt-removeCnt!==0;

            if (removing === -1) removing = null;
            if (adding   === -1) adding   = null;

            ember$metal$events$$sendEvent(this, '@enumerable:change', [this, removing, adding]);
            if (hasDelta) ember$metal$property_events$$propertyDidChange(this, 'length');
            ember$metal$property_events$$propertyDidChange(this, '[]');

            return this ;
          },

          /**
            Converts the enumerable into an array and sorts by the keys
            specified in the argument.

            You may provide multiple arguments to sort by multiple properties.

            @method sortBy
            @param {String} property name(s) to sort on
            @return {Array} The sorted array.
            @since 1.2.0
            */
          sortBy: function() {
            var sortKeys = arguments;
            return this.toArray().sort(function(a, b){
              for(var i = 0; i < sortKeys.length; i++) {
                var key = sortKeys[i],
                propA = ember$metal$property_get$$get(a, key),
                propB = ember$metal$property_get$$get(b, key);
                // return 1 or -1 else continue to the next sortKey
                var compareValue = ember$runtime$compare$$default(propA, propB);
                if (compareValue) { return compareValue; }
              }
              return 0;
            });
          }
        });
    }).call(this);

    (function() {
        var map = ember$metal$enumerable_utils$$default.map;

        ember$runtime$mixins$array$$default = ember$metal$mixin$$Mixin.create(ember$runtime$mixins$enumerable$$default, {

          /**
            Your array must support the `length` property. Your replace methods should
            set this property whenever it changes.

            @property {Number} length
          */
          length: ember$metal$mixin$$required(),

          /**
            Returns the object at the given `index`. If the given `index` is negative
            or is greater or equal than the array length, returns `undefined`.

            This is one of the primitives you must implement to support `Ember.Array`.
            If your object supports retrieving the value of an array item using `get()`
            (i.e. `myArray.get(0)`), then you do not need to implement this method
            yourself.

            ```javascript
            var arr = ['a', 'b', 'c', 'd'];
            arr.objectAt(0);   // "a"
            arr.objectAt(3);   // "d"
            arr.objectAt(-1);  // undefined
            arr.objectAt(4);   // undefined
            arr.objectAt(5);   // undefined
            ```

            @method objectAt
            @param {Number} idx The index of the item to return.
            @return {*} item at index or undefined
          */
          objectAt: function(idx) {
            if ((idx < 0) || (idx >= ember$metal$property_get$$get(this, 'length'))) return undefined;
            return ember$metal$property_get$$get(this, idx);
          },

          /**
            This returns the objects at the specified indexes, using `objectAt`.

            ```javascript
            var arr = ['a', 'b', 'c', 'd'];
            arr.objectsAt([0, 1, 2]);  // ["a", "b", "c"]
            arr.objectsAt([2, 3, 4]);  // ["c", "d", undefined]
            ```

            @method objectsAt
            @param {Array} indexes An array of indexes of items to return.
            @return {Array}
           */
          objectsAt: function(indexes) {
            var self = this;
            return map(indexes, function(idx) { return self.objectAt(idx); });
          },

          // overrides Ember.Enumerable version
          nextObject: function(idx) {
            return this.objectAt(idx);
          },

          /**
            This is the handler for the special array content property. If you get
            this property, it will return this. If you set this property it a new
            array, it will replace the current content.

            This property overrides the default property defined in `Ember.Enumerable`.

            @property []
            @return this
          */
          '[]': ember$metal$computed$$computed(function(key, value) {
            if (value !== undefined) this.replace(0, ember$metal$property_get$$get(this, 'length'), value) ;
            return this ;
          }),

          firstObject: ember$metal$computed$$computed(function() {
            return this.objectAt(0);
          }),

          lastObject: ember$metal$computed$$computed(function() {
            return this.objectAt(ember$metal$property_get$$get(this, 'length')-1);
          }),

          // optimized version from Enumerable
          contains: function(obj) {
            return this.indexOf(obj) >= 0;
          },

          // Add any extra methods to Ember.Array that are native to the built-in Array.
          /**
            Returns a new array that is a slice of the receiver. This implementation
            uses the observable array methods to retrieve the objects for the new
            slice.

            ```javascript
            var arr = ['red', 'green', 'blue'];
            arr.slice(0);       // ['red', 'green', 'blue']
            arr.slice(0, 2);    // ['red', 'green']
            arr.slice(1, 100);  // ['green', 'blue']
            ```

            @method slice
            @param {Integer} beginIndex (Optional) index to begin slicing from.
            @param {Integer} endIndex (Optional) index to end the slice at (but not included).
            @return {Array} New array with specified slice
          */
          slice: function(beginIndex, endIndex) {
            var ret = ember$metal$core$$default.A();
            var length = ember$metal$property_get$$get(this, 'length') ;
            if (ember$metal$is_none$$isNone(beginIndex)) beginIndex = 0 ;
            if (ember$metal$is_none$$isNone(endIndex) || (endIndex > length)) endIndex = length ;

            if (beginIndex < 0) beginIndex = length + beginIndex;
            if (endIndex < 0) endIndex = length + endIndex;

            while(beginIndex < endIndex) {
              ret[ret.length] = this.objectAt(beginIndex++) ;
            }
            return ret ;
          },

          /**
            Returns the index of the given object's first occurrence.
            If no `startAt` argument is given, the starting location to
            search is 0. If it's negative, will count backward from
            the end of the array. Returns -1 if no match is found.

            ```javascript
            var arr = ["a", "b", "c", "d", "a"];
            arr.indexOf("a");       //  0
            arr.indexOf("z");       // -1
            arr.indexOf("a", 2);    //  4
            arr.indexOf("a", -1);   //  4
            arr.indexOf("b", 3);    // -1
            arr.indexOf("a", 100);  // -1
            ```

            @method indexOf
            @param {Object} object the item to search for
            @param {Number} startAt optional starting location to search, default 0
            @return {Number} index or -1 if not found
          */
          indexOf: function(object, startAt) {
            var idx, len = ember$metal$property_get$$get(this, 'length');

            if (startAt === undefined) startAt = 0;
            if (startAt < 0) startAt += len;

            for(idx = startAt; idx < len; idx++) {
              if (this.objectAt(idx) === object) return idx;
            }
            return -1;
          },

          /**
            Returns the index of the given object's last occurrence.
            If no `startAt` argument is given, the search starts from
            the last position. If it's negative, will count backward
            from the end of the array. Returns -1 if no match is found.

            ```javascript
            var arr = ["a", "b", "c", "d", "a"];
            arr.lastIndexOf("a");       //  4
            arr.lastIndexOf("z");       // -1
            arr.lastIndexOf("a", 2);    //  0
            arr.lastIndexOf("a", -1);   //  4
            arr.lastIndexOf("b", 3);    //  1
            arr.lastIndexOf("a", 100);  //  4
            ```

            @method lastIndexOf
            @param {Object} object the item to search for
            @param {Number} startAt optional starting location to search, default 0
            @return {Number} index or -1 if not found
          */
          lastIndexOf: function(object, startAt) {
            var idx, len = ember$metal$property_get$$get(this, 'length');

            if (startAt === undefined || startAt >= len) startAt = len-1;
            if (startAt < 0) startAt += len;

            for(idx = startAt; idx >= 0; idx--) {
              if (this.objectAt(idx) === object) return idx;
            }
            return -1;
          },

          // ..........................................................
          // ARRAY OBSERVERS
          //

          /**
            Adds an array observer to the receiving array. The array observer object
            normally must implement two methods:

            * `arrayWillChange(observedObj, start, removeCount, addCount)` - This method will be
              called just before the array is modified.
            * `arrayDidChange(observedObj, start, removeCount, addCount)` - This method will be
              called just after the array is modified.

            Both callbacks will be passed the observed object, starting index of the
            change as well a a count of the items to be removed and added. You can use
            these callbacks to optionally inspect the array during the change, clear
            caches, or do any other bookkeeping necessary.

            In addition to passing a target, you can also include an options hash
            which you can use to override the method names that will be invoked on the
            target.

            @method addArrayObserver
            @param {Object} target The observer object.
            @param {Hash} opts Optional hash of configuration options including
              `willChange` and `didChange` option.
            @return {Ember.Array} receiver
          */
          addArrayObserver: function(target, opts) {
            var willChange = (opts && opts.willChange) || 'arrayWillChange',
                didChange  = (opts && opts.didChange) || 'arrayDidChange';

            var hasObservers = ember$metal$property_get$$get(this, 'hasArrayObservers');
            if (!hasObservers) ember$metal$property_events$$propertyWillChange(this, 'hasArrayObservers');
            ember$metal$events$$addListener(this, '@array:before', target, willChange);
            ember$metal$events$$addListener(this, '@array:change', target, didChange);
            if (!hasObservers) ember$metal$property_events$$propertyDidChange(this, 'hasArrayObservers');
            return this;
          },

          /**
            Removes an array observer from the object if the observer is current
            registered. Calling this method multiple times with the same object will
            have no effect.

            @method removeArrayObserver
            @param {Object} target The object observing the array.
            @param {Hash} opts Optional hash of configuration options including
              `willChange` and `didChange` option.
            @return {Ember.Array} receiver
          */
          removeArrayObserver: function(target, opts) {
            var willChange = (opts && opts.willChange) || 'arrayWillChange',
                didChange  = (opts && opts.didChange) || 'arrayDidChange';

            var hasObservers = ember$metal$property_get$$get(this, 'hasArrayObservers');
            if (hasObservers) ember$metal$property_events$$propertyWillChange(this, 'hasArrayObservers');
            ember$metal$events$$removeListener(this, '@array:before', target, willChange);
            ember$metal$events$$removeListener(this, '@array:change', target, didChange);
            if (hasObservers) ember$metal$property_events$$propertyDidChange(this, 'hasArrayObservers');
            return this;
          },

          /**
            Becomes true whenever the array currently has observers watching changes
            on the array.

            @property {Boolean} hasArrayObservers
          */
          hasArrayObservers: ember$metal$computed$$computed(function() {
            return ember$metal$events$$hasListeners(this, '@array:change') || ember$metal$events$$hasListeners(this, '@array:before');
          }),

          /**
            If you are implementing an object that supports `Ember.Array`, call this
            method just before the array content changes to notify any observers and
            invalidate any related properties. Pass the starting index of the change
            as well as a delta of the amounts to change.

            @method arrayContentWillChange
            @param {Number} startIdx The starting index in the array that will change.
            @param {Number} removeAmt The number of items that will be removed. If you
              pass `null` assumes 0
            @param {Number} addAmt The number of items that will be added. If you
              pass `null` assumes 0.
            @return {Ember.Array} receiver
          */
          arrayContentWillChange: function(startIdx, removeAmt, addAmt) {

            // if no args are passed assume everything changes
            if (startIdx===undefined) {
              startIdx = 0;
              removeAmt = addAmt = -1;
            } else {
              if (removeAmt === undefined) removeAmt=-1;
              if (addAmt    === undefined) addAmt=-1;
            }

            // Make sure the @each proxy is set up if anyone is observing @each
            if (ember$metal$watching$$isWatching(this, '@each')) { ember$metal$property_get$$get(this, '@each'); }

            ember$metal$events$$sendEvent(this, '@array:before', [this, startIdx, removeAmt, addAmt]);

            var removing, lim;
            if (startIdx>=0 && removeAmt>=0 && ember$metal$property_get$$get(this, 'hasEnumerableObservers')) {
              removing = [];
              lim = startIdx+removeAmt;
              for(var idx=startIdx;idx<lim;idx++) removing.push(this.objectAt(idx));
            } else {
              removing = removeAmt;
            }

            this.enumerableContentWillChange(removing, addAmt);

            return this;
          },

          /**
            If you are implementing an object that supports `Ember.Array`, call this
            method just after the array content changes to notify any observers and
            invalidate any related properties. Pass the starting index of the change
            as well as a delta of the amounts to change.

            @method arrayContentDidChange
            @param {Number} startIdx The starting index in the array that did change.
            @param {Number} removeAmt The number of items that were removed. If you
              pass `null` assumes 0
            @param {Number} addAmt The number of items that were added. If you
              pass `null` assumes 0.
            @return {Ember.Array} receiver
          */
          arrayContentDidChange: function(startIdx, removeAmt, addAmt) {

            // if no args are passed assume everything changes
            if (startIdx===undefined) {
              startIdx = 0;
              removeAmt = addAmt = -1;
            } else {
              if (removeAmt === undefined) removeAmt=-1;
              if (addAmt    === undefined) addAmt=-1;
            }

            var adding, lim;
            if (startIdx>=0 && addAmt>=0 && ember$metal$property_get$$get(this, 'hasEnumerableObservers')) {
              adding = [];
              lim = startIdx+addAmt;
              for(var idx=startIdx;idx<lim;idx++) adding.push(this.objectAt(idx));
            } else {
              adding = addAmt;
            }

            this.enumerableContentDidChange(removeAmt, adding);
            ember$metal$events$$sendEvent(this, '@array:change', [this, startIdx, removeAmt, addAmt]);

            var length      = ember$metal$property_get$$get(this, 'length'),
                cachedFirst = ember$metal$computed$$cacheFor(this, 'firstObject'),
                cachedLast  = ember$metal$computed$$cacheFor(this, 'lastObject');
            if (this.objectAt(0) !== cachedFirst) {
              ember$metal$property_events$$propertyWillChange(this, 'firstObject');
              ember$metal$property_events$$propertyDidChange(this, 'firstObject');
            }
            if (this.objectAt(length-1) !== cachedLast) {
              ember$metal$property_events$$propertyWillChange(this, 'lastObject');
              ember$metal$property_events$$propertyDidChange(this, 'lastObject');
            }

            return this;
          },

          // ..........................................................
          // ENUMERATED PROPERTIES
          //

          /**
            Returns a special object that can be used to observe individual properties
            on the array. Just get an equivalent property on this object and it will
            return an enumerable that maps automatically to the named key on the
            member objects.

            If you merely want to watch for any items being added or removed to the array,
            use the `[]` property instead of `@each`.

            @property @each
          */
          '@each': ember$metal$computed$$computed(function() {
            if (!this.__each) {
              // ES6TODO: GRRRRR
              var EachProxy = requireModule('ember-runtime/system/each_proxy')['EachProxy'];

              this.__each = new EachProxy(this);
            }

            return this.__each;
          })
        });
    }).call(this);

    (function() {
        /**
        @module ember
        @submodule ember-runtime
        */

        var forEach = ember$metal$enumerable_utils$$default.forEach;

        ember$runtime$mixins$mutable_enumerable$$default = ember$metal$mixin$$Mixin.create(ember$runtime$mixins$enumerable$$default, {

          /**
            __Required.__ You must implement this method to apply this mixin.

            Attempts to add the passed object to the receiver if the object is not
            already present in the collection. If the object is present, this method
            has no effect.

            If the passed object is of a type not supported by the receiver,
            then this method should raise an exception.

            @method addObject
            @param {Object} object The object to add to the enumerable.
            @return {Object} the passed object
          */
          addObject: ember$metal$mixin$$required(Function),

          /**
            Adds each object in the passed enumerable to the receiver.

            @method addObjects
            @param {Ember.Enumerable} objects the objects to add.
            @return {Object} receiver
          */
          addObjects: function(objects) {
            ember$metal$property_events$$beginPropertyChanges(this);
            forEach(objects, function(obj) { this.addObject(obj); }, this);
            ember$metal$property_events$$endPropertyChanges(this);
            return this;
          },

          /**
            __Required.__ You must implement this method to apply this mixin.

            Attempts to remove the passed object from the receiver collection if the
            object is present in the collection. If the object is not present,
            this method has no effect.

            If the passed object is of a type not supported by the receiver,
            then this method should raise an exception.

            @method removeObject
            @param {Object} object The object to remove from the enumerable.
            @return {Object} the passed object
          */
          removeObject: ember$metal$mixin$$required(Function),


          /**
            Removes each object in the passed enumerable from the receiver.

            @method removeObjects
            @param {Ember.Enumerable} objects the objects to remove
            @return {Object} receiver
          */
          removeObjects: function(objects) {
            ember$metal$property_events$$beginPropertyChanges(this);
            for (var i = objects.length - 1; i >= 0; i--) {
              this.removeObject(objects[i]);
            }
            ember$metal$property_events$$endPropertyChanges(this);
            return this;
          }
        });
    }).call(this);

    (function() {
        var OUT_OF_RANGE_EXCEPTION = "Index out of range";
        var EMPTY = [];

        ember$runtime$mixins$mutable_array$$default = ember$metal$mixin$$Mixin.create(ember$runtime$mixins$array$$default, ember$runtime$mixins$mutable_enumerable$$default, {

          /**
            __Required.__ You must implement this method to apply this mixin.

            This is one of the primitives you must implement to support `Ember.Array`.
            You should replace amt objects started at idx with the objects in the
            passed array. You should also call `this.enumerableContentDidChange()`

            @method replace
            @param {Number} idx Starting index in the array to replace. If
              idx >= length, then append to the end of the array.
            @param {Number} amt Number of elements that should be removed from
              the array, starting at *idx*.
            @param {Array} objects An array of zero or more objects that should be
              inserted into the array at *idx*
          */
          replace: ember$metal$mixin$$required(),

          /**
            Remove all elements from the array. This is useful if you
            want to reuse an existing array without having to recreate it.

            ```javascript
            var colors = ["red", "green", "blue"];
            color.length();   //  3
            colors.clear();   //  []
            colors.length();  //  0
            ```

            @method clear
            @return {Ember.Array} An empty Array.
          */
          clear: function () {
            var len = ember$metal$property_get$$get(this, 'length');
            if (len === 0) return this;
            this.replace(0, len, EMPTY);
            return this;
          },

          /**
            This will use the primitive `replace()` method to insert an object at the
            specified index.

            ```javascript
            var colors = ["red", "green", "blue"];
            colors.insertAt(2, "yellow");  // ["red", "green", "yellow", "blue"]
            colors.insertAt(5, "orange");  // Error: Index out of range
            ```

            @method insertAt
            @param {Number} idx index of insert the object at.
            @param {Object} object object to insert
            @return {Ember.Array} receiver
          */
          insertAt: function(idx, object) {
            if (idx > ember$metal$property_get$$get(this, 'length')) throw new ember$metal$error$$default(OUT_OF_RANGE_EXCEPTION);
            this.replace(idx, 0, [object]);
            return this;
          },

          /**
            Remove an object at the specified index using the `replace()` primitive
            method. You can pass either a single index, or a start and a length.

            If you pass a start and length that is beyond the
            length this method will throw an `OUT_OF_RANGE_EXCEPTION`.

            ```javascript
            var colors = ["red", "green", "blue", "yellow", "orange"];
            colors.removeAt(0);     // ["green", "blue", "yellow", "orange"]
            colors.removeAt(2, 2);  // ["green", "blue"]
            colors.removeAt(4, 2);  // Error: Index out of range
            ```

            @method removeAt
            @param {Number} start index, start of range
            @param {Number} len length of passing range
            @return {Ember.Array} receiver
          */
          removeAt: function(start, len) {
            if ('number' === typeof start) {

              if ((start < 0) || (start >= ember$metal$property_get$$get(this, 'length'))) {
                throw new ember$metal$error$$default(OUT_OF_RANGE_EXCEPTION);
              }

              // fast case
              if (len === undefined) len = 1;
              this.replace(start, len, EMPTY);
            }

            return this;
          },

          /**
            Push the object onto the end of the array. Works just like `push()` but it
            is KVO-compliant.

            ```javascript
            var colors = ["red", "green"];
            colors.pushObject("black");     // ["red", "green", "black"]
            colors.pushObject(["yellow"]);  // ["red", "green", ["yellow"]]
            ```

            @method pushObject
            @param {*} obj object to push
            @return object same object passed as a param
          */
          pushObject: function(obj) {
            this.insertAt(ember$metal$property_get$$get(this, 'length'), obj);
            return obj;
          },

          /**
            Add the objects in the passed numerable to the end of the array. Defers
            notifying observers of the change until all objects are added.

            ```javascript
            var colors = ["red"];
            colors.pushObjects(["yellow", "orange"]);  // ["red", "yellow", "orange"]
            ```

            @method pushObjects
            @param {Ember.Enumerable} objects the objects to add
            @return {Ember.Array} receiver
          */
          pushObjects: function(objects) {
            if (!(ember$runtime$mixins$enumerable$$default.detect(objects) || ember$metal$utils$$isArray(objects))) {
              throw new TypeError("Must pass Ember.Enumerable to Ember.MutableArray#pushObjects");
            }
            this.replace(ember$metal$property_get$$get(this, 'length'), 0, objects);
            return this;
          },

          /**
            Pop object from array or nil if none are left. Works just like `pop()` but
            it is KVO-compliant.

            ```javascript
            var colors = ["red", "green", "blue"];
            colors.popObject();   // "blue"
            console.log(colors);  // ["red", "green"]
            ```

            @method popObject
            @return object
          */
          popObject: function() {
            var len = ember$metal$property_get$$get(this, 'length');
            if (len === 0) return null;

            var ret = this.objectAt(len-1);
            this.removeAt(len-1, 1);
            return ret;
          },

          /**
            Shift an object from start of array or nil if none are left. Works just
            like `shift()` but it is KVO-compliant.

            ```javascript
            var colors = ["red", "green", "blue"];
            colors.shiftObject();  // "red"
            console.log(colors);   // ["green", "blue"]
            ```

            @method shiftObject
            @return object
          */
          shiftObject: function() {
            if (ember$metal$property_get$$get(this, 'length') === 0) return null;
            var ret = this.objectAt(0);
            this.removeAt(0);
            return ret;
          },

          /**
            Unshift an object to start of array. Works just like `unshift()` but it is
            KVO-compliant.

            ```javascript
            var colors = ["red"];
            colors.unshiftObject("yellow");    // ["yellow", "red"]
            colors.unshiftObject(["black"]);   // [["black"], "yellow", "red"]
            ```

            @method unshiftObject
            @param {*} obj object to unshift
            @return object same object passed as a param
          */
          unshiftObject: function(obj) {
            this.insertAt(0, obj);
            return obj;
          },

          /**
            Adds the named objects to the beginning of the array. Defers notifying
            observers until all objects have been added.

            ```javascript
            var colors = ["red"];
            colors.unshiftObjects(["black", "white"]);   // ["black", "white", "red"]
            colors.unshiftObjects("yellow"); // Type Error: 'undefined' is not a function
            ```

            @method unshiftObjects
            @param {Ember.Enumerable} objects the objects to add
            @return {Ember.Array} receiver
          */
          unshiftObjects: function(objects) {
            this.replace(0, 0, objects);
            return this;
          },

          /**
            Reverse objects in the array. Works just like `reverse()` but it is
            KVO-compliant.

            @method reverseObjects
            @return {Ember.Array} receiver
           */
          reverseObjects: function() {
            var len = ember$metal$property_get$$get(this, 'length');
            if (len === 0) return this;
            var objects = this.toArray().reverse();
            this.replace(0, len, objects);
            return this;
          },

          /**
            Replace all the the receiver's content with content of the argument.
            If argument is an empty array receiver will be cleared.

            ```javascript
            var colors = ["red", "green", "blue"];
            colors.setObjects(["black", "white"]);  // ["black", "white"]
            colors.setObjects([]);                  // []
            ```

            @method setObjects
            @param {Ember.Array} objects array whose content will be used for replacing
                the content of the receiver
            @return {Ember.Array} receiver with the new content
           */
          setObjects: function(objects) {
            if (objects.length === 0) return this.clear();

            var len = ember$metal$property_get$$get(this, 'length');
            this.replace(0, len, objects);
            return this;
          },

          // ..........................................................
          // IMPLEMENT Ember.MutableEnumerable
          //

          /**
            Remove all occurances of an object in the array.

            ```javascript
            var cities = ["Chicago", "Berlin", "Lima", "Chicago"];
            cities.removeObject("Chicago");  // ["Berlin", "Lima"]
            cities.removeObject("Lima");     // ["Berlin"]
            cities.removeObject("Tokyo")     // ["Berlin"]
            ```

            @method removeObject
            @param {*} obj object to remove
            @return {Ember.Array} receiver
          */
          removeObject: function(obj) {
            var loc = ember$metal$property_get$$get(this, 'length') || 0;
            while(--loc >= 0) {
              var curObject = this.objectAt(loc);
              if (curObject === obj) this.removeAt(loc);
            }
            return this;
          },

          /**
            Push the object onto the end of the array if it is not already
            present in the array.

            ```javascript
            var cities = ["Chicago", "Berlin"];
            cities.addObject("Lima");    // ["Chicago", "Berlin", "Lima"]
            cities.addObject("Berlin");  // ["Chicago", "Berlin", "Lima"]
            ```

            @method addObject
            @param {*} obj object to add, if not already present
            @return {Ember.Array} receiver
          */
          addObject: function(obj) {
            if (!this.contains(obj)) this.pushObject(obj);
            return this;
          }

        });
    }).call(this);

    (function() {
        ember$runtime$mixins$freezable$$Freezable = ember$metal$mixin$$Mixin.create({

          /**
            Set to `true` when the object is frozen. Use this property to detect
            whether your object is frozen or not.

            @property isFrozen
            @type Boolean
          */
          isFrozen: false,

          /**
            Freezes the object. Once this method has been called the object should
            no longer allow any properties to be edited.

            @method freeze
            @return {Object} receiver
          */
          freeze: function() {
            if (ember$metal$property_get$$get(this, 'isFrozen')) return this;
            ember$metal$property_set$$set(this, 'isFrozen', true);
            return this;
          }

        });

        ember$runtime$mixins$freezable$$FROZEN_ERROR = "Frozen object cannot be modified.";
    }).call(this);

    (function() {
        ember$runtime$mixins$copyable$$default = ember$metal$mixin$$Mixin.create({
          /**
            Override to return a copy of the receiver. Default implementation raises
            an exception.

            @method copy
            @param {Boolean} deep if `true`, a deep copy of the object should be made
            @return {Object} copy of receiver
          */
          copy: ember$metal$mixin$$required(Function),

          /**
            If the object implements `Ember.Freezable`, then this will return a new
            copy if the object is not frozen and the receiver if the object is frozen.

            Raises an exception if you try to call this method on a object that does
            not support freezing.

            You should use this method whenever you want a copy of a freezable object
            since a freezable object can simply return itself without actually
            consuming more memory.

            @method frozenCopy
            @return {Object} copy of receiver or receiver
          */
          frozenCopy: function() {
            if (ember$runtime$mixins$freezable$$Freezable && ember$runtime$mixins$freezable$$Freezable.detect(this)) {
              return ember$metal$property_get$$get(this, 'isFrozen') ? this : this.copy().freeze();
            } else {
              throw new ember$metal$error$$default(ember$runtime$system$string$$fmt("%@ does not support freezing", [this]));
            }
          }
        });
    }).call(this);

    (function() {
        var indexOf = ember$metal$enumerable_utils$$default.indexOf;

        function _copy(obj, deep, seen, copies) {
          var ret, loc, key;

          // primitive data types are immutable, just return them.
          if ('object' !== typeof obj || obj===null) return obj;

          // avoid cyclical loops
          if (deep && (loc=indexOf(seen, obj))>=0) return copies[loc];

          Ember.assert('Cannot clone an Ember.Object that does not implement Ember.Copyable', !(obj instanceof ember$runtime$system$object$$default) || (ember$runtime$mixins$copyable$$default && ember$runtime$mixins$copyable$$default.detect(obj)));

          // IMPORTANT: this specific test will detect a native array only. Any other
          // object will need to implement Copyable.
          if (ember$metal$utils$$typeOf(obj) === 'array') {
            ret = obj.slice();
            if (deep) {
              loc = ret.length;
              while(--loc>=0) ret[loc] = _copy(ret[loc], deep, seen, copies);
            }
          } else if (ember$runtime$mixins$copyable$$default && ember$runtime$mixins$copyable$$default.detect(obj)) {
            ret = obj.copy(deep, seen, copies);
          } else if (obj instanceof Date) {
            ret = new Date(obj.getTime());
          } else {
            ret = {};
            for(key in obj) {
              if (!obj.hasOwnProperty(key)) continue;

              // Prevents browsers that don't respect non-enumerability from
              // copying internal Ember properties
              if (key.substring(0,2) === '__') continue;

              ret[key] = deep ? _copy(obj[key], deep, seen, copies) : obj[key];
            }
          }

          if (deep) {
            seen.push(obj);
            copies.push(ret);
          }

          return ret;
        }

        ember$runtime$copy$$default = function copy(obj, deep) {
          // fast paths
          if ('object' !== typeof obj || obj===null) return obj; // can't copy primitives
          if (ember$runtime$mixins$copyable$$default && ember$runtime$mixins$copyable$$default.detect(obj)) return obj.copy(deep);
          return _copy(obj, deep, deep ? [] : null, deep ? [] : null);
        };
    }).call(this);

    (function() {
        var replace = ember$metal$enumerable_utils$$default._replace;
        var forEach = ember$metal$enumerable_utils$$default.forEach;

        ember$runtime$system$native_array$$NativeArray = ember$metal$mixin$$Mixin.create(ember$runtime$mixins$mutable_array$$default, ember$runtime$mixins$observable$$default, ember$runtime$mixins$copyable$$default, {

          // because length is a built-in property we need to know to just get the
          // original property.
          get: function(key) {
            if (key==='length') return this.length;
            else if ('number' === typeof key) return this[key];
            else return this._super(key);
          },

          objectAt: function(idx) {
            return this[idx];
          },

          // primitive for array support.
          replace: function(idx, amt, objects) {

            if (this.isFrozen) throw ember$runtime$mixins$freezable$$FROZEN_ERROR;

            // if we replaced exactly the same number of items, then pass only the
            // replaced range. Otherwise, pass the full remaining array length
            // since everything has shifted
            var len = objects ? ember$metal$property_get$$get(objects, 'length') : 0;
            this.arrayContentWillChange(idx, amt, len);

            if (len === 0) {
              this.splice(idx, amt);
            } else {
              replace(this, idx, amt, objects);
            }

            this.arrayContentDidChange(idx, amt, len);
            return this;
          },

          // If you ask for an unknown property, then try to collect the value
          // from member items.
          unknownProperty: function(key, value) {
            var ret;// = this.reducedProperty(key, value) ;
            if ((value !== undefined) && ret === undefined) {
              ret = this[key] = value;
            }
            return ret ;
          },

          // If browser did not implement indexOf natively, then override with
          // specialized version
          indexOf: function(object, startAt) {
            var idx, len = this.length;

            if (startAt === undefined) startAt = 0;
            else startAt = (startAt < 0) ? Math.ceil(startAt) : Math.floor(startAt);
            if (startAt < 0) startAt += len;

            for(idx=startAt;idx<len;idx++) {
              if (this[idx] === object) return idx ;
            }
            return -1;
          },

          lastIndexOf: function(object, startAt) {
            var idx, len = this.length;

            if (startAt === undefined) startAt = len-1;
            else startAt = (startAt < 0) ? Math.ceil(startAt) : Math.floor(startAt);
            if (startAt < 0) startAt += len;

            for(idx=startAt;idx>=0;idx--) {
              if (this[idx] === object) return idx ;
            }
            return -1;
          },

          copy: function(deep) {
            if (deep) {
              return this.map(function(item) { return ember$runtime$copy$$default(item, true); });
            }

            return this.slice();
          }
        });

        // Remove any methods implemented natively so we don't override them
        var ignore = ['length'];

        forEach(ember$runtime$system$native_array$$NativeArray.keys(), function(methodName) {
          if (Array.prototype[methodName]) ignore.push(methodName);
        });

        if (ignore.length>0) {
          ember$runtime$system$native_array$$NativeArray = ember$runtime$system$native_array$$NativeArray.without.apply(ember$runtime$system$native_array$$NativeArray, ignore);
        }

        ember$runtime$system$native_array$$A = function(arr) {
          if (arr === undefined) { arr = []; }
          return ember$runtime$mixins$array$$default.detect(arr) ? arr : ember$runtime$system$native_array$$NativeArray.apply(arr);
        };

        /**
          Activates the mixin on the Array.prototype if not already applied. Calling
          this method more than once is safe. This will be called when ember is loaded
          unless you have `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array`
          set to `false`.

          Example

          ```js
          if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.Array) {
            Ember.NativeArray.activate();
          }
          ```

          @method activate
          @for Ember.NativeArray
          @static
          @return {void}
        */
        ember$runtime$system$native_array$$NativeArray.activate = function() {
          ember$runtime$system$native_array$$NativeArray.apply(Array.prototype);

          ember$runtime$system$native_array$$A = function(arr) { return arr || []; };
        };

        if (ember$metal$core$$default.EXTEND_PROTOTYPES === true || ember$metal$core$$default.EXTEND_PROTOTYPES.Array) {
          ember$runtime$system$native_array$$NativeArray.activate();
        }

        // ES6TODO: Setting A onto the object returned by ember-metal/core to avoid circles
        ember$metal$core$$default.A = ember$runtime$system$native_array$$A;

        ember$runtime$system$native_array$$default = ember$runtime$system$native_array$$NativeArray;
    }).call(this);

    (function() {
        /**
          The purpose of the Ember Instrumentation module is
          to provide efficient, general-purpose instrumentation
          for Ember.

          Subscribe to a listener by using `Ember.subscribe`:

          ```javascript
          Ember.subscribe("render", {
            before: function(name, timestamp, payload) {

            },

            after: function(name, timestamp, payload) {

            }
          });
          ```

          If you return a value from the `before` callback, that same
          value will be passed as a fourth parameter to the `after`
          callback.

          Instrument a block of code by using `Ember.instrument`:

          ```javascript
          Ember.instrument("render.handlebars", payload, function() {
            // rendering logic
          }, binding);
          ```

          Event names passed to `Ember.instrument` are namespaced
          by periods, from more general to more specific. Subscribers
          can listen for events by whatever level of granularity they
          are interested in.

          In the above example, the event is `render.handlebars`,
          and the subscriber listened for all events beginning with
          `render`. It would receive callbacks for events named
          `render`, `render.handlebars`, `render.container`, or
          even `render.handlebars.layout`.

          @class Instrumentation
          @namespace Ember
          @static
        */
        var subscribers = [], cache = {};

        var populateListeners = function(name) {
          var listeners = [], subscriber;

          for (var i=0, l=subscribers.length; i<l; i++) {
            subscriber = subscribers[i];
            if (subscriber.regex.test(name)) {
              listeners.push(subscriber.object);
            }
          }

          cache[name] = listeners;
          return listeners;
        };

        var time = (function() {
          var perf = 'undefined' !== typeof window ? window.performance || {} : {};
          var fn = perf.now || perf.mozNow || perf.webkitNow || perf.msNow || perf.oNow;
          // fn.bind will be available in all the browsers that support the advanced window.performance... ;-)
          return fn ? fn.bind(perf) : function() { return +new Date(); };
        })();

        function instrument(name, payload, callback, binding) {
          var listeners = cache[name], timeName, ret;

          // ES6TODO: Docs. What is this?
          if (ember$metal$core$$default.STRUCTURED_PROFILE) {
            timeName = name + ": " + payload.object;
            console.time(timeName);
          }

          if (!listeners) {
            listeners = populateListeners(name);
          }

          if (listeners.length === 0) {
            ret = callback.call(binding);
            if (ember$metal$core$$default.STRUCTURED_PROFILE) { console.timeEnd(timeName); }
            return ret;
          }

          var beforeValues = [], listener, i, l;

          function tryable() {
            for (i=0, l=listeners.length; i<l; i++) {
              listener = listeners[i];
              beforeValues[i] = listener.before(name, time(), payload);
            }

            return callback.call(binding);
          }

          function catchable(e) {
            payload = payload || {};
            payload.exception = e;
          }

          function finalizer() {
            for (i=0, l=listeners.length; i<l; i++) {
              listener = listeners[i];
              listener.after(name, time(), payload, beforeValues[i]);
            }

            if (ember$metal$core$$default.STRUCTURED_PROFILE) {
              console.timeEnd(timeName);
            }
          }

          return ember$metal$utils$$tryCatchFinally(tryable, catchable, finalizer);
        }

        ember$metal$instrumentation$$instrument = instrument;

        function subscribe(pattern, object) {
          var paths = pattern.split("."), path, regex = [];

          for (var i=0, l=paths.length; i<l; i++) {
            path = paths[i];
            if (path === "*") {
              regex.push("[^\\.]*");
            } else {
              regex.push(path);
            }
          }

          regex = regex.join("\\.");
          regex = regex + "(\\..*)?";

          var subscriber = {
            pattern: pattern,
            regex: new RegExp("^" + regex + "$"),
            object: object
          };

          subscribers.push(subscriber);
          cache = {};

          return subscriber;
        }

        ember$metal$instrumentation$$subscribe = subscribe;

        function unsubscribe(subscriber) {
          var index;

          for (var i=0, l=subscribers.length; i<l; i++) {
            if (subscribers[i] === subscriber) {
              index = i;
            }
          }

          subscribers.splice(index, 1);
          cache = {};
        }

        ember$metal$instrumentation$$unsubscribe = unsubscribe;

        function reset() {
          subscribers = [];
          cache = {};
        }

        ember$metal$instrumentation$$reset = reset;
    }).call(this);

    (function() {
        ember$views$views$states$default$$default = {
          // appendChild is only legal while rendering the buffer.
          appendChild: function() {
            throw new ember$metal$error$$default("You can't use appendChild outside of the rendering process");
          },

          $: function() {
            return undefined;
          },

          getElement: function() {
            return null;
          },

          // Handle events from `Ember.EventDispatcher`
          handleEvent: function() {
            return true; // continue event propagation
          },

          destroyElement: function(view) {
            ember$metal$property_set$$set(view, 'element', null);
            if (view._scheduledInsert) {
              ember$metal$run_loop$$default.cancel(view._scheduledInsert);
              view._scheduledInsert = null;
            }
            return view;
          },

          renderToBufferIfNeeded: function () {
            return false;
          },

          rerender: ember$metal$core$$default.K,
          invokeObserver: ember$metal$core$$default.K
        };
    }).call(this);

    (function() {
        /**
        @module ember
        @submodule ember-views
        */
        var preRender = ember$metal$platform$$create(ember$views$views$states$default$$default);

        ember$metal$merge$$default(preRender, {
          // a view leaves the preRender state once its element has been
          // created (createElement).
          insertElement: function(view, fn) {
            view.createElement();
            var viewCollection = view.viewHierarchyCollection();

            viewCollection.trigger('willInsertElement');

            fn.call(view);

            // We transition to `inDOM` if the element exists in the DOM
            var element = view.get('element');
            if (document.body.contains(element)) {
              viewCollection.transitionTo('inDOM', false);
              viewCollection.trigger('didInsertElement');
            }
          },

          renderToBufferIfNeeded: function(view, buffer) {
            view.renderToBuffer(buffer);
            return true;
          },

          empty: Ember.K,

          setElement: function(view, value) {
            if (value !== null) {
              view.transitionTo('hasElement');
            }
            return value;
          }
        });

        ember$views$views$states$pre_render$$default = preRender;
    }).call(this);

    (function() {
        /**
        @module ember
        @submodule ember-views
        */

        var inBuffer = ember$metal$platform$$create(ember$views$views$states$default$$default);

        ember$metal$merge$$default(inBuffer, {
          $: function(view, sel) {
            // if we don't have an element yet, someone calling this.$() is
            // trying to update an element that isn't in the DOM. Instead,
            // rerender the view to allow the render method to reflect the
            // changes.
            view.rerender();
            return ember$metal$core$$default.$();
          },

          // when a view is rendered in a buffer, rerendering it simply
          // replaces the existing buffer with a new one
          rerender: function(view) {
            throw new ember$metal$error$$default("Something you did caused a view to re-render after it rendered but before it was inserted into the DOM.");
          },

          // when a view is rendered in a buffer, appending a child
          // view will render that view and append the resulting
          // buffer into its buffer.
          appendChild: function(view, childView, options) {
            var buffer = view.buffer, _childViews = view._childViews;

            childView = view.createChildView(childView, options);
            if (!_childViews.length) { _childViews = view._childViews = _childViews.slice(); }
            _childViews.push(childView);

            childView.renderToBuffer(buffer);

            view.propertyDidChange('childViews');

            return childView;
          },

          // when a view is rendered in a buffer, destroying the
          // element will simply destroy the buffer and put the
          // state back into the preRender state.
          destroyElement: function(view) {
            view.clearBuffer();
            var viewCollection = view._notifyWillDestroyElement();
            viewCollection.transitionTo('preRender', false);

            return view;
          },

          empty: function() {
            ember$metal$core$$default.assert("Emptying a view in the inBuffer state is not allowed and " +
                         "should not happen under normal circumstances. Most likely " +
                         "there is a bug in your application. This may be due to " +
                         "excessive property change notifications.");
          },

          renderToBufferIfNeeded: function (view, buffer) {
            return false;
          },

          // It should be impossible for a rendered view to be scheduled for
          // insertion.
          insertElement: function() {
            throw new ember$metal$error$$default("You can't insert an element that has already been rendered");
          },

          setElement: function(view, value) {
            if (value === null) {
              view.transitionTo('preRender');
            } else {
              view.clearBuffer();
              view.transitionTo('hasElement');
            }

            return value;
          },

          invokeObserver: function(target, observer) {
            observer.call(target);
          }
        });

        ember$views$views$states$in_buffer$$default = inBuffer;
    }).call(this);

    (function() {
        var hasElement = ember$metal$platform$$create(ember$views$views$states$default$$default);

        ember$metal$merge$$default(hasElement, {
          $: function(view, sel) {
            var elem = ember$metal$property_get$$get(view, 'element');
            return sel ? ember$views$system$jquery$$default(sel, elem) : ember$views$system$jquery$$default(elem);
          },

          getElement: function(view) {
            var parent = ember$metal$property_get$$get(view, 'parentView');
            if (parent) { parent = ember$metal$property_get$$get(parent, 'element'); }
            if (parent) { return view.findElementInParentElement(parent); }
            return ember$views$system$jquery$$default("#" + ember$metal$property_get$$get(view, 'elementId'))[0];
          },

          setElement: function(view, value) {
            if (value === null) {
              view.transitionTo('preRender');
            } else {
              throw new ember$metal$error$$default("You cannot set an element to a non-null value when the element is already in the DOM.");
            }

            return value;
          },

          // once the view has been inserted into the DOM, rerendering is
          // deferred to allow bindings to synchronize.
          rerender: function(view) {
            view.triggerRecursively('willClearRender');

            view.clearRenderedChildren();

            view.domManager.replace(view);
            return view;
          },

          // once the view is already in the DOM, destroying it removes it
          // from the DOM, nukes its element, and puts it back into the
          // preRender state if inDOM.

          destroyElement: function(view) {
            view._notifyWillDestroyElement();
            view.domManager.remove(view);
            ember$metal$property_set$$set(view, 'element', null);
            if (view._scheduledInsert) {
              ember$metal$run_loop$$default.cancel(view._scheduledInsert);
              view._scheduledInsert = null;
            }
            return view;
          },

          empty: function(view) {
            var _childViews = view._childViews, len, idx;
            if (_childViews) {
              len = _childViews.length;
              for (idx = 0; idx < len; idx++) {
                _childViews[idx]._notifyWillDestroyElement();
              }
            }
            view.domManager.empty(view);
          },

          // Handle events from `Ember.EventDispatcher`
          handleEvent: function(view, eventName, evt) {
            if (view.has(eventName)) {
              // Handler should be able to re-dispatch events, so we don't
              // preventDefault or stopPropagation.
              return view.trigger(eventName, evt);
            } else {
              return true; // continue event propagation
            }
          },

          invokeObserver: function(target, observer) {
            observer.call(target);
          }
        });

        ember$views$views$states$has_element$$default = hasElement;
    }).call(this);

    (function() {
        /**
        @module ember
        @submodule ember-views
        */

        var inDOM = ember$metal$platform$$create(ember$views$views$states$has_element$$default);

        ember$metal$merge$$default(inDOM, {
          enter: function(view) {
            // Register the view for event handling. This hash is used by
            // Ember.EventDispatcher to dispatch incoming events.
            if (!view.isVirtual) {
              ember$metal$core$$default.assert("Attempted to register a view with an id already in use: "+view.elementId, !ember$views$views$view$$View.views[view.elementId]);
              ember$views$views$view$$View.views[view.elementId] = view;
            }

            view.addBeforeObserver('elementId', function() {
              throw new ember$metal$error$$default("Changing a view's elementId after creation is not allowed");
            });
          },

          exit: function(view) {
            if (!ember$views$views$view$$View) { ember$views$views$view$$View = requireModule('ember-views/views/view')["View"]; } // ES6TODO: this sucks. Have to avoid cycles...

            if (!this.isVirtual) delete ember$views$views$view$$View.views[view.elementId];
          },

          insertElement: function(view, fn) {
            throw new ember$metal$error$$default("You can't insert an element into the DOM that has already been inserted");
          }
        });

        ember$views$views$states$in_dom$$default = inDOM;
    }).call(this);

    (function() {
        /**
        @module ember
        @submodule ember-views
        */

        var destroyingError = "You can't call %@ on a view being destroyed";

        var destroying = ember$metal$platform$$create(ember$views$views$states$default$$default);

        ember$metal$merge$$default(destroying, {
          appendChild: function() {
            throw new ember$metal$error$$default(ember$runtime$system$string$$fmt(destroyingError, ['appendChild']));
          },
          rerender: function() {
            throw new ember$metal$error$$default(ember$runtime$system$string$$fmt(destroyingError, ['rerender']));
          },
          destroyElement: function() {
            throw new ember$metal$error$$default(ember$runtime$system$string$$fmt(destroyingError, ['destroyElement']));
          },
          empty: function() {
            throw new ember$metal$error$$default(ember$runtime$system$string$$fmt(destroyingError, ['empty']));
          },

          setElement: function() {
            throw new ember$metal$error$$default(ember$runtime$system$string$$fmt(destroyingError, ["set('element', ...)"]));
          },

          renderToBufferIfNeeded: function() {
            return false;
          },

          // Since element insertion is scheduled, don't do anything if
          // the view has been destroyed between scheduling and execution
          insertElement: Ember.K
        });

        ember$views$views$states$destroying$$default = destroying;
    }).call(this);

    (function() {
        function cloneStates(from) {
          var into = {};

          into._default = {};
          into.preRender = ember$metal$platform$$create(into._default);
          into.destroying = ember$metal$platform$$create(into._default);
          into.inBuffer = ember$metal$platform$$create(into._default);
          into.hasElement = ember$metal$platform$$create(into._default);
          into.inDOM = ember$metal$platform$$create(into.hasElement);

          for (var stateName in from) {
            if (!from.hasOwnProperty(stateName)) { continue; }
            ember$metal$merge$$default(into[stateName], from[stateName]);
          }

          return into;
        }

        ember$views$views$states$$cloneStates = cloneStates;

        ember$views$views$states$$states = {
          _default: ember$views$views$states$default$$default,
          preRender: ember$views$views$states$pre_render$$default,
          inDOM: ember$views$views$states$in_dom$$default,
          inBuffer: ember$views$views$states$in_buffer$$default,
          hasElement: ember$views$views$states$has_element$$default,
          destroying: ember$views$views$states$destroying$$default
        };
    }).call(this);

    (function() {
        // Add a new named queue for rendering views that happens
        // after bindings have synced, and a queue for scheduling actions
        // that that should occur after view rendering.
        var queues = ember$metal$run_loop$$default.queues;

        ember$metal$run_loop$$default._addQueue('render', 'actions');
        ember$metal$run_loop$$default._addQueue('afterRender', 'render');
    }).call(this);

    (function() {
        var a_forEach = ember$metal$enumerable_utils$$default.forEach,
            a_addObject = ember$metal$enumerable_utils$$default.addObject,
            a_removeObject = ember$metal$enumerable_utils$$default.removeObject;

        /**
        @module ember
        @submodule ember-views
        */

        var ContainerView;

        function nullViewsBuffer(view) {
          view.buffer = null;

        }

        function clearCachedElement(view) {
          ember$metal$utils$$meta(view).cache.element = undefined;
        }

        var childViewsProperty = ember$metal$computed$$computed(function() {
          var childViews = this._childViews, ret = ember$runtime$system$native_array$$A(), view = this;

          a_forEach(childViews, function(view) {
            var currentChildViews;
            if (view.isVirtual) {
              if (currentChildViews = ember$metal$property_get$$get(view, 'childViews')) {
                ret.pushObjects(currentChildViews);
              }
            } else {
              ret.push(view);
            }
          });

          ret.replace = function (idx, removedCount, addedViews) {
            if (!ContainerView) { ContainerView = requireModule('ember-views/views/container_view')['default']; } // ES6TODO: stupid circular dep

            if (view instanceof ContainerView) {
              ember$metal$core$$default.deprecate("Manipulating an Ember.ContainerView through its childViews property is deprecated. Please use the ContainerView instance itself as an Ember.MutableArray.");
              return view.replace(idx, removedCount, addedViews);
            }
            throw new ember$metal$error$$default("childViews is immutable");
          };

          return ret;
        });

        ember$metal$core$$default.warn("The VIEW_PRESERVES_CONTEXT flag has been removed and the functionality can no longer be disabled.", ember$metal$core$$default.ENV.VIEW_PRESERVES_CONTEXT !== false);

        /**
          Global hash of shared templates. This will automatically be populated
          by the build tools so that you can store your Handlebars templates in
          separate files that get loaded into JavaScript at buildtime.

          @property TEMPLATES
          @for Ember
          @type Hash
        */
        ember$metal$core$$default.TEMPLATES = {};

        ember$views$views$view$$CoreView = ember$runtime$system$object$$default.extend(ember$runtime$mixins$evented$$default, ember$runtime$mixins$action_handler$$default, {
          isView: true,

          _states: ember$views$views$states$$cloneStates(ember$views$views$states$$states),

          init: function() {
            this._super();
            this.transitionTo('preRender');
            this._isVisible = ember$metal$property_get$$get(this, 'isVisible');

            ember$metal$properties$$deprecateProperty(this, 'states', '_states');
            ember$metal$properties$$deprecateProperty(this, 'state', '_state');
          },

          /**
            If the view is currently inserted into the DOM of a parent view, this
            property will point to the parent of the view.

            @property parentView
            @type Ember.View
            @default null
          */
          parentView: ember$metal$computed$$computed('_parentView', function() {
            var parent = this._parentView;

            if (parent && parent.isVirtual) {
              return ember$metal$property_get$$get(parent, 'parentView');
            } else {
              return parent;
            }
          }),

          _state: null,

          _parentView: null,

          // return the current view, not including virtual views
          concreteView: ember$metal$computed$$computed('parentView', function() {
            if (!this.isVirtual) { return this; }
            else { return ember$metal$property_get$$get(this, 'parentView.concreteView'); }
          }),

          instrumentName: 'core_view',

          instrumentDetails: function(hash) {
            hash.object = this.toString();
            hash.containerKey = this._debugContainerKey;
            hash.view = this;
          },

          /**
            Invoked by the view system when this view needs to produce an HTML
            representation. This method will create a new render buffer, if needed,
            then apply any default attributes, such as class names and visibility.
            Finally, the `render()` method is invoked, which is responsible for
            doing the bulk of the rendering.

            You should not need to override this method; instead, implement the
            `template` property, or if you need more control, override the `render`
            method.

            @method renderToBuffer
            @param {Ember.RenderBuffer} buffer the render buffer. If no buffer is
              passed, a default buffer, using the current view's `tagName`, will
              be used.
            @private
          */
          renderToBuffer: function(parentBuffer, bufferOperation) {
            var name = 'render.' + this.instrumentName,
                details = {};

            this.instrumentDetails(details);

            return ember$metal$instrumentation$$instrument(name, details, function instrumentRenderToBuffer() {
              return this._renderToBuffer(parentBuffer, bufferOperation);
            }, this);
          },

          _renderToBuffer: function(parentBuffer, bufferOperation) {
            // If this is the top-most view, start a new buffer. Otherwise,
            // create a new buffer relative to the original using the
            // provided buffer operation (for example, `insertAfter` will
            // insert a new buffer after the "parent buffer").
            var tagName = this.tagName;

            if (tagName === null || tagName === undefined) {
              tagName = 'div';
            }

            var buffer = this.buffer = parentBuffer && parentBuffer.begin(tagName) || ember$views$system$render_buffer$$default(tagName);
            this.transitionTo('inBuffer', false);

            this.beforeRender(buffer);
            this.render(buffer);
            this.afterRender(buffer);

            return buffer;
          },

          /**
            Override the default event firing from `Ember.Evented` to
            also call methods with the given name.

            @method trigger
            @param name {String}
            @private
          */
          trigger: function() {
            this._super.apply(this, arguments);
            var name = arguments[0];
            var method = this[name];
            if (method) {
              var length = arguments.length;
              var args = new Array(length - 1);
              for (var i = 1; i < length; i++) {
                args[i - 1] = arguments[i];
              }
              return method.apply(this, args);
            }
          },

          deprecatedSendHandles: function(actionName) {
            return !!this[actionName];
          },

          deprecatedSend: function(actionName) {
            var args = [].slice.call(arguments, 1);
            ember$metal$core$$default.assert('' + this + " has the action " + actionName + " but it is not a function", typeof this[actionName] === 'function');
            ember$metal$core$$default.deprecate('Action handlers implemented directly on views are deprecated in favor of action handlers on an `actions` object ( action: `' + actionName + '` on ' + this + ')', false);
            this[actionName].apply(this, args);
            return;
          },

          has: function(name) {
            return ember$metal$utils$$typeOf(this[name]) === 'function' || this._super(name);
          },

          destroy: function() {
            var parent = this._parentView;

            if (!this._super()) { return; }

            // destroy the element -- this will avoid each child view destroying
            // the element over and over again...
            if (!this.removedFromDOM) { this.destroyElement(); }

            // remove from parent if found. Don't call removeFromParent,
            // as removeFromParent will try to remove the element from
            // the DOM again.
            if (parent) { parent.removeChild(this); }

            this.transitionTo('destroying', false);

            return this;
          },

          clearRenderedChildren: ember$metal$core$$default.K,
          triggerRecursively: ember$metal$core$$default.K,
          invokeRecursively: ember$metal$core$$default.K,
          transitionTo: ember$metal$core$$default.K,
          destroyElement: ember$metal$core$$default.K
        });

        ember$views$views$view$$ViewCollection = function(initialViews) {
          var views = this.views = initialViews || [];
          this.length = views.length;
        };

        ember$views$views$view$$ViewCollection.prototype = {
          length: 0,

          trigger: function(eventName) {
            var views = this.views, view;
            for (var i = 0, l = views.length; i < l; i++) {
              view = views[i];
              if (view.trigger) { view.trigger(eventName); }
            }
          },

          triggerRecursively: function(eventName) {
            var views = this.views;
            for (var i = 0, l = views.length; i < l; i++) {
              views[i].triggerRecursively(eventName);
            }
          },

          invokeRecursively: function(fn) {
            var views = this.views, view;

            for (var i = 0, l = views.length; i < l; i++) {
              view = views[i];
              fn(view);
            }
          },

          transitionTo: function(state, children) {
            var views = this.views;
            for (var i = 0, l = views.length; i < l; i++) {
              views[i].transitionTo(state, children);
            }
          },

          push: function() {
            this.length += arguments.length;
            var views = this.views;
            return views.push.apply(views, arguments);
          },

          objectAt: function(idx) {
            return this.views[idx];
          },

          forEach: function(callback) {
            var views = this.views;
            return a_forEach(views, callback);
          },

          clear: function() {
            this.length = 0;
            this.views.length = 0;
          }
        };

        var EMPTY_ARRAY = [];

        ember$views$views$view$$View = ember$views$views$view$$CoreView.extend({

          concatenatedProperties: ['classNames', 'classNameBindings', 'attributeBindings'],

          /**
            @property isView
            @type Boolean
            @default true
            @static
          */
          isView: true,

          // ..........................................................
          // TEMPLATE SUPPORT
          //

          /**
            The name of the template to lookup if no template is provided.

            By default `Ember.View` will lookup a template with this name in
            `Ember.TEMPLATES` (a shared global object).

            @property templateName
            @type String
            @default null
          */
          templateName: null,

          /**
            The name of the layout to lookup if no layout is provided.

            By default `Ember.View` will lookup a template with this name in
            `Ember.TEMPLATES` (a shared global object).

            @property layoutName
            @type String
            @default null
          */
          layoutName: null,

          /**
            Used to identify this view during debugging

            @property instrumentDisplay
            @type String
          */
          instrumentDisplay: ember$metal$computed$$computed(function() {
            if (this.helperName) {
              return '{{' + this.helperName + '}}';
            }
          }),

          /**
            The template used to render the view. This should be a function that
            accepts an optional context parameter and returns a string of HTML that
            will be inserted into the DOM relative to its parent view.

            In general, you should set the `templateName` property instead of setting
            the template yourself.

            @property template
            @type Function
          */
          template: ember$metal$computed$$computed('templateName', function(key, value) {
            if (value !== undefined) { return value; }

            var templateName = ember$metal$property_get$$get(this, 'templateName'),
                template = this.templateForName(templateName, 'template');

            ember$metal$core$$default.assert("You specified the templateName " + templateName + " for " + this + ", but it did not exist.", !templateName || template);

            return template || ember$metal$property_get$$get(this, 'defaultTemplate');
          }),

          /**
            The controller managing this view. If this property is set, it will be
            made available for use by the template.

            @property controller
            @type Object
          */
          controller: ember$metal$computed$$computed('_parentView', function(key) {
            var parentView = ember$metal$property_get$$get(this, '_parentView');
            return parentView ? ember$metal$property_get$$get(parentView, 'controller') : null;
          }),

          /**
            A view may contain a layout. A layout is a regular template but
            supersedes the `template` property during rendering. It is the
            responsibility of the layout template to retrieve the `template`
            property from the view (or alternatively, call `Handlebars.helpers.yield`,
            `{{yield}}`) to render it in the correct location.

            This is useful for a view that has a shared wrapper, but which delegates
            the rendering of the contents of the wrapper to the `template` property
            on a subclass.

            @property layout
            @type Function
          */
          layout: ember$metal$computed$$computed(function(key) {
            var layoutName = ember$metal$property_get$$get(this, 'layoutName'),
                layout = this.templateForName(layoutName, 'layout');

            ember$metal$core$$default.assert("You specified the layoutName " + layoutName + " for " + this + ", but it did not exist.", !layoutName || layout);

            return layout || ember$metal$property_get$$get(this, 'defaultLayout');
          }).property('layoutName'),

          _yield: function(context, options) {
            var template = ember$metal$property_get$$get(this, 'template');
            if (template) { template(context, options); }
          },

          templateForName: function(name, type) {
            if (!name) { return; }
            ember$metal$core$$default.assert("templateNames are not allowed to contain periods: "+name, name.indexOf('.') === -1);

            // the defaultContainer is deprecated
            var container = this.container || (container$container$$default && container$container$$default.defaultContainer);
            return container && container.lookup('template:' + name);
          },

          /**
            The object from which templates should access properties.

            This object will be passed to the template function each time the render
            method is called, but it is up to the individual function to decide what
            to do with it.

            By default, this will be the view's controller.

            @property context
            @type Object
          */
          context: ember$metal$computed$$computed(function(key, value) {
            if (arguments.length === 2) {
              ember$metal$property_set$$set(this, '_context', value);
              return value;
            } else {
              return ember$metal$property_get$$get(this, '_context');
            }
          }).volatile(),

          /**
            Private copy of the view's template context. This can be set directly
            by Handlebars without triggering the observer that causes the view
            to be re-rendered.

            The context of a view is looked up as follows:

            1. Supplied context (usually by Handlebars)
            2. Specified controller
            3. `parentView`'s context (for a child of a ContainerView)

            The code in Handlebars that overrides the `_context` property first
            checks to see whether the view has a specified controller. This is
            something of a hack and should be revisited.

            @property _context
            @private
          */
          _context: ember$metal$computed$$computed(function(key) {
            var parentView, controller;

            if (controller = ember$metal$property_get$$get(this, 'controller')) {
              return controller;
            }

            parentView = this._parentView;
            if (parentView) {
              return ember$metal$property_get$$get(parentView, '_context');
            }

            return null;
          }),

          /**
            If a value that affects template rendering changes, the view should be
            re-rendered to reflect the new value.

            @method _contextDidChange
            @private
          */
          _contextDidChange: ember$metal$mixin$$observer('context', function() {
            this.rerender();
          }),

          /**
            If `false`, the view will appear hidden in DOM.

            @property isVisible
            @type Boolean
            @default null
          */
          isVisible: true,

          /**
            Array of child views. You should never edit this array directly.
            Instead, use `appendChild` and `removeFromParent`.

            @property childViews
            @type Array
            @default []
            @private
          */
          childViews: childViewsProperty,

          _childViews: EMPTY_ARRAY,

          // When it's a virtual view, we need to notify the parent that their
          // childViews will change.
          _childViewsWillChange: ember$metal$mixin$$beforeObserver('childViews', function() {
            if (this.isVirtual) {
              var parentView = ember$metal$property_get$$get(this, 'parentView');
              if (parentView) { ember$metal$property_events$$propertyWillChange(parentView, 'childViews'); }
            }
          }),

          // When it's a virtual view, we need to notify the parent that their
          // childViews did change.
          _childViewsDidChange: ember$metal$mixin$$observer('childViews', function() {
            if (this.isVirtual) {
              var parentView = ember$metal$property_get$$get(this, 'parentView');
              if (parentView) { ember$metal$property_events$$propertyDidChange(parentView, 'childViews'); }
            }
          }),

          /**
            Return the nearest ancestor that is an instance of the provided
            class.

            @method nearestInstanceOf
            @param {Class} klass Subclass of Ember.View (or Ember.View itself)
            @return Ember.View
            @deprecated
          */
          nearestInstanceOf: function(klass) {
            ember$metal$core$$default.deprecate("nearestInstanceOf is deprecated and will be removed from future releases. Use nearestOfType.");
            var view = ember$metal$property_get$$get(this, 'parentView');

            while (view) {
              if (view instanceof klass) { return view; }
              view = ember$metal$property_get$$get(view, 'parentView');
            }
          },

          /**
            Return the nearest ancestor that is an instance of the provided
            class or mixin.

            @method nearestOfType
            @param {Class,Mixin} klass Subclass of Ember.View (or Ember.View itself),
                   or an instance of Ember.Mixin.
            @return Ember.View
          */
          nearestOfType: function(klass) {
            var view = ember$metal$property_get$$get(this, 'parentView'),
                isOfType = klass instanceof ember$metal$mixin$$Mixin ?
                           function(view) { return klass.detect(view); } :
                           function(view) { return klass.detect(view.constructor); };

            while (view) {
              if (isOfType(view)) { return view; }
              view = ember$metal$property_get$$get(view, 'parentView');
            }
          },

          /**
            Return the nearest ancestor that has a given property.

            @method nearestWithProperty
            @param {String} property A property name
            @return Ember.View
          */
          nearestWithProperty: function(property) {
            var view = ember$metal$property_get$$get(this, 'parentView');

            while (view) {
              if (property in view) { return view; }
              view = ember$metal$property_get$$get(view, 'parentView');
            }
          },

          /**
            Return the nearest ancestor whose parent is an instance of
            `klass`.

            @method nearestChildOf
            @param {Class} klass Subclass of Ember.View (or Ember.View itself)
            @return Ember.View
          */
          nearestChildOf: function(klass) {
            var view = ember$metal$property_get$$get(this, 'parentView');

            while (view) {
              if (ember$metal$property_get$$get(view, 'parentView') instanceof klass) { return view; }
              view = ember$metal$property_get$$get(view, 'parentView');
            }
          },

          /**
            When the parent view changes, recursively invalidate `controller`

            @method _parentViewDidChange
            @private
          */
          _parentViewDidChange: ember$metal$mixin$$observer('_parentView', function() {
            if (this.isDestroying) { return; }

            this.trigger('parentViewDidChange');

            if (ember$metal$property_get$$get(this, 'parentView.controller') && !ember$metal$property_get$$get(this, 'controller')) {
              this.notifyPropertyChange('controller');
            }
          }),

          _controllerDidChange: ember$metal$mixin$$observer('controller', function() {
            if (this.isDestroying) { return; }

            this.rerender();

            this.forEachChildView(function(view) {
              view.propertyDidChange('controller');
            });
          }),

          cloneKeywords: function() {
            var templateData = ember$metal$property_get$$get(this, 'templateData');

            var keywords = templateData ? ember$runtime$copy$$default(templateData.keywords) : {};
            ember$metal$property_set$$set(keywords, 'view', this.isVirtual ? keywords.view : this);
            ember$metal$property_set$$set(keywords, '_view', this);
            ember$metal$property_set$$set(keywords, 'controller', ember$metal$property_get$$get(this, 'controller'));

            return keywords;
          },

          /**
            Called on your view when it should push strings of HTML into a
            `Ember.RenderBuffer`. Most users will want to override the `template`
            or `templateName` properties instead of this method.

            By default, `Ember.View` will look for a function in the `template`
            property and invoke it with the value of `context`. The value of
            `context` will be the view's controller unless you override it.

            @method render
            @param {Ember.RenderBuffer} buffer The render buffer
          */
          render: function(buffer) {
            // If this view has a layout, it is the responsibility of the
            // the layout to render the view's template. Otherwise, render the template
            // directly.
            var template = ember$metal$property_get$$get(this, 'layout') || ember$metal$property_get$$get(this, 'template');

            if (template) {
              var context = ember$metal$property_get$$get(this, 'context');
              var keywords = this.cloneKeywords();
              var output;

              var data = {
                view: this,
                buffer: buffer,
                isRenderData: true,
                keywords: keywords,
                insideGroup: ember$metal$property_get$$get(this, 'templateData.insideGroup')
              };

              // Invoke the template with the provided template context, which
              // is the view's controller by default. A hash of data is also passed that provides
              // the template with access to the view and render buffer.

              ember$metal$core$$default.assert('template must be a function. Did you mean to call Ember.Handlebars.compile("...") or specify templateName instead?', typeof template === 'function');
              // The template should write directly to the render buffer instead
              // of returning a string.
              output = template(context, { data: data });

              // If the template returned a string instead of writing to the buffer,
              // push the string onto the buffer.
              if (output !== undefined) { buffer.push(output); }
            }
          },

          /**
            Renders the view again. This will work regardless of whether the
            view is already in the DOM or not. If the view is in the DOM, the
            rendering process will be deferred to give bindings a chance
            to synchronize.

            If children were added during the rendering process using `appendChild`,
            `rerender` will remove them, because they will be added again
            if needed by the next `render`.

            In general, if the display of your view changes, you should modify
            the DOM element directly instead of manually calling `rerender`, which can
            be slow.

            @method rerender
          */
          rerender: function() {
            return this.currentState.rerender(this);
          },

          clearRenderedChildren: function() {
            var lengthBefore = this.lengthBeforeRender,
                lengthAfter  = this.lengthAfterRender;

            // If there were child views created during the last call to render(),
            // remove them under the assumption that they will be re-created when
            // we re-render.

            // VIEW-TODO: Unit test this path.
            var childViews = this._childViews;
            for (var i=lengthAfter-1; i>=lengthBefore; i--) {
              if (childViews[i]) { childViews[i].destroy(); }
            }
          },

          /**
            Iterates over the view's `classNameBindings` array, inserts the value
            of the specified property into the `classNames` array, then creates an
            observer to update the view's element if the bound property ever changes
            in the future.

            @method _applyClassNameBindings
            @private
          */
          _applyClassNameBindings: function(classBindings) {
            var classNames = this.classNames,
            elem, newClass, dasherizedClass;

            // Loop through all of the configured bindings. These will be either
            // property names ('isUrgent') or property paths relative to the view
            // ('content.isUrgent')
            a_forEach(classBindings, function(binding) {

              ember$metal$core$$default.assert("classNameBindings must not have spaces in them. Multiple class name bindings can be provided as elements of an array, e.g. ['foo', ':bar']", binding.indexOf(' ') === -1);

              // Variable in which the old class value is saved. The observer function
              // closes over this variable, so it knows which string to remove when
              // the property changes.
              var oldClass;
              // Extract just the property name from bindings like 'foo:bar'
              var parsedPath = ember$views$views$view$$View._parsePropertyPath(binding);

              // Set up an observer on the context. If the property changes, toggle the
              // class name.
              var observer = function() {
                // Get the current value of the property
                newClass = this._classStringForProperty(binding);
                elem = this.$();

                // If we had previously added a class to the element, remove it.
                if (oldClass) {
                  elem.removeClass(oldClass);
                  // Also remove from classNames so that if the view gets rerendered,
                  // the class doesn't get added back to the DOM.
                  classNames.removeObject(oldClass);
                }

                // If necessary, add a new class. Make sure we keep track of it so
                // it can be removed in the future.
                if (newClass) {
                  elem.addClass(newClass);
                  oldClass = newClass;
                } else {
                  oldClass = null;
                }
              };

              // Get the class name for the property at its current value
              dasherizedClass = this._classStringForProperty(binding);

              if (dasherizedClass) {
                // Ensure that it gets into the classNames array
                // so it is displayed when we render.
                a_addObject(classNames, dasherizedClass);

                // Save a reference to the class name so we can remove it
                // if the observer fires. Remember that this variable has
                // been closed over by the observer.
                oldClass = dasherizedClass;
              }

              this.registerObserver(this, parsedPath.path, observer);
              // Remove className so when the view is rerendered,
              // the className is added based on binding reevaluation
              this.one('willClearRender', function() {
                if (oldClass) {
                  classNames.removeObject(oldClass);
                  oldClass = null;
                }
              });

            }, this);
          },

          _unspecifiedAttributeBindings: null,

          /**
            Iterates through the view's attribute bindings, sets up observers for each,
            then applies the current value of the attributes to the passed render buffer.

            @method _applyAttributeBindings
            @param {Ember.RenderBuffer} buffer
            @private
          */
          _applyAttributeBindings: function(buffer, attributeBindings) {
            var attributeValue,
                unspecifiedAttributeBindings = this._unspecifiedAttributeBindings = this._unspecifiedAttributeBindings || {};

            a_forEach(attributeBindings, function(binding) {
              var split = binding.split(':'),
                  property = split[0],
                  attributeName = split[1] || property;

              if (property in this) {
                this._setupAttributeBindingObservation(property, attributeName);

                // Determine the current value and add it to the render buffer
                // if necessary.
                attributeValue = ember$metal$property_get$$get(this, property);
                ember$views$views$view$$View.applyAttributeBindings(buffer, attributeName, attributeValue);
              } else {
                unspecifiedAttributeBindings[property] = attributeName;
              }
            }, this);

            // Lazily setup setUnknownProperty after attributeBindings are initially applied
            this.setUnknownProperty = this._setUnknownProperty;
          },

          _setupAttributeBindingObservation: function(property, attributeName) {
            var attributeValue, elem;

            // Create an observer to add/remove/change the attribute if the
            // JavaScript property changes.
            var observer = function() {
              elem = this.$();

              attributeValue = ember$metal$property_get$$get(this, property);

              ember$views$views$view$$View.applyAttributeBindings(elem, attributeName, attributeValue);
            };

            this.registerObserver(this, property, observer);
          },

          /**
            We're using setUnknownProperty as a hook to setup attributeBinding observers for
            properties that aren't defined on a view at initialization time.

            Note: setUnknownProperty will only be called once for each property.

            @method setUnknownProperty
            @param key
            @param value
            @private
          */
          setUnknownProperty: null, // Gets defined after initialization by _applyAttributeBindings

          _setUnknownProperty: function(key, value) {
            var attributeName = this._unspecifiedAttributeBindings && this._unspecifiedAttributeBindings[key];
            if (attributeName) {
              this._setupAttributeBindingObservation(key, attributeName);
            }

            ember$metal$properties$$defineProperty(this, key);
            return ember$metal$property_set$$set(this, key, value);
          },

          /**
            Given a property name, returns a dasherized version of that
            property name if the property evaluates to a non-falsy value.

            For example, if the view has property `isUrgent` that evaluates to true,
            passing `isUrgent` to this method will return `"is-urgent"`.

            @method _classStringForProperty
            @param property
            @private
          */
          _classStringForProperty: function(property) {
            var parsedPath = ember$views$views$view$$View._parsePropertyPath(property);
            var path = parsedPath.path;

            var val = ember$metal$property_get$$get(this, path);
            if (val === undefined && ember$metal$binding$$isGlobalPath(path)) {
              val = ember$metal$property_get$$get(ember$metal$core$$default.lookup, path);
            }

            return ember$views$views$view$$View._classStringForValue(path, val, parsedPath.className, parsedPath.falsyClassName);
          },

          // ..........................................................
          // ELEMENT SUPPORT
          //

          /**
            Returns the current DOM element for the view.

            @property element
            @type DOMElement
          */
          element: ember$metal$computed$$computed('_parentView', function(key, value) {
            if (value !== undefined) {
              return this.currentState.setElement(this, value);
            } else {
              return this.currentState.getElement(this);
            }
          }),

          /**
            Returns a jQuery object for this view's element. If you pass in a selector
            string, this method will return a jQuery object, using the current element
            as its buffer.

            For example, calling `view.$('li')` will return a jQuery object containing
            all of the `li` elements inside the DOM element of this view.

            @method $
            @param {String} [selector] a jQuery-compatible selector string
            @return {jQuery} the jQuery object for the DOM node
          */
          $: function(sel) {
            return this.currentState.$(this, sel);
          },

          mutateChildViews: function(callback) {
            var childViews = this._childViews,
                idx = childViews.length,
                view;

            while(--idx >= 0) {
              view = childViews[idx];
              callback(this, view, idx);
            }

            return this;
          },

          forEachChildView: function(callback) {
            var childViews = this._childViews;

            if (!childViews) { return this; }

            var len = childViews.length,
                view, idx;

            for (idx = 0; idx < len; idx++) {
              view = childViews[idx];
              callback(view);
            }

            return this;
          },

          /**
            Appends the view's element to the specified parent element.

            If the view does not have an HTML representation yet, `createElement()`
            will be called automatically.

            Note that this method just schedules the view to be appended; the DOM
            element will not be appended to the given element until all bindings have
            finished synchronizing.

            This is not typically a function that you will need to call directly when
            building your application. You might consider using `Ember.ContainerView`
            instead. If you do need to use `appendTo`, be sure that the target element
            you are providing is associated with an `Ember.Application` and does not
            have an ancestor element that is associated with an Ember view.

            @method appendTo
            @param {String|DOMElement|jQuery} A selector, element, HTML string, or jQuery object
            @return {Ember.View} receiver
          */
          appendTo: function(target) {
            // Schedule the DOM element to be created and appended to the given
            // element after bindings have synchronized.
            this._insertElementLater(function() {
              ember$metal$core$$default.assert("You tried to append to (" + target + ") but that isn't in the DOM", ember$views$system$jquery$$default(target).length > 0);
              ember$metal$core$$default.assert("You cannot append to an existing Ember.View. Consider using Ember.ContainerView instead.", !ember$views$system$jquery$$default(target).is('.ember-view') && !ember$views$system$jquery$$default(target).parents().is('.ember-view'));
              this.$().appendTo(target);
            });

            return this;
          },

          /**
            Replaces the content of the specified parent element with this view's
            element. If the view does not have an HTML representation yet,
            `createElement()` will be called automatically.

            Note that this method just schedules the view to be appended; the DOM
            element will not be appended to the given element until all bindings have
            finished synchronizing

            @method replaceIn
            @param {String|DOMElement|jQuery} target A selector, element, HTML string, or jQuery object
            @return {Ember.View} received
          */
          replaceIn: function(target) {
            ember$metal$core$$default.assert("You tried to replace in (" + target + ") but that isn't in the DOM", ember$views$system$jquery$$default(target).length > 0);
            ember$metal$core$$default.assert("You cannot replace an existing Ember.View. Consider using Ember.ContainerView instead.", !ember$views$system$jquery$$default(target).is('.ember-view') && !ember$views$system$jquery$$default(target).parents().is('.ember-view'));

            this._insertElementLater(function() {
              ember$views$system$jquery$$default(target).empty();
              this.$().appendTo(target);
            });

            return this;
          },

          /**
            Schedules a DOM operation to occur during the next render phase. This
            ensures that all bindings have finished synchronizing before the view is
            rendered.

            To use, pass a function that performs a DOM operation.

            Before your function is called, this view and all child views will receive
            the `willInsertElement` event. After your function is invoked, this view
            and all of its child views will receive the `didInsertElement` event.

            ```javascript
            view._insertElementLater(function() {
              this.createElement();
              this.$().appendTo('body');
            });
            ```

            @method _insertElementLater
            @param {Function} fn the function that inserts the element into the DOM
            @private
          */
          _insertElementLater: function(fn) {
            this._scheduledInsert = ember$metal$run_loop$$default.scheduleOnce('render', this, '_insertElement', fn);
          },

          _insertElement: function (fn) {
            this._scheduledInsert = null;
            this.currentState.insertElement(this, fn);
          },

          /**
            Appends the view's element to the document body. If the view does
            not have an HTML representation yet, `createElement()` will be called
            automatically.

            If your application uses the `rootElement` property, you must append
            the view within that element. Rendering views outside of the `rootElement`
            is not supported.

            Note that this method just schedules the view to be appended; the DOM
            element will not be appended to the document body until all bindings have
            finished synchronizing.

            @method append
            @return {Ember.View} receiver
          */
          append: function() {
            return this.appendTo(document.body);
          },

          /**
            Removes the view's element from the element to which it is attached.

            @method remove
            @return {Ember.View} receiver
          */
          remove: function() {
            // What we should really do here is wait until the end of the run loop
            // to determine if the element has been re-appended to a different
            // element.
            // In the interim, we will just re-render if that happens. It is more
            // important than elements get garbage collected.
            if (!this.removedFromDOM) { this.destroyElement(); }
            this.invokeRecursively(function(view) {
              if (view.clearRenderedChildren) { view.clearRenderedChildren(); }
            });
          },

          elementId: null,

          /**
            Attempts to discover the element in the parent element. The default
            implementation looks for an element with an ID of `elementId` (or the
            view's guid if `elementId` is null). You can override this method to
            provide your own form of lookup. For example, if you want to discover your
            element using a CSS class name instead of an ID.

            @method findElementInParentElement
            @param {DOMElement} parentElement The parent's DOM element
            @return {DOMElement} The discovered element
          */
          findElementInParentElement: function(parentElem) {
            var id = "#" + this.elementId;
            return ember$views$system$jquery$$default(id)[0] || ember$views$system$jquery$$default(id, parentElem)[0];
          },

          /**
            Creates a DOM representation of the view and all of its
            child views by recursively calling the `render()` method.

            After the element has been created, `didInsertElement` will
            be called on this view and all of its child views.

            @method createElement
            @return {Ember.View} receiver
          */
          createElement: function() {
            if (ember$metal$property_get$$get(this, 'element')) { return this; }

            var buffer = this.renderToBuffer();
            ember$metal$property_set$$set(this, 'element', buffer.element());

            return this;
          },

          /**
            Called when a view is going to insert an element into the DOM.

            @event willInsertElement
          */
          willInsertElement: ember$metal$core$$default.K,

          /**
            Called when the element of the view has been inserted into the DOM
            or after the view was re-rendered. Override this function to do any
            set up that requires an element in the document body.

            @event didInsertElement
          */
          didInsertElement: ember$metal$core$$default.K,

          /**
            Called when the view is about to rerender, but before anything has
            been torn down. This is a good opportunity to tear down any manual
            observers you have installed based on the DOM state

            @event willClearRender
          */
          willClearRender: ember$metal$core$$default.K,

          /**
            Run this callback on the current view (unless includeSelf is false) and recursively on child views.

            @method invokeRecursively
            @param fn {Function}
            @param includeSelf {Boolean} Includes itself if true.
            @private
          */
          invokeRecursively: function(fn, includeSelf) {
            var childViews = (includeSelf === false) ? this._childViews : [this];
            var currentViews, view, currentChildViews;

            while (childViews.length) {
              currentViews = childViews.slice();
              childViews = [];

              for (var i=0, l=currentViews.length; i<l; i++) {
                view = currentViews[i];
                currentChildViews = view._childViews ? view._childViews.slice(0) : null;
                fn(view);
                if (currentChildViews) {
                  childViews.push.apply(childViews, currentChildViews);
                }
              }
            }
          },

          triggerRecursively: function(eventName) {
            var childViews = [this], currentViews, view, currentChildViews;

            while (childViews.length) {
              currentViews = childViews.slice();
              childViews = [];

              for (var i=0, l=currentViews.length; i<l; i++) {
                view = currentViews[i];
                currentChildViews = view._childViews ? view._childViews.slice(0) : null;
                if (view.trigger) { view.trigger(eventName); }
                if (currentChildViews) {
                  childViews.push.apply(childViews, currentChildViews);
                }

              }
            }
          },

          viewHierarchyCollection: function() {
            var currentView, viewCollection = new ember$views$views$view$$ViewCollection([this]);

            for (var i = 0; i < viewCollection.length; i++) {
              currentView = viewCollection.objectAt(i);
              if (currentView._childViews) {
                viewCollection.push.apply(viewCollection, currentView._childViews);
              }
            }

            return viewCollection;
          },

          /**
            Destroys any existing element along with the element for any child views
            as well. If the view does not currently have a element, then this method
            will do nothing.

            If you implement `willDestroyElement()` on your view, then this method will
            be invoked on your view before your element is destroyed to give you a
            chance to clean up any event handlers, etc.

            If you write a `willDestroyElement()` handler, you can assume that your
            `didInsertElement()` handler was called earlier for the same element.

            You should not call or override this method yourself, but you may
            want to implement the above callbacks.

            @method destroyElement
            @return {Ember.View} receiver
          */
          destroyElement: function() {
            return this.currentState.destroyElement(this);
          },

          /**
            Called when the element of the view is going to be destroyed. Override
            this function to do any teardown that requires an element, like removing
            event listeners.

            @event willDestroyElement
          */
          willDestroyElement: ember$metal$core$$default.K,

          /**
            Triggers the `willDestroyElement` event (which invokes the
            `willDestroyElement()` method if it exists) on this view and all child
            views.

            Before triggering `willDestroyElement`, it first triggers the
            `willClearRender` event recursively.

            @method _notifyWillDestroyElement
            @private
          */
          _notifyWillDestroyElement: function() {
            var viewCollection = this.viewHierarchyCollection();
            viewCollection.trigger('willClearRender');
            viewCollection.trigger('willDestroyElement');
            return viewCollection;
          },

          /**
            If this view's element changes, we need to invalidate the caches of our
            child views so that we do not retain references to DOM elements that are
            no longer needed.

            @method _elementDidChange
            @private
          */
          _elementDidChange: ember$metal$mixin$$observer('element', function() {
            this.forEachChildView(clearCachedElement);
          }),

          /**
            Called when the parentView property has changed.

            @event parentViewDidChange
          */
          parentViewDidChange: ember$metal$core$$default.K,

          instrumentName: 'view',

          instrumentDetails: function(hash) {
            hash.template = ember$metal$property_get$$get(this, 'templateName');
            this._super(hash);
          },

          _renderToBuffer: function(parentBuffer, bufferOperation) {
            this.lengthBeforeRender = this._childViews.length;
            var buffer = this._super(parentBuffer, bufferOperation);
            this.lengthAfterRender = this._childViews.length;

            return buffer;
          },

          renderToBufferIfNeeded: function (buffer) {
            return this.currentState.renderToBufferIfNeeded(this, buffer);
          },

          beforeRender: function(buffer) {
            this.applyAttributesToBuffer(buffer);
            buffer.pushOpeningTag();
          },

          afterRender: function(buffer) {
            buffer.pushClosingTag();
          },

          applyAttributesToBuffer: function(buffer) {
            // Creates observers for all registered class name and attribute bindings,
            // then adds them to the element.
            var classNameBindings = ember$metal$property_get$$get(this, 'classNameBindings');
            if (classNameBindings.length) {
              this._applyClassNameBindings(classNameBindings);
            }

            // Pass the render buffer so the method can apply attributes directly.
            // This isn't needed for class name bindings because they use the
            // existing classNames infrastructure.
            var attributeBindings = ember$metal$property_get$$get(this, 'attributeBindings');
            if (attributeBindings.length) {
              this._applyAttributeBindings(buffer, attributeBindings);
            }

            buffer.setClasses(this.classNames);
            buffer.id(this.elementId);

            var role = ember$metal$property_get$$get(this, 'ariaRole');
            if (role) {
              buffer.attr('role', role);
            }

            if (ember$metal$property_get$$get(this, 'isVisible') === false) {
              buffer.style('display', 'none');
            }
          },

          // ..........................................................
          // STANDARD RENDER PROPERTIES
          //

          /**
            Tag name for the view's outer element. The tag name is only used when an
            element is first created. If you change the `tagName` for an element, you
            must destroy and recreate the view element.

            By default, the render buffer will use a `<div>` tag for views.

            @property tagName
            @type String
            @default null
          */

          // We leave this null by default so we can tell the difference between
          // the default case and a user-specified tag.
          tagName: null,

          /**
            The WAI-ARIA role of the control represented by this view. For example, a
            button may have a role of type 'button', or a pane may have a role of
            type 'alertdialog'. This property is used by assistive software to help
            visually challenged users navigate rich web applications.

            The full list of valid WAI-ARIA roles is available at:
            [http://www.w3.org/TR/wai-aria/roles#roles_categorization](http://www.w3.org/TR/wai-aria/roles#roles_categorization)

            @property ariaRole
            @type String
            @default null
          */
          ariaRole: null,

          /**
            Standard CSS class names to apply to the view's outer element. This
            property automatically inherits any class names defined by the view's
            superclasses as well.

            @property classNames
            @type Array
            @default ['ember-view']
          */
          classNames: ['ember-view'],

          /**
            A list of properties of the view to apply as class names. If the property
            is a string value, the value of that string will be applied as a class
            name.

            ```javascript
            // Applies the 'high' class to the view element
            Ember.View.extend({
              classNameBindings: ['priority']
              priority: 'high'
            });
            ```

            If the value of the property is a Boolean, the name of that property is
            added as a dasherized class name.

            ```javascript
            // Applies the 'is-urgent' class to the view element
            Ember.View.extend({
              classNameBindings: ['isUrgent']
              isUrgent: true
            });
            ```

            If you would prefer to use a custom value instead of the dasherized
            property name, you can pass a binding like this:

            ```javascript
            // Applies the 'urgent' class to the view element
            Ember.View.extend({
              classNameBindings: ['isUrgent:urgent']
              isUrgent: true
            });
            ```

            This list of properties is inherited from the view's superclasses as well.

            @property classNameBindings
            @type Array
            @default []
          */
          classNameBindings: EMPTY_ARRAY,

          /**
            A list of properties of the view to apply as attributes. If the property is
            a string value, the value of that string will be applied as the attribute.

            ```javascript
            // Applies the type attribute to the element
            // with the value "button", like <div type="button">
            Ember.View.extend({
              attributeBindings: ['type'],
              type: 'button'
            });
            ```

            If the value of the property is a Boolean, the name of that property is
            added as an attribute.

            ```javascript
            // Renders something like <div enabled="enabled">
            Ember.View.extend({
              attributeBindings: ['enabled'],
              enabled: true
            });
            ```

            @property attributeBindings
          */
          attributeBindings: EMPTY_ARRAY,

          // .......................................................
          // CORE DISPLAY METHODS
          //

          /**
            Setup a view, but do not finish waking it up.

            * configure `childViews`
            * register the view with the global views hash, which is used for event
              dispatch

            @method init
            @private
          */
          init: function() {
            this.elementId = this.elementId || ember$metal$utils$$guidFor(this);

            this._super();

            // setup child views. be sure to clone the child views array first
            this._childViews = this._childViews.slice();

            ember$metal$core$$default.assert("Only arrays are allowed for 'classNameBindings'", ember$metal$utils$$typeOf(this.classNameBindings) === 'array');
            this.classNameBindings = ember$runtime$system$native_array$$A(this.classNameBindings.slice());

            ember$metal$core$$default.assert("Only arrays are allowed for 'classNames'", ember$metal$utils$$typeOf(this.classNames) === 'array');
            this.classNames = ember$runtime$system$native_array$$A(this.classNames.slice());
          },

          appendChild: function(view, options) {
            return this.currentState.appendChild(this, view, options);
          },

          /**
            Removes the child view from the parent view.

            @method removeChild
            @param {Ember.View} view
            @return {Ember.View} receiver
          */
          removeChild: function(view) {
            // If we're destroying, the entire subtree will be
            // freed, and the DOM will be handled separately,
            // so no need to mess with childViews.
            if (this.isDestroying) { return; }

            // update parent node
            ember$metal$property_set$$set(view, '_parentView', null);

            // remove view from childViews array.
            var childViews = this._childViews;

            a_removeObject(childViews, view);

            this.propertyDidChange('childViews'); // HUH?! what happened to will change?

            return this;
          },

          /**
            Removes all children from the `parentView`.

            @method removeAllChildren
            @return {Ember.View} receiver
          */
          removeAllChildren: function() {
            return this.mutateChildViews(function(parentView, view) {
              parentView.removeChild(view);
            });
          },

          destroyAllChildren: function() {
            return this.mutateChildViews(function(parentView, view) {
              view.destroy();
            });
          },

          /**
            Removes the view from its `parentView`, if one is found. Otherwise
            does nothing.

            @method removeFromParent
            @return {Ember.View} receiver
          */
          removeFromParent: function() {
            var parent = this._parentView;

            // Remove DOM element from parent
            this.remove();

            if (parent) { parent.removeChild(this); }
            return this;
          },

          /**
            You must call `destroy` on a view to destroy the view (and all of its
            child views). This will remove the view from any parent node, then make
            sure that the DOM element managed by the view can be released by the
            memory manager.

            @method destroy
          */
          destroy: function() {
            var childViews = this._childViews,
                // get parentView before calling super because it'll be destroyed
                nonVirtualParentView = ember$metal$property_get$$get(this, 'parentView'),
                viewName = this.viewName,
                childLen, i;

            if (!this._super()) { return; }

            childLen = childViews.length;
            for (i=childLen-1; i>=0; i--) {
              childViews[i].removedFromDOM = true;
            }

            // remove from non-virtual parent view if viewName was specified
            if (viewName && nonVirtualParentView) {
              nonVirtualParentView.set(viewName, null);
            }

            childLen = childViews.length;
            for (i=childLen-1; i>=0; i--) {
              childViews[i].destroy();
            }

            return this;
          },

          /**
            Instantiates a view to be added to the childViews array during view
            initialization. You generally will not call this method directly unless
            you are overriding `createChildViews()`. Note that this method will
            automatically configure the correct settings on the new view instance to
            act as a child of the parent.

            @method createChildView
            @param {Class|String} viewClass
            @param {Hash} [attrs] Attributes to add
            @return {Ember.View} new instance
          */
          createChildView: function(view, attrs) {
            if (!view) {
              throw new TypeError("createChildViews first argument must exist");
            }

            if (view.isView && view._parentView === this && view.container === this.container) {
              return view;
            }

            attrs = attrs || {};
            attrs._parentView = this;

            if (ember$views$views$view$$CoreView.detect(view)) {
              attrs.templateData = attrs.templateData || ember$metal$property_get$$get(this, 'templateData');

              attrs.container = this.container;
              view = view.create(attrs);

              // don't set the property on a virtual view, as they are invisible to
              // consumers of the view API
              if (view.viewName) {
                ember$metal$property_set$$set(ember$metal$property_get$$get(this, 'concreteView'), view.viewName, view);
              }
            } else if ('string' === typeof view) {
              var fullName = 'view:' + view;
              var ViewKlass = this.container.lookupFactory(fullName);

              ember$metal$core$$default.assert("Could not find view: '" + fullName + "'", !!ViewKlass);

              attrs.templateData = ember$metal$property_get$$get(this, 'templateData');
              view = ViewKlass.create(attrs);
            } else {
              ember$metal$core$$default.assert('You must pass instance or subclass of View', view.isView);
              attrs.container = this.container;

              if (!ember$metal$property_get$$get(view, 'templateData')) {
                attrs.templateData = ember$metal$property_get$$get(this, 'templateData');
              }

              ember$metal$set_properties$$default(view, attrs);

            }

            return view;
          },

          becameVisible: ember$metal$core$$default.K,
          becameHidden: ember$metal$core$$default.K,

          /**
            When the view's `isVisible` property changes, toggle the visibility
            element of the actual DOM element.

            @method _isVisibleDidChange
            @private
          */
          _isVisibleDidChange: ember$metal$mixin$$observer('isVisible', function() {
            if (this._isVisible === ember$metal$property_get$$get(this, 'isVisible')) { return ; }
            ember$metal$run_loop$$default.scheduleOnce('render', this, this._toggleVisibility);
          }),

          _toggleVisibility: function() {
            var $el = this.$();
            if (!$el) { return; }

            var isVisible = ember$metal$property_get$$get(this, 'isVisible');

            if (this._isVisible === isVisible) { return ; }

            $el.toggle(isVisible);

            this._isVisible = isVisible;

            if (this._isAncestorHidden()) { return; }

            if (isVisible) {
              this._notifyBecameVisible();
            } else {
              this._notifyBecameHidden();
            }
          },

          _notifyBecameVisible: function() {
            this.trigger('becameVisible');

            this.forEachChildView(function(view) {
              var isVisible = ember$metal$property_get$$get(view, 'isVisible');

              if (isVisible || isVisible === null) {
                view._notifyBecameVisible();
              }
            });
          },

          _notifyBecameHidden: function() {
            this.trigger('becameHidden');
            this.forEachChildView(function(view) {
              var isVisible = ember$metal$property_get$$get(view, 'isVisible');

              if (isVisible || isVisible === null) {
                view._notifyBecameHidden();
              }
            });
          },

          _isAncestorHidden: function() {
            var parent = ember$metal$property_get$$get(this, 'parentView');

            while (parent) {
              if (ember$metal$property_get$$get(parent, 'isVisible') === false) { return true; }

              parent = ember$metal$property_get$$get(parent, 'parentView');
            }

            return false;
          },

          clearBuffer: function() {
            this.invokeRecursively(nullViewsBuffer);
          },

          transitionTo: function(state, children) {
            var priorState = this.currentState,
                currentState = this.currentState = this._states[state];
            this._state = state;

            if (priorState && priorState.exit) { priorState.exit(this); }
            if (currentState.enter) { currentState.enter(this); }
            if (state === 'inDOM') { ember$metal$utils$$meta(this).cache.element = undefined; }

            if (children !== false) {
              this.forEachChildView(function(view) {
                view.transitionTo(state);
              });
            }
          },

          // .......................................................
          // EVENT HANDLING
          //

          /**
            Handle events from `Ember.EventDispatcher`

            @method handleEvent
            @param eventName {String}
            @param evt {Event}
            @private
          */
          handleEvent: function(eventName, evt) {
            return this.currentState.handleEvent(this, eventName, evt);
          },

          registerObserver: function(root, path, target, observer) {
            if (!observer && 'function' === typeof target) {
              observer = target;
              target = null;
            }

            if (!root || typeof root !== 'object') {
              return;
            }

            var view = this,
                stateCheckedObserver = function() {
                  view.currentState.invokeObserver(this, observer);
                },
                scheduledObserver = function() {
                  ember$metal$run_loop$$default.scheduleOnce('render', this, stateCheckedObserver);
                };

            ember$metal$observer$$addObserver(root, path, target, scheduledObserver);

            this.one('willClearRender', function() {
              ember$metal$observer$$removeObserver(root, path, target, scheduledObserver);
            });
          }

        });

        /*
          Describe how the specified actions should behave in the various
          states that a view can exist in. Possible states:

          * preRender: when a view is first instantiated, and after its
            element was destroyed, it is in the preRender state
          * inBuffer: once a view has been rendered, but before it has
            been inserted into the DOM, it is in the inBuffer state
          * hasElement: the DOM representation of the view is created,
            and is ready to be inserted
          * inDOM: once a view has been inserted into the DOM it is in
            the inDOM state. A view spends the vast majority of its
            existence in this state.
          * destroyed: once a view has been destroyed (using the destroy
            method), it is in this state. No further actions can be invoked
            on a destroyed view.
        */

        // in the destroyed state, everything is illegal

        // before rendering has begun, all legal manipulations are noops.

        // inside the buffer, legal manipulations are done on the buffer

        // once the view has been inserted into the DOM, legal manipulations
        // are done on the DOM element.

        function notifyMutationListeners() {
          ember$metal$run_loop$$default.once(ember$views$views$view$$View, 'notifyMutationListeners');
        }

        var DOMManager = {
          prepend: function(view, html) {
            view.$().prepend(html);
            notifyMutationListeners();
          },

          after: function(view, html) {
            view.$().after(html);
            notifyMutationListeners();
          },

          html: function(view, html) {
            view.$().html(html);
            notifyMutationListeners();
          },

          replace: function(view) {
            var element = ember$metal$property_get$$get(view, 'element');

            ember$metal$property_set$$set(view, 'element', null);

            view._insertElementLater(function() {
              ember$views$system$jquery$$default(element).replaceWith(ember$metal$property_get$$get(view, 'element'));
              notifyMutationListeners();
            });
          },

          remove: function(view) {
            view.$().remove();
            notifyMutationListeners();
          },

          empty: function(view) {
            view.$().empty();
            notifyMutationListeners();
          }
        };

        ember$views$views$view$$View.reopen({
          domManager: DOMManager
        });

        ember$views$views$view$$View.reopenClass({

          /**
            Parse a path and return an object which holds the parsed properties.

            For example a path like "content.isEnabled:enabled:disabled" will return the
            following object:

            ```javascript
            {
              path: "content.isEnabled",
              className: "enabled",
              falsyClassName: "disabled",
              classNames: ":enabled:disabled"
            }
            ```

            @method _parsePropertyPath
            @static
            @private
          */
          _parsePropertyPath: function(path) {
            var split = path.split(':'),
                propertyPath = split[0],
                classNames = "",
                className,
                falsyClassName;

            // check if the property is defined as prop:class or prop:trueClass:falseClass
            if (split.length > 1) {
              className = split[1];
              if (split.length === 3) { falsyClassName = split[2]; }

              classNames = ':' + className;
              if (falsyClassName) { classNames += ":" + falsyClassName; }
            }

            return {
              path: propertyPath,
              classNames: classNames,
              className: (className === '') ? undefined : className,
              falsyClassName: falsyClassName
            };
          },

          /**
            Get the class name for a given value, based on the path, optional
            `className` and optional `falsyClassName`.

            - if a `className` or `falsyClassName` has been specified:
              - if the value is truthy and `className` has been specified,
                `className` is returned
              - if the value is falsy and `falsyClassName` has been specified,
                `falsyClassName` is returned
              - otherwise `null` is returned
            - if the value is `true`, the dasherized last part of the supplied path
              is returned
            - if the value is not `false`, `undefined` or `null`, the `value`
              is returned
            - if none of the above rules apply, `null` is returned

            @method _classStringForValue
            @param path
            @param val
            @param className
            @param falsyClassName
            @static
            @private
          */
          _classStringForValue: function(path, val, className, falsyClassName) {
            if(ember$metal$utils$$isArray(val)) {
              val = ember$metal$property_get$$get(val, 'length') !== 0;
            }

            // When using the colon syntax, evaluate the truthiness or falsiness
            // of the value to determine which className to return
            if (className || falsyClassName) {
              if (className && !!val) {
                return className;

              } else if (falsyClassName && !val) {
                return falsyClassName;

              } else {
                return null;
              }

            // If value is a Boolean and true, return the dasherized property
            // name.
            } else if (val === true) {
              // Normalize property path to be suitable for use
              // as a class name. For exaple, content.foo.barBaz
              // becomes bar-baz.
              var parts = path.split('.');
              return ember$runtime$system$string$$dasherize(parts[parts.length-1]);

            // If the value is not false, undefined, or null, return the current
            // value of the property.
            } else if (val !== false && val != null) {
              return val;

            // Nothing to display. Return null so that the old class is removed
            // but no new class is added.
            } else {
              return null;
            }
          }
        });

        var mutation = ember$runtime$system$object$$default.extend(ember$runtime$mixins$evented$$default).create();

        ember$views$views$view$$View.addMutationListener = function(callback) {
          mutation.on('change', callback);
        };

        ember$views$views$view$$View.removeMutationListener = function(callback) {
          mutation.off('change', callback);
        };

        ember$views$views$view$$View.notifyMutationListeners = function() {
          mutation.trigger('change');
        };

        /**
          Global views hash

          @property views
          @static
          @type Hash
        */
        ember$views$views$view$$View.views = {};

        // If someone overrides the child views computed property when
        // defining their class, we want to be able to process the user's
        // supplied childViews and then restore the original computed property
        // at view initialization time. This happens in Ember.ContainerView's init
        // method.
        ember$views$views$view$$View.childViewsProperty = childViewsProperty;

        ember$views$views$view$$View.applyAttributeBindings = function(elem, name, value) {
          var type = ember$metal$utils$$typeOf(value);

          // if this changes, also change the logic in ember-handlebars/lib/helpers/binding.js
          if (name !== 'value' && (type === 'string' || (type === 'number' && !isNaN(value)))) {
            if (value !== elem.attr(name)) {
              elem.attr(name, value);
            }
          } else if (name === 'value' || type === 'boolean') {
            if (ember$metal$is_none$$isNone(value) || value === false) {
              // `null`, `undefined` or `false` should remove attribute
              elem.removeAttr(name);
              elem.prop(name, '');
            } else if (value !== elem.prop(name)) {
              // value should always be properties
              elem.prop(name, value);
            }
          } else if (!value) {
            elem.removeAttr(name);
          }
        };
    }).call(this);

    (function() {
        ember$views$mixins$component_template_deprecation$$default = ember$metal$mixin$$Mixin.create({
          /**
            @private

            Moves `templateName` to `layoutName` and `template` to `layout` at extend
            time if a layout is not also specified.

            Note that this currently modifies the mixin themselves, which is technically
            dubious but is practically of little consequence. This may change in the
            future.

            @method willMergeMixin
            @since 1.4.0
          */
          willMergeMixin: function(props) {
            // must call _super here to ensure that the ActionHandler
            // mixin is setup properly (moves actions -> _actions)
            //
            // Calling super is only OK here since we KNOW that
            // there is another Mixin loaded first.
            this._super.apply(this, arguments);

            var deprecatedProperty, replacementProperty,
                layoutSpecified = (props.layoutName || props.layout || ember$metal$property_get$$get(this, 'layoutName'));

            if (props.templateName && !layoutSpecified) {
              deprecatedProperty = 'templateName';
              replacementProperty = 'layoutName';

              props.layoutName = props.templateName;
              delete props['templateName'];
            }

            if (props.template && !layoutSpecified) {
              deprecatedProperty = 'template';
              replacementProperty = 'layout';

              props.layout = props.template;
              delete props['template'];
            }

            if (deprecatedProperty) {
              ember$metal$core$$default.deprecate('Do not specify ' + deprecatedProperty + ' on a Component, use ' + replacementProperty + ' instead.', false);
            }
          }
        });
    }).call(this);

    (function() {
        /**
        `Ember.TargetActionSupport` is a mixin that can be included in a class
        to add a `triggerAction` method with semantics similar to the Handlebars
        `{{action}}` helper. In normal Ember usage, the `{{action}}` helper is
        usually the best choice. This mixin is most often useful when you are
        doing more complex event handling in View objects.

        See also `Ember.ViewTargetActionSupport`, which has
        view-aware defaults for target and actionContext.

        @class TargetActionSupport
        @namespace Ember
        @extends Ember.Mixin
        */
        var TargetActionSupport = ember$metal$mixin$$Mixin.create({
          target: null,
          action: null,
          actionContext: null,

          targetObject: ember$metal$computed$$computed(function() {
            var target = ember$metal$property_get$$get(this, 'target');

            if (ember$metal$utils$$typeOf(target) === "string") {
              var value = ember$metal$property_get$$get(this, target);
              if (value === undefined) { value = ember$metal$property_get$$get(ember$metal$core$$default.lookup, target); }
              return value;
            } else {
              return target;
            }
          }).property('target'),

          actionContextObject: ember$metal$computed$$computed(function() {
            var actionContext = ember$metal$property_get$$get(this, 'actionContext');

            if (ember$metal$utils$$typeOf(actionContext) === "string") {
              var value = ember$metal$property_get$$get(this, actionContext);
              if (value === undefined) { value = ember$metal$property_get$$get(ember$metal$core$$default.lookup, actionContext); }
              return value;
            } else {
              return actionContext;
            }
          }).property('actionContext'),

          /**
          Send an `action` with an `actionContext` to a `target`. The action, actionContext
          and target will be retrieved from properties of the object. For example:

          ```javascript
          App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
            target: Ember.computed.alias('controller'),
            action: 'save',
            actionContext: Ember.computed.alias('context'),
            click: function() {
              this.triggerAction(); // Sends the `save` action, along with the current context
                                    // to the current controller
            }
          });
          ```

          The `target`, `action`, and `actionContext` can be provided as properties of
          an optional object argument to `triggerAction` as well.

          ```javascript
          App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
            click: function() {
              this.triggerAction({
                action: 'save',
                target: this.get('controller'),
                actionContext: this.get('context'),
              }); // Sends the `save` action, along with the current context
                  // to the current controller
            }
          });
          ```

          The `actionContext` defaults to the object you are mixing `TargetActionSupport` into.
          But `target` and `action` must be specified either as properties or with the argument
          to `triggerAction`, or a combination:

          ```javascript
          App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
            target: Ember.computed.alias('controller'),
            click: function() {
              this.triggerAction({
                action: 'save'
              }); // Sends the `save` action, along with a reference to `this`,
                  // to the current controller
            }
          });
          ```

          @method triggerAction
          @param opts {Hash} (optional, with the optional keys action, target and/or actionContext)
          @return {Boolean} true if the action was sent successfully and did not return false
          */
          triggerAction: function(opts) {
            opts = opts || {};
            var action = opts.action || ember$metal$property_get$$get(this, 'action'),
                target = opts.target || ember$metal$property_get$$get(this, 'targetObject'),
                actionContext = opts.actionContext;

            function args(options, actionName) {
              var ret = [];
              if (actionName) { ret.push(actionName); }

              return ret.concat(options);
            }

            if (typeof actionContext === 'undefined') {
              actionContext = ember$metal$property_get$$get(this, 'actionContextObject') || this;
            }

            if (target && action) {
              var ret;

              if (target.send) {
                ret = target.send.apply(target, args(actionContext, action));
              } else {
                ember$metal$core$$default.assert("The action '" + action + "' did not exist on " + target, typeof target[action] === 'function');
                ret = target[action].apply(target, args(actionContext));
              }

              if (ret !== false) ret = true;

              return ret;
            } else {
              return false;
            }
          }
        });

        ember$runtime$mixins$target_action_support$$default = TargetActionSupport;
    }).call(this);

    (function() {
        var a_slice = Array.prototype.slice;

        /**
        @module ember
        @submodule ember-views
        */

        /**
          An `Ember.Component` is a view that is completely
          isolated. Property access in its templates go
          to the view object and actions are targeted at
          the view object. There is no access to the
          surrounding context or outer controller; all
          contextual information must be passed in.

          The easiest way to create an `Ember.Component` is via
          a template. If you name a template
          `components/my-foo`, you will be able to use
          `{{my-foo}}` in other templates, which will make
          an instance of the isolated component.

          ```handlebars
          {{app-profile person=currentUser}}
          ```

          ```handlebars
          <!-- app-profile template -->
          <h1>{{person.title}}</h1>
          <img {{bind-attr src=person.avatar}}>
          <p class='signature'>{{person.signature}}</p>
          ```

          You can use `yield` inside a template to
          include the **contents** of any block attached to
          the component. The block will be executed in the
          context of the surrounding context or outer controller:

          ```handlebars
          {{#app-profile person=currentUser}}
            <p>Admin mode</p>
            {{! Executed in the controller's context. }}
          {{/app-profile}}
          ```

          ```handlebars
          <!-- app-profile template -->
          <h1>{{person.title}}</h1>
          {{! Executed in the components context. }}
          {{yield}} {{! block contents }}
          ```

          If you want to customize the component, in order to
          handle events or actions, you implement a subclass
          of `Ember.Component` named after the name of the
          component. Note that `Component` needs to be appended to the name of
          your subclass like `AppProfileComponent`.

          For example, you could implement the action
          `hello` for the `app-profile` component:

          ```javascript
          App.AppProfileComponent = Ember.Component.extend({
            actions: {
              hello: function(name) {
                console.log("Hello", name);
              }
            }
          });
          ```

          And then use it in the component's template:

          ```handlebars
          <!-- app-profile template -->

          <h1>{{person.title}}</h1>
          {{yield}} <!-- block contents -->

          <button {{action 'hello' person.name}}>
            Say Hello to {{person.name}}
          </button>
          ```

          Components must have a `-` in their name to avoid
          conflicts with built-in controls that wrap HTML
          elements. This is consistent with the same
          requirement in web components.

          @class Component
          @namespace Ember
          @extends Ember.View
        */
        var Component = ember$views$views$view$$View.extend(ember$runtime$mixins$target_action_support$$default, ember$views$mixins$component_template_deprecation$$default, {
          instrumentName: 'component',
          instrumentDisplay: ember$metal$computed$$computed(function() {
            if (this._debugContainerKey) {
              return '{{' + this._debugContainerKey.split(':')[1] + '}}';
            }
          }),

          init: function() {
            this._super();
            ember$metal$property_set$$set(this, 'origContext', ember$metal$property_get$$get(this, 'context'));
            ember$metal$property_set$$set(this, 'context', this);
            ember$metal$property_set$$set(this, 'controller', this);
          },

          defaultLayout: function(context, options){
            ember$metal$core$$default.Handlebars.helpers['yield'].call(context, options);
          },

          /**
          A components template property is set by passing a block
          during its invocation. It is executed within the parent context.

          Example:

          ```handlebars
          {{#my-component}}
            // something that is run in the context
            // of the parent context
          {{/my-component}}
          ```

          Specifying a template directly to a component is deprecated without
          also specifying the layout property.

          @deprecated
          @property template
          */
          template: ember$metal$computed$$computed(function(key, value) {
            if (value !== undefined) { return value; }

            var templateName = ember$metal$property_get$$get(this, 'templateName'),
                template = this.templateForName(templateName, 'template');

            ember$metal$core$$default.assert("You specified the templateName " + templateName + " for " + this + ", but it did not exist.", !templateName || template);

            return template || ember$metal$property_get$$get(this, 'defaultTemplate');
          }).property('templateName'),

          /**
          Specifying a components `templateName` is deprecated without also
          providing the `layout` or `layoutName` properties.

          @deprecated
          @property templateName
          */
          templateName: null,

          // during render, isolate keywords
          cloneKeywords: function() {
            return {
              view: this,
              controller: this
            };
          },

          _yield: function(context, options) {
            var view = options.data.view,
                parentView = this._parentView,
                template = ember$metal$property_get$$get(this, 'template');

            if (template) {
              ember$metal$core$$default.assert("A Component must have a parent view in order to yield.", parentView);

              view.appendChild(ember$views$views$view$$View, {
                isVirtual: true,
                tagName: '',
                _contextView: parentView,
                template: template,
                context: options.data.insideGroup ? ember$metal$property_get$$get(this, 'origContext') : ember$metal$property_get$$get(parentView, 'context'),
                controller: ember$metal$property_get$$get(parentView, 'controller'),
                templateData: { keywords: parentView.cloneKeywords(), insideGroup: options.data.insideGroup }
              });
            }
          },

          /**
            If the component is currently inserted into the DOM of a parent view, this
            property will point to the controller of the parent view.

            @property targetObject
            @type Ember.Controller
            @default null
          */
          targetObject: ember$metal$computed$$computed(function(key) {
            var parentView = ember$metal$property_get$$get(this, '_parentView');
            return parentView ? ember$metal$property_get$$get(parentView, 'controller') : null;
          }).property('_parentView'),

          /**
            Triggers a named action on the controller context where the component is used if
            this controller has registered for notifications of the action.

            For example a component for playing or pausing music may translate click events
            into action notifications of "play" or "stop" depending on some internal state
            of the component:


            ```javascript
            App.PlayButtonComponent = Ember.Component.extend({
              click: function(){
                if (this.get('isPlaying')) {
                  this.sendAction('play');
                } else {
                  this.sendAction('stop');
                }
              }
            });
            ```

            When used inside a template these component actions are configured to
            trigger actions in the outer application context:

            ```handlebars
            {{! application.hbs }}
            {{play-button play="musicStarted" stop="musicStopped"}}
            ```

            When the component receives a browser `click` event it translate this
            interaction into application-specific semantics ("play" or "stop") and
            triggers the specified action name on the controller for the template
            where the component is used:


            ```javascript
            App.ApplicationController = Ember.Controller.extend({
              actions: {
                musicStarted: function(){
                  // called when the play button is clicked
                  // and the music started playing
                },
                musicStopped: function(){
                  // called when the play button is clicked
                  // and the music stopped playing
                }
              }
            });
            ```

            If no action name is passed to `sendAction` a default name of "action"
            is assumed.

            ```javascript
            App.NextButtonComponent = Ember.Component.extend({
              click: function(){
                this.sendAction();
              }
            });
            ```

            ```handlebars
            {{! application.hbs }}
            {{next-button action="playNextSongInAlbum"}}
            ```

            ```javascript
            App.ApplicationController = Ember.Controller.extend({
              actions: {
                playNextSongInAlbum: function(){
                  ...
                }
              }
            });
            ```

            @method sendAction
            @param [action] {String} the action to trigger
            @param [context] {*} a context to send with the action
          */
          sendAction: function(action) {
            var actionName,
                contexts = a_slice.call(arguments, 1);

            // Send the default action
            if (action === undefined) {
              actionName = ember$metal$property_get$$get(this, 'action');
              ember$metal$core$$default.assert("The default action was triggered on the component " + this.toString() +
                           ", but the action name (" + actionName + ") was not a string.",
                           ember$metal$is_none$$isNone(actionName) || typeof actionName === 'string');
            } else {
              actionName = ember$metal$property_get$$get(this, action);
              ember$metal$core$$default.assert("The " + action + " action was triggered on the component " +
                           this.toString() + ", but the action name (" + actionName +
                           ") was not a string.",
                           ember$metal$is_none$$isNone(actionName) || typeof actionName === 'string');
            }

            // If no action name for that action could be found, just abort.
            if (actionName === undefined) { return; }

            this.triggerAction({
              action: actionName,
              actionContext: contexts
            });
          }
        });

        ember$views$views$component$$default = Component;
    }).call(this);

    (function() {
        // ES6Todo: you'll need to import debugger once debugger is es6'd.
        if (typeof ember$metal$core$$default.assert === 'undefined')   { ember$metal$core$$default.assert = function(){}; }

        if (typeof ember$metal$core$$default.FEATURES === 'undefined') { ember$metal$core$$default.FEATURES = { isEnabled: function(){} }; }

        var objectCreate = Object.create || function(parent) {
          function F() {}
          F.prototype = parent;
          return new F();
        };

        // ES6Todo: when ember-debug is es6'ed import this.
        // var emberAssert = Ember.assert;
        var Handlebars = (ember$metal$core$$default.imports && ember$metal$core$$default.imports.Handlebars) || (this && this.Handlebars);

        if (!Handlebars && typeof require === 'function') {
          Handlebars = require('handlebars');
        }

        ember$metal$core$$default.assert("Ember Handlebars requires Handlebars version 1.0 or 1.1. Include " +
                     "a SCRIPT tag in the HTML HEAD linking to the Handlebars file " +
                     "before you link to Ember.", Handlebars);

        ember$metal$core$$default.assert("Ember Handlebars requires Handlebars version 1.0 or 1.1, " +
                     "COMPILER_REVISION expected: 4, got: " +  Handlebars.COMPILER_REVISION +
                     " - Please note: Builds of master may have other COMPILER_REVISION values.",
                     Handlebars.COMPILER_REVISION === 4);

        /**
          Prepares the Handlebars templating library for use inside Ember's view
          system.

          The `Ember.Handlebars` object is the standard Handlebars library, extended to
          use Ember's `get()` method instead of direct property access, which allows
          computed properties to be used inside templates.

          To create an `Ember.Handlebars` template, call `Ember.Handlebars.compile()`.
          This will return a function that can be used by `Ember.View` for rendering.

          @class Handlebars
          @namespace Ember
        */
        var EmberHandlebars = ember$metal$core$$default.Handlebars = objectCreate(Handlebars);

        /**
          Register a bound helper or custom view helper.

          ## Simple bound helper example

          ```javascript
          Ember.Handlebars.helper('capitalize', function(value) {
            return value.toUpperCase();
          });
          ```

          The above bound helper can be used inside of templates as follows:

          ```handlebars
          {{capitalize name}}
          ```

          In this case, when the `name` property of the template's context changes,
          the rendered value of the helper will update to reflect this change.

          For more examples of bound helpers, see documentation for
          `Ember.Handlebars.registerBoundHelper`.

          ## Custom view helper example

          Assuming a view subclass named `App.CalendarView` were defined, a helper
          for rendering instances of this view could be registered as follows:

          ```javascript
          Ember.Handlebars.helper('calendar', App.CalendarView):
          ```

          The above bound helper can be used inside of templates as follows:

          ```handlebars
          {{calendar}}
          ```

          Which is functionally equivalent to:

          ```handlebars
          {{view App.CalendarView}}
          ```

          Options in the helper will be passed to the view in exactly the same
          manner as with the `view` helper.

          @method helper
          @for Ember.Handlebars
          @param {String} name
          @param {Function|Ember.View} function or view class constructor
          @param {String} dependentKeys*
        */
        EmberHandlebars.helper = function(name, value) {
          ember$metal$core$$default.assert("You tried to register a component named '" + name + "', but component names must include a '-'", !ember$views$views$component$$default.detect(value) || name.match(/-/));

          if (ember$views$views$view$$View.detect(value)) {
            EmberHandlebars.registerHelper(name, EmberHandlebars.makeViewHelper(value));
          } else {
            EmberHandlebars.registerBoundHelper.apply(null, arguments);
          }
        };

        /**
          Returns a helper function that renders the provided ViewClass.

          Used internally by Ember.Handlebars.helper and other methods
          involving helper/component registration.

          @private
          @method makeViewHelper
          @for Ember.Handlebars
          @param {Function} ViewClass view class constructor
          @since 1.2.0
        */
        EmberHandlebars.makeViewHelper = function(ViewClass) {
          return function(options) {
            ember$metal$core$$default.assert("You can only pass attributes (such as name=value) not bare values to a helper for a View found in '" + ViewClass.toString() + "'", arguments.length < 2);
            return EmberHandlebars.helpers.view.call(this, ViewClass, options);
          };
        };

        /**
        @class helpers
        @namespace Ember.Handlebars
        */
        EmberHandlebars.helpers = objectCreate(Handlebars.helpers);

        /**
          Override the the opcode compiler and JavaScript compiler for Handlebars.

          @class Compiler
          @namespace Ember.Handlebars
          @private
          @constructor
        */
        EmberHandlebars.Compiler = function() {};

        // Handlebars.Compiler doesn't exist in runtime-only
        if (Handlebars.Compiler) {
          EmberHandlebars.Compiler.prototype = objectCreate(Handlebars.Compiler.prototype);
        }

        EmberHandlebars.Compiler.prototype.compiler = EmberHandlebars.Compiler;

        /**
          @class JavaScriptCompiler
          @namespace Ember.Handlebars
          @private
          @constructor
        */
        EmberHandlebars.JavaScriptCompiler = function() {};

        // Handlebars.JavaScriptCompiler doesn't exist in runtime-only
        if (Handlebars.JavaScriptCompiler) {
          EmberHandlebars.JavaScriptCompiler.prototype = objectCreate(Handlebars.JavaScriptCompiler.prototype);
          EmberHandlebars.JavaScriptCompiler.prototype.compiler = EmberHandlebars.JavaScriptCompiler;
        }

        EmberHandlebars.JavaScriptCompiler.prototype.namespace = "Ember.Handlebars";

        EmberHandlebars.JavaScriptCompiler.prototype.initializeBuffer = function() {
          return "''";
        };

        /**
          Override the default buffer for Ember Handlebars. By default, Handlebars
          creates an empty String at the beginning of each invocation and appends to
          it. Ember's Handlebars overrides this to append to a single shared buffer.

          @private
          @method appendToBuffer
          @param string {String}
        */
        EmberHandlebars.JavaScriptCompiler.prototype.appendToBuffer = function(string) {
          return "data.buffer.push("+string+");";
        };

        // Hacks ahead:
        // Handlebars presently has a bug where the `blockHelperMissing` hook
        // doesn't get passed the name of the missing helper name, but rather
        // gets passed the value of that missing helper evaluated on the current
        // context, which is most likely `undefined` and totally useless.
        //
        // So we alter the compiled template function to pass the name of the helper
        // instead, as expected.
        //
        // This can go away once the following is closed:
        // https://github.com/wycats/handlebars.js/issues/634

        var DOT_LOOKUP_REGEX = /helpers\.(.*?)\)/,
            BRACKET_STRING_LOOKUP_REGEX = /helpers\['(.*?)'/,
            INVOCATION_SPLITTING_REGEX = /(.*blockHelperMissing\.call\(.*)(stack[0-9]+)(,.*)/;

        EmberHandlebars.JavaScriptCompiler.stringifyLastBlockHelperMissingInvocation = function(source) {
          var helperInvocation = source[source.length - 1],
              helperName = (DOT_LOOKUP_REGEX.exec(helperInvocation) || BRACKET_STRING_LOOKUP_REGEX.exec(helperInvocation))[1],
              matches = INVOCATION_SPLITTING_REGEX.exec(helperInvocation);

          source[source.length - 1] = matches[1] + "'" + helperName + "'" + matches[3];
        };

        var stringifyBlockHelperMissing = EmberHandlebars.JavaScriptCompiler.stringifyLastBlockHelperMissingInvocation;
        var originalBlockValue = EmberHandlebars.JavaScriptCompiler.prototype.blockValue;

        EmberHandlebars.JavaScriptCompiler.prototype.blockValue = function() {
          originalBlockValue.apply(this, arguments);
          stringifyBlockHelperMissing(this.source);
        };

        var originalAmbiguousBlockValue = EmberHandlebars.JavaScriptCompiler.prototype.ambiguousBlockValue;

        EmberHandlebars.JavaScriptCompiler.prototype.ambiguousBlockValue = function() {
          originalAmbiguousBlockValue.apply(this, arguments);
          stringifyBlockHelperMissing(this.source);
        };

        /**
          Rewrite simple mustaches from `{{foo}}` to `{{bind "foo"}}`. This means that
          all simple mustaches in Ember's Handlebars will also set up an observer to
          keep the DOM up to date when the underlying property changes.

          @private
          @method mustache
          @for Ember.Handlebars.Compiler
          @param mustache
        */
        EmberHandlebars.Compiler.prototype.mustache = function(mustache) {
          if (!(mustache.params.length || mustache.hash)) {
            var id = new Handlebars.AST.IdNode([{ part: '_triageMustache' }]);

            // Update the mustache node to include a hash value indicating whether the original node
            // was escaped. This will allow us to properly escape values when the underlying value
            // changes and we need to re-render the value.
            if (!mustache.escaped) {
              mustache.hash = mustache.hash || new Handlebars.AST.HashNode([]);
              mustache.hash.pairs.push(["unescaped", new Handlebars.AST.StringNode("true")]);
            }
            mustache = new Handlebars.AST.MustacheNode([id].concat([mustache.id]), mustache.hash, !mustache.escaped);
          }

          return Handlebars.Compiler.prototype.mustache.call(this, mustache);
        };

        /**
          Used for precompilation of Ember Handlebars templates. This will not be used
          during normal app execution.

          @method precompile
          @for Ember.Handlebars
          @static
          @param {String} string The template to precompile
          @param {Boolean} asObject optional parameter, defaulting to true, of whether or not the
                                    compiled template should be returned as an Object or a String
        */
        EmberHandlebars.precompile = function(string, asObject) {
          var ast = Handlebars.parse(string);

          var options = {
            knownHelpers: {
              action: true,
              unbound: true,
              'bind-attr': true,
              template: true,
              view: true,
              _triageMustache: true
            },
            data: true,
            stringParams: true
          };

          asObject = asObject === undefined ? true : asObject;

          var environment = new EmberHandlebars.Compiler().compile(ast, options);
          return new EmberHandlebars.JavaScriptCompiler().compile(environment, options, undefined, asObject);
        };

        // We don't support this for Handlebars runtime-only
        if (Handlebars.compile) {
          /**
            The entry point for Ember Handlebars. This replaces the default
            `Handlebars.compile` and turns on template-local data and String
            parameters.

            @method compile
            @for Ember.Handlebars
            @static
            @param {String} string The template to compile
            @return {Function}
          */
          EmberHandlebars.compile = function(string) {
            var ast = Handlebars.parse(string);
            var options = { data: true, stringParams: true };
            var environment = new EmberHandlebars.Compiler().compile(ast, options);
            var templateSpec = new EmberHandlebars.JavaScriptCompiler().compile(environment, options, undefined, true);

            var template = EmberHandlebars.template(templateSpec);
            template.isMethod = false; //Make sure we don't wrap templates with ._super

            return template;
          };
        }

        ember$handlebars$compiler$$default = EmberHandlebars;
    }).call(this);

    (function() {
        /**
          @module ember
          @submodule ember-runtime
        */

        var loadHooks = ember$metal$core$$default.ENV.EMBER_LOAD_HOOKS || {};

        var loaded = {};

        function onLoad(name, callback) {
          var object;

          loadHooks[name] = loadHooks[name] || ember$metal$core$$default.A();
          loadHooks[name].pushObject(callback);

          if (object = loaded[name]) {
            callback(object);
          }
        }

        ember$runtime$system$lazy_load$$onLoad = onLoad;

        function runLoadHooks(name, object) {
          loaded[name] = object;

          if (typeof window === 'object' && typeof window.dispatchEvent === 'function' && typeof CustomEvent === "function") {
            var event = new CustomEvent(name, {detail: object, name: name});
            window.dispatchEvent(event);
          }

          if (loadHooks[name]) {
            ember$metal$array$$forEach.call(loadHooks[name], function(callback) {
              callback(object);
            });
          }
        }

        ember$runtime$system$lazy_load$$runLoadHooks = runLoadHooks;
    }).call(this);

    (function() {
        var ComponentLookup = ember$runtime$system$object$$default.extend({
          lookupFactory: function(name, container) {

            container = container || this.container;

            var fullName = 'component:' + name,
                templateFullName = 'template:components/' + name,
                templateRegistered = container && container.has(templateFullName);

            if (templateRegistered) {
              container.injection(fullName, 'layout', templateFullName);
            }

            var Component = container.lookupFactory(fullName);

            // Only treat as a component if either the component
            // or a template has been registered.
            if (templateRegistered || Component) {
              if (!Component) {
                container.register(fullName, Ember.Component);
                Component = container.lookupFactory(fullName);
              }
              return Component;
            }
          }
        });

        ember$handlebars$component_lookup$$default = ComponentLookup;
    }).call(this);

    (function() {
        /**
        @module ember
        @submodule ember-handlebars
        */

        /**
          Find templates stored in the head tag as script tags and make them available
          to `Ember.CoreView` in the global `Ember.TEMPLATES` object. This will be run
          as as jQuery DOM-ready callback.

          Script tags with `text/x-handlebars` will be compiled
          with Ember's Handlebars and are suitable for use as a view's template.
          Those with type `text/x-raw-handlebars` will be compiled with regular
          Handlebars and are suitable for use in views' computed properties.

          @private
          @method bootstrap
          @for Ember.Handlebars
          @static
          @param ctx
        */
        function bootstrap(ctx) {
          var selectors = 'script[type="text/x-handlebars"], script[type="text/x-raw-handlebars"]';

          ember$views$system$jquery$$default(selectors, ctx)
            .each(function() {
            // Get a reference to the script tag
            var script = ember$views$system$jquery$$default(this);

            var compile = (script.attr('type') === 'text/x-raw-handlebars') ?
                          ember$views$system$jquery$$default.proxy(Handlebars.compile, Handlebars) :
                          ember$views$system$jquery$$default.proxy(ember$handlebars$compiler$$default.compile, ember$handlebars$compiler$$default),
              // Get the name of the script, used by Ember.View's templateName property.
              // First look for data-template-name attribute, then fall back to its
              // id if no name is found.
              templateName = script.attr('data-template-name') || script.attr('id') || 'application',
              template = compile(script.html());

            // Check if template of same name already exists
            if (Ember.TEMPLATES[templateName] !== undefined) {
              throw new ember$metal$error$$default('Template named "' + templateName  + '" already exists.');
            }

            // For templates which have a name, we save them and then remove them from the DOM
            Ember.TEMPLATES[templateName] = template;

            // Remove script tag from DOM
            script.remove();
          });
        }

        function _bootstrap() {
          bootstrap( ember$views$system$jquery$$default(document) );
        }

        function registerComponentLookup(container) {
          container.register('component-lookup:main', ember$handlebars$component_lookup$$default);
        }

        /*
          We tie this to application.load to ensure that we've at least
          attempted to bootstrap at the point that the application is loaded.

          We also tie this to document ready since we're guaranteed that all
          the inline templates are present at this point.

          There's no harm to running this twice, since we remove the templates
          from the DOM after processing.
        */

        ember$runtime$system$lazy_load$$onLoad('Ember.Application', function(Application) {
          Application.initializer({
            name: 'domTemplates',
            initialize: _bootstrap
          });

          Application.initializer({
            name: 'registerComponentLookup',
            after: 'domTemplates',
            initialize: registerComponentLookup
          });
        });

        ember$handlebars$loader$$default = bootstrap;
    }).call(this);

    (function() {
        var K = function() {},
            guid = 0,
            disableRange = (function(){
              if ('undefined' !== typeof MetamorphENV) {
                return MetamorphENV.DISABLE_RANGE_API;
              } else if ('undefined' !== ENV) {
                return ENV.DISABLE_RANGE_API;
              } else {
                return false;
              }
            })(),

            // Feature-detect the W3C range API, the extended check is for IE9 which only partially supports ranges
            supportsRange = (!disableRange) && typeof document !== 'undefined' && ('createRange' in document) && (typeof Range !== 'undefined') && Range.prototype.createContextualFragment,

            // Internet Explorer prior to 9 does not allow setting innerHTML if the first element
            // is a "zero-scope" element. This problem can be worked around by making
            // the first node an invisible text node. We, like Modernizr, use &shy;
            needsShy = typeof document !== 'undefined' && (function() {
              var testEl = document.createElement('div');
              testEl.innerHTML = "<div></div>";
              testEl.firstChild.innerHTML = "<script></script>";
              return testEl.firstChild.innerHTML === '';
            })(),


            // IE 8 (and likely earlier) likes to move whitespace preceeding
            // a script tag to appear after it. This means that we can
            // accidentally remove whitespace when updating a morph.
            movesWhitespace = document && (function() {
              var testEl = document.createElement('div');
              testEl.innerHTML = "Test: <script type='text/x-placeholder'></script>Value";
              return testEl.childNodes[0].nodeValue === 'Test:' &&
                      testEl.childNodes[2].nodeValue === ' Value';
            })();

        // Constructor that supports either Metamorph('foo') or new
        // Metamorph('foo');
        //
        // Takes a string of HTML as the argument.

        var Metamorph = function(html) {
          var self;

          if (this instanceof Metamorph) {
            self = this;
          } else {
            self = new K();
          }

          self.innerHTML = html;
          var myGuid = 'metamorph-'+(guid++);
          self.start = myGuid + '-start';
          self.end = myGuid + '-end';

          return self;
        };

        K.prototype = Metamorph.prototype;
        var rangeFor, htmlFunc, removeFunc, outerHTMLFunc, appendToFunc, afterFunc, prependFunc, startTagFunc, endTagFunc;

        outerHTMLFunc = function() {
          return this.startTag() + this.innerHTML + this.endTag();
        };

        startTagFunc = function() {
          /*
           * We replace chevron by its hex code in order to prevent escaping problems.
           * Check this thread for more explaination:
           * http://stackoverflow.com/questions/8231048/why-use-x3c-instead-of-when-generating-html-from-javascript
           */
          return "<script id='" + this.start + "' type='text/x-placeholder'>\x3C/script>";
        };

        endTagFunc = function() {
          /*
           * We replace chevron by its hex code in order to prevent escaping problems.
           * Check this thread for more explaination:
           * http://stackoverflow.com/questions/8231048/why-use-x3c-instead-of-when-generating-html-from-javascript
           */
          return "<script id='" + this.end + "' type='text/x-placeholder'>\x3C/script>";
        };

        // If we have the W3C range API, this process is relatively straight forward.
        if (supportsRange) {

          // Get a range for the current morph. Optionally include the starting and
          // ending placeholders.
          rangeFor = function(morph, outerToo) {
            var range = document.createRange();
            var before = document.getElementById(morph.start);
            var after = document.getElementById(morph.end);

            if (outerToo) {
              range.setStartBefore(before);
              range.setEndAfter(after);
            } else {
              range.setStartAfter(before);
              range.setEndBefore(after);
            }

            return range;
          };

          htmlFunc = function(html, outerToo) {
            // get a range for the current metamorph object
            var range = rangeFor(this, outerToo);

            // delete the contents of the range, which will be the
            // nodes between the starting and ending placeholder.
            range.deleteContents();

            // create a new document fragment for the HTML
            var fragment = range.createContextualFragment(html);

            // insert the fragment into the range
            range.insertNode(fragment);
          };

          /**
          * @public
          *
          * Remove this object (including starting and ending
          * placeholders).
          *
          * @method remove
          */
          removeFunc = function() {
            // get a range for the current metamorph object including
            // the starting and ending placeholders.
            var range = rangeFor(this, true);

            // delete the entire range.
            range.deleteContents();
          };

          appendToFunc = function(node) {
            var range = document.createRange();
            range.setStart(node);
            range.collapse(false);
            var frag = range.createContextualFragment(this.outerHTML());
            node.appendChild(frag);
          };

          afterFunc = function(html) {
            var range = document.createRange();
            var after = document.getElementById(this.end);

            range.setStartAfter(after);
            range.setEndAfter(after);

            var fragment = range.createContextualFragment(html);
            range.insertNode(fragment);
          };

          prependFunc = function(html) {
            var range = document.createRange();
            var start = document.getElementById(this.start);

            range.setStartAfter(start);
            range.setEndAfter(start);

            var fragment = range.createContextualFragment(html);
            range.insertNode(fragment);
          };

        } else {
          /*
           * This code is mostly taken from jQuery, with one exception. In jQuery's case, we
           * have some HTML and we need to figure out how to convert it into some nodes.
           *
           * In this case, jQuery needs to scan the HTML looking for an opening tag and use
           * that as the key for the wrap map. In our case, we know the parent node, and
           * can use its type as the key for the wrap map.
           **/
          var wrapMap = {
            select: [ 1, "<select multiple='multiple'>", "</select>" ],
            fieldset: [ 1, "<fieldset>", "</fieldset>" ],
            table: [ 1, "<table>", "</table>" ],
            tbody: [ 2, "<table><tbody>", "</tbody></table>" ],
            tr: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
            colgroup: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
            map: [ 1, "<map>", "</map>" ],
            _default: [ 0, "", "" ]
          };

          var findChildById = function(element, id) {
            if (element.getAttribute('id') === id) { return element; }

            var len = element.childNodes.length, idx, node, found;
            for (idx=0; idx<len; idx++) {
              node = element.childNodes[idx];
              found = node.nodeType === 1 && findChildById(node, id);
              if (found) { return found; }
            }
          };

          var setInnerHTML = function(element, html) {
            var matches = [];
            if (movesWhitespace) {
              // Right now we only check for script tags with ids with the
              // goal of targeting morphs.
              html = html.replace(/(\s+)(<script id='([^']+)')/g, function(match, spaces, tag, id) {
                matches.push([id, spaces]);
                return tag;
              });
            }

            element.innerHTML = html;

            // If we have to do any whitespace adjustments do them now
            if (matches.length > 0) {
              var len = matches.length, idx;
              for (idx=0; idx<len; idx++) {
                var script = findChildById(element, matches[idx][0]),
                    node = document.createTextNode(matches[idx][1]);
                script.parentNode.insertBefore(node, script);
              }
            }
          };

          /*
           * Given a parent node and some HTML, generate a set of nodes. Return the first
           * node, which will allow us to traverse the rest using nextSibling.
           *
           * We need to do this because innerHTML in IE does not really parse the nodes.
           */
          var firstNodeFor = function(parentNode, html) {
            var arr = wrapMap[parentNode.tagName.toLowerCase()] || wrapMap._default;
            var depth = arr[0], start = arr[1], end = arr[2];

            if (needsShy) { html = '&shy;'+html; }

            var element = document.createElement('div');

            setInnerHTML(element, start + html + end);

            for (var i=0; i<=depth; i++) {
              element = element.firstChild;
            }

            // Look for &shy; to remove it.
            if (needsShy) {
              var shyElement = element;

              // Sometimes we get nameless elements with the shy inside
              while (shyElement.nodeType === 1 && !shyElement.nodeName) {
                shyElement = shyElement.firstChild;
              }

              // At this point it's the actual unicode character.
              if (shyElement.nodeType === 3 && shyElement.nodeValue.charAt(0) === "\u00AD") {
                shyElement.nodeValue = shyElement.nodeValue.slice(1);
              }
            }

            return element;
          };

          /*
           * In some cases, Internet Explorer can create an anonymous node in
           * the hierarchy with no tagName. You can create this scenario via:
           *
           *     div = document.createElement("div");
           *     div.innerHTML = "<table>&shy<script></script><tr><td>hi</td></tr></table>";
           *     div.firstChild.firstChild.tagName //=> ""
           *
           * If our script markers are inside such a node, we need to find that
           * node and use *it* as the marker.
           */
          var realNode = function(start) {
            while (start.parentNode.tagName === "") {
              start = start.parentNode;
            }

            return start;
          };

          /*
           * When automatically adding a tbody, Internet Explorer inserts the
           * tbody immediately before the first <tr>. Other browsers create it
           * before the first node, no matter what.
           *
           * This means the the following code:
           *
           *     div = document.createElement("div");
           *     div.innerHTML = "<table><script id='first'></script><tr><td>hi</td></tr><script id='last'></script></table>
           *
           * Generates the following DOM in IE:
           *
           *     + div
           *       + table
           *         - script id='first'
           *         + tbody
           *           + tr
           *             + td
           *               - "hi"
           *           - script id='last'
           *
           * Which means that the two script tags, even though they were
           * inserted at the same point in the hierarchy in the original
           * HTML, now have different parents.
           *
           * This code reparents the first script tag by making it the tbody's
           * first child.
           *
           */
          var fixParentage = function(start, end) {
            if (start.parentNode !== end.parentNode) {
              end.parentNode.insertBefore(start, end.parentNode.firstChild);
            }
          };

          htmlFunc = function(html, outerToo) {
            // get the real starting node. see realNode for details.
            var start = realNode(document.getElementById(this.start));
            var end = document.getElementById(this.end);
            var parentNode = end.parentNode;
            var node, nextSibling, last;

            // make sure that the start and end nodes share the same
            // parent. If not, fix it.
            fixParentage(start, end);

            // remove all of the nodes after the starting placeholder and
            // before the ending placeholder.
            node = start.nextSibling;
            while (node) {
              nextSibling = node.nextSibling;
              last = node === end;

              // if this is the last node, and we want to remove it as well,
              // set the `end` node to the next sibling. This is because
              // for the rest of the function, we insert the new nodes
              // before the end (note that insertBefore(node, null) is
              // the same as appendChild(node)).
              //
              // if we do not want to remove it, just break.
              if (last) {
                if (outerToo) { end = node.nextSibling; } else { break; }
              }

              node.parentNode.removeChild(node);

              // if this is the last node and we didn't break before
              // (because we wanted to remove the outer nodes), break
              // now.
              if (last) { break; }

              node = nextSibling;
            }

            // get the first node for the HTML string, even in cases like
            // tables and lists where a simple innerHTML on a div would
            // swallow some of the content.
            node = firstNodeFor(start.parentNode, html);

            if (outerToo) {
              start.parentNode.removeChild(start);
            }

            // copy the nodes for the HTML between the starting and ending
            // placeholder.
            while (node) {
              nextSibling = node.nextSibling;
              parentNode.insertBefore(node, end);
              node = nextSibling;
            }
          };

          // remove the nodes in the DOM representing this metamorph.
          //
          // this includes the starting and ending placeholders.
          removeFunc = function() {
            var start = realNode(document.getElementById(this.start));
            var end = document.getElementById(this.end);

            this.html('');
            start.parentNode.removeChild(start);
            end.parentNode.removeChild(end);
          };

          appendToFunc = function(parentNode) {
            var node = firstNodeFor(parentNode, this.outerHTML());
            var nextSibling;

            while (node) {
              nextSibling = node.nextSibling;
              parentNode.appendChild(node);
              node = nextSibling;
            }
          };

          afterFunc = function(html) {
            // get the real starting node. see realNode for details.
            var end = document.getElementById(this.end);
            var insertBefore = end.nextSibling;
            var parentNode = end.parentNode;
            var nextSibling;
            var node;

            // get the first node for the HTML string, even in cases like
            // tables and lists where a simple innerHTML on a div would
            // swallow some of the content.
            node = firstNodeFor(parentNode, html);

            // copy the nodes for the HTML between the starting and ending
            // placeholder.
            while (node) {
              nextSibling = node.nextSibling;
              parentNode.insertBefore(node, insertBefore);
              node = nextSibling;
            }
          };

          prependFunc = function(html) {
            var start = document.getElementById(this.start);
            var parentNode = start.parentNode;
            var nextSibling;
            var node;

            node = firstNodeFor(parentNode, html);
            var insertBefore = start.nextSibling;

            while (node) {
              nextSibling = node.nextSibling;
              parentNode.insertBefore(node, insertBefore);
              node = nextSibling;
            }
          };
        }

        Metamorph.prototype.html = function(html) {
          this.checkRemoved();
          if (html === undefined) { return this.innerHTML; }

          htmlFunc.call(this, html);

          this.innerHTML = html;
        };

        Metamorph.prototype.replaceWith = function(html) {
          this.checkRemoved();
          htmlFunc.call(this, html, true);
        };

        Metamorph.prototype.remove = removeFunc;
        Metamorph.prototype.outerHTML = outerHTMLFunc;
        Metamorph.prototype.appendTo = appendToFunc;
        Metamorph.prototype.after = afterFunc;
        Metamorph.prototype.prepend = prependFunc;
        Metamorph.prototype.startTag = startTagFunc;
        Metamorph.prototype.endTag = endTagFunc;

        Metamorph.prototype.isRemoved = function() {
          var before = document.getElementById(this.start);
          var after = document.getElementById(this.end);

          return !before || !after;
        };

        Metamorph.prototype.checkRemoved = function() {
          if (this.isRemoved()) {
            throw new Error("Cannot perform operations on a Metamorph that is not in the DOM.");
          }
        };

        metamorph$$default = Metamorph;
    }).call(this);

    (function() {
        function notifyMutationListeners() {
          ember$metal$run_loop$$default.once(ember$views$views$view$$View, 'notifyMutationListeners');
        }

        // DOMManager should just abstract dom manipulation between jquery and metamorph
        var DOMManager = {
          remove: function(view) {
            view.morph.remove();
            notifyMutationListeners();
          },

          prepend: function(view, html) {
            view.morph.prepend(html);
            notifyMutationListeners();
          },

          after: function(view, html) {
            view.morph.after(html);
            notifyMutationListeners();
          },

          html: function(view, html) {
            view.morph.html(html);
            notifyMutationListeners();
          },

          // This is messed up.
          replace: function(view) {
            var morph = view.morph;

            view.transitionTo('preRender');

            ember$metal$run_loop$$default.schedule('render', this, function renderMetamorphView() {
              if (view.isDestroying) { return; }

              view.clearRenderedChildren();
              var buffer = view.renderToBuffer();

              view.invokeRecursively(function(view) {
                view.propertyWillChange('element');
              });
              view.triggerRecursively('willInsertElement');

              morph.replaceWith(buffer.string());
              view.transitionTo('inDOM');

              view.invokeRecursively(function(view) {
                view.propertyDidChange('element');
              });
              view.triggerRecursively('didInsertElement');

              notifyMutationListeners();
            });
          },

          empty: function(view) {
            view.morph.html("");
            notifyMutationListeners();
          }
        };

        ember$handlebars$views$metamorph_view$$_Metamorph = ember$metal$mixin$$Mixin.create({
          isVirtual: true,
          tagName: '',

          instrumentName: 'metamorph',

          init: function() {
            this._super();
            this.morph = metamorph$$default();
            ember$metal$core$$default.deprecate('Supplying a tagName to Metamorph views is unreliable and is deprecated. You may be setting the tagName on a Handlebars helper that creates a Metamorph.', !this.tagName);
          },

          beforeRender: function(buffer) {
            buffer.push(this.morph.startTag());
            buffer.pushOpeningTag();
          },

          afterRender: function(buffer) {
            buffer.pushClosingTag();
            buffer.push(this.morph.endTag());
          },

          createElement: function() {
            var buffer = this.renderToBuffer();
            this.outerHTML = buffer.string();
            this.clearBuffer();
          },

          domManager: DOMManager
        });

        ember$handlebars$views$metamorph_view$$_MetamorphView = ember$views$views$view$$View.extend(ember$handlebars$views$metamorph_view$$_Metamorph);
        ember$handlebars$views$metamorph_view$$_SimpleMetamorphView = ember$views$views$view$$CoreView.extend(ember$handlebars$views$metamorph_view$$_Metamorph);
    }).call(this);

    (function() {
        var SafeString = ember$handlebars$compiler$$default.SafeString;
        var K = ember$metal$core$$default.K;
        var viewStates = ember$views$views$states$$states;

        function SimpleHandlebarsView(path, pathRoot, isEscaped, templateData) {
          this.path = path;
          this.pathRoot = pathRoot;
          this.isEscaped = isEscaped;
          this.templateData = templateData;

          this.morph = metamorph$$default();
          this.state = 'preRender';
          this.updateId = null;
          this._parentView = null;
          this.buffer = null;
        }

        ember$handlebars$views$handlebars_bound_view$$SimpleHandlebarsView = SimpleHandlebarsView;

        ember$handlebars$views$handlebars_bound_view$$SimpleHandlebarsView.prototype = {
          isVirtual: true,
          isView: true,

          destroy: function () {
            if (this.updateId) {
              ember$metal$run_loop$$default.cancel(this.updateId);
              this.updateId = null;
            }
            if (this._parentView) {
              this._parentView.removeChild(this);
            }
            this.morph = null;
            this.state = 'destroyed';
          },

          propertyWillChange: K,

          propertyDidChange: K,

          normalizedValue: function() {
            var path = this.path,
                pathRoot = this.pathRoot,
                result, templateData;

            // Use the pathRoot as the result if no path is provided. This
            // happens if the path is `this`, which gets normalized into
            // a `pathRoot` of the current Handlebars context and a path
            // of `''`.
            if (path === '') {
              result = pathRoot;
            } else {
              templateData = this.templateData;
              result = ember$handlebars$ext$$handlebarsGet(pathRoot, path, { data: templateData });
            }

            return result;
          },

          renderToBuffer: function(buffer) {
            var string = '';

            string += this.morph.startTag();
            string += this.render();
            string += this.morph.endTag();

            buffer.push(string);
          },

          render: function() {
            // If not invoked via a triple-mustache ({{{foo}}}), escape
            // the content of the template.
            var escape = this.isEscaped;
            var result = this.normalizedValue();

            if (result === null || result === undefined) {
              result = "";
            } else if (!(result instanceof SafeString)) {
              result = String(result);
            }

            if (escape) { result = Handlebars.Utils.escapeExpression(result); }
            return result;
          },

          rerender: function() {
            switch(this.state) {
              case 'preRender':
              case 'destroyed':
                break;
              case 'inBuffer':
                throw new ember$metal$error$$default("Something you did tried to replace an {{expression}} before it was inserted into the DOM.");
              case 'hasElement':
              case 'inDOM':
                this.updateId = ember$metal$run_loop$$default.scheduleOnce('render', this, 'update');
                break;
            }

            return this;
          },

          update: function () {
            this.updateId = null;
            this.morph.html(this.render());
          },

          transitionTo: function(state) {
            this.state = state;
          }
        };

        ember$views$views$states$$states = ember$views$views$states$$cloneStates(viewStates);

        ember$metal$merge$$default(ember$views$views$states$$states._default, {
          rerenderIfNeeded: K
        });

        ember$metal$merge$$default(ember$views$views$states$$states.inDOM, {
          rerenderIfNeeded: function(view) {
            if (view.normalizedValue() !== view._lastNormalizedValue) {
              view.rerender();
            }
          }
        });

        ember$handlebars$views$handlebars_bound_view$$_HandlebarsBoundView = ember$handlebars$views$metamorph_view$$_MetamorphView.extend({
          instrumentName: 'boundHandlebars',

          _states: ember$views$views$states$$states,

          /**
            The function used to determine if the `displayTemplate` or
            `inverseTemplate` should be rendered. This should be a function that takes
            a value and returns a Boolean.

            @property shouldDisplayFunc
            @type Function
            @default null
          */
          shouldDisplayFunc: null,

          /**
            Whether the template rendered by this view gets passed the context object
            of its parent template, or gets passed the value of retrieving `path`
            from the `pathRoot`.

            For example, this is true when using the `{{#if}}` helper, because the
            template inside the helper should look up properties relative to the same
            object as outside the block. This would be `false` when used with `{{#with
            foo}}` because the template should receive the object found by evaluating
            `foo`.

            @property preserveContext
            @type Boolean
            @default false
          */
          preserveContext: false,

          /**
            If `preserveContext` is true, this is the object that will be used
            to render the template.

            @property previousContext
            @type Object
          */
          previousContext: null,

          /**
            The template to render when `shouldDisplayFunc` evaluates to `true`.

            @property displayTemplate
            @type Function
            @default null
          */
          displayTemplate: null,

          /**
            The template to render when `shouldDisplayFunc` evaluates to `false`.

            @property inverseTemplate
            @type Function
            @default null
          */
          inverseTemplate: null,


          /**
            The path to look up on `pathRoot` that is passed to
            `shouldDisplayFunc` to determine which template to render.

            In addition, if `preserveContext` is `false,` the object at this path will
            be passed to the template when rendering.

            @property path
            @type String
            @default null
          */
          path: null,

          /**
            The object from which the `path` will be looked up. Sometimes this is the
            same as the `previousContext`, but in cases where this view has been
            generated for paths that start with a keyword such as `view` or
            `controller`, the path root will be that resolved object.

            @property pathRoot
            @type Object
          */
          pathRoot: null,

          normalizedValue: function() {
            var path = ember$metal$property_get$$get(this, 'path'),
                pathRoot  = ember$metal$property_get$$get(this, 'pathRoot'),
                valueNormalizer = ember$metal$property_get$$get(this, 'valueNormalizerFunc'),
                result, templateData;

            // Use the pathRoot as the result if no path is provided. This
            // happens if the path is `this`, which gets normalized into
            // a `pathRoot` of the current Handlebars context and a path
            // of `''`.
            if (path === '') {
              result = pathRoot;
            } else {
              templateData = ember$metal$property_get$$get(this, 'templateData');
              result = ember$handlebars$ext$$handlebarsGet(pathRoot, path, { data: templateData });
            }

            return valueNormalizer ? valueNormalizer(result) : result;
          },

          rerenderIfNeeded: function() {
            this.currentState.rerenderIfNeeded(this);
          },

          /**
            Determines which template to invoke, sets up the correct state based on
            that logic, then invokes the default `Ember.View` `render` implementation.

            This method will first look up the `path` key on `pathRoot`,
            then pass that value to the `shouldDisplayFunc` function. If that returns
            `true,` the `displayTemplate` function will be rendered to DOM. Otherwise,
            `inverseTemplate`, if specified, will be rendered.

            For example, if this `Ember._HandlebarsBoundView` represented the `{{#with
            foo}}` helper, it would look up the `foo` property of its context, and
            `shouldDisplayFunc` would always return true. The object found by looking
            up `foo` would be passed to `displayTemplate`.

            @method render
            @param {Ember.RenderBuffer} buffer
          */
          render: function(buffer) {
            // If not invoked via a triple-mustache ({{{foo}}}), escape
            // the content of the template.
            var escape = ember$metal$property_get$$get(this, 'isEscaped');

            var shouldDisplay = ember$metal$property_get$$get(this, 'shouldDisplayFunc'),
                preserveContext = ember$metal$property_get$$get(this, 'preserveContext'),
                context = ember$metal$property_get$$get(this, 'previousContext');

            var inverseTemplate = ember$metal$property_get$$get(this, 'inverseTemplate'),
                displayTemplate = ember$metal$property_get$$get(this, 'displayTemplate');

            var result = this.normalizedValue();
            this._lastNormalizedValue = result;

            // First, test the conditional to see if we should
            // render the template or not.
            if (shouldDisplay(result)) {
              ember$metal$property_set$$set(this, 'template', displayTemplate);

              // If we are preserving the context (for example, if this
              // is an #if block, call the template with the same object.
              if (preserveContext) {
                ember$metal$property_set$$set(this, '_context', context);
              } else {
              // Otherwise, determine if this is a block bind or not.
              // If so, pass the specified object to the template
                if (displayTemplate) {
                  ember$metal$property_set$$set(this, '_context', result);
                } else {
                // This is not a bind block, just push the result of the
                // expression to the render context and return.
                  if (result === null || result === undefined) {
                    result = "";
                  } else if (!(result instanceof SafeString)) {
                    result = String(result);
                  }

                  if (escape) { result = Handlebars.Utils.escapeExpression(result); }
                  buffer.push(result);
                  return;
                }
              }
            } else if (inverseTemplate) {
              ember$metal$property_set$$set(this, 'template', inverseTemplate);

              if (preserveContext) {
                ember$metal$property_set$$set(this, '_context', context);
              } else {
                ember$metal$property_set$$set(this, '_context', result);
              }
            } else {
              ember$metal$property_set$$set(this, 'template', function() { return ''; });
            }

            return this._super(buffer);
          }
        });
    }).call(this);

    (function() {
        var helpers = ember$handlebars$compiler$$default.helpers;
        var SafeString = ember$handlebars$compiler$$default.SafeString;

        function exists(value) {
          return !ember$metal$is_none$$default(value);
        }

        var WithView = ember$handlebars$views$handlebars_bound_view$$_HandlebarsBoundView.extend({
          init: function() {
            var controller;

            ember$metal$utils$$apply(this, this._super, arguments);

            var keywords        = this.templateData.keywords;
            var keywordName     = this.templateHash.keywordName;
            var keywordPath     = this.templateHash.keywordPath;
            var controllerName  = this.templateHash.controller;
            var preserveContext = this.preserveContext;

            if (controllerName) {
              var previousContext = this.previousContext;
              controller = this.container.lookupFactory('controller:'+controllerName).create({
                parentController: previousContext,
                target: previousContext
              });

              this._generatedController = controller;

              if (!preserveContext) {
                this.set('controller', controller);

                this.valueNormalizerFunc = function(result) {
                    controller.set('model', result);
                    return controller;
                };
              } else {
                var controllerPath = ember$views$system$jquery$$default.expando + ember$metal$utils$$guidFor(controller);
                keywords[controllerPath] = controller;
                ember$metal$binding$$bind(keywords, controllerPath + '.model', keywordPath);
                keywordPath = controllerPath;
              }
            }

            if (preserveContext) {
              ember$metal$binding$$bind(keywords, keywordName, keywordPath);
            }

          },
          willDestroy: function() {
            this._super();

            if (this._generatedController) {
              this._generatedController.destroy();
            }
          }
        });

        // Binds a property into the DOM. This will create a hook in DOM that the
        // KVO system will look for and update if the property changes.
        function bind(property, options, preserveContext, shouldDisplay, valueNormalizer, childProperties) {
          var data = options.data,
              fn = options.fn,
              inverse = options.inverse,
              view = data.view,
              normalized, observer, i;

          // we relied on the behavior of calling without
          // context to mean this === window, but when running
          // "use strict", it's possible for this to === undefined;
          var currentContext = this || window;

          normalized = ember$handlebars$ext$$normalizePath(currentContext, property, data);

          // Set up observers for observable objects
          if ('object' === typeof this) {
            if (data.insideGroup) {
              observer = function() {
                while (view._contextView) {
                  view = view._contextView;
                }
                ember$metal$run_loop$$default.once(view, 'rerender');
              };

              var template, context, result = ember$handlebars$ext$$handlebarsGet(currentContext, property, options);

              result = valueNormalizer ? valueNormalizer(result) : result;

              context = preserveContext ? currentContext : result;
              if (shouldDisplay(result)) {
                template = fn;
              } else if (inverse) {
                template = inverse;
              }

              template(context, { data: options.data });
            } else {
              var viewClass = ember$handlebars$views$handlebars_bound_view$$_HandlebarsBoundView;
              var viewOptions = {
                preserveContext: preserveContext,
                shouldDisplayFunc: shouldDisplay,
                valueNormalizerFunc: valueNormalizer,
                displayTemplate: fn,
                inverseTemplate: inverse,
                path: property,
                pathRoot: currentContext,
                previousContext: currentContext,
                isEscaped: !options.hash.unescaped,
                templateData: options.data,
                templateHash: options.hash,
                helperName: options.helperName
              };

              if (options.isWithHelper) {
                viewClass = WithView;
              }

              // Create the view that will wrap the output of this template/property
              // and add it to the nearest view's childViews array.
              // See the documentation of Ember._HandlebarsBoundView for more.
              var bindView = view.createChildView(viewClass, viewOptions);

              view.appendChild(bindView);

              observer = function() {
                ember$metal$run_loop$$default.scheduleOnce('render', bindView, 'rerenderIfNeeded');
              };
            }

            // Observes the given property on the context and
            // tells the Ember._HandlebarsBoundView to re-render. If property
            // is an empty string, we are printing the current context
            // object ({{this}}) so updating it is not our responsibility.
            if (normalized.path !== '') {
              view.registerObserver(normalized.root, normalized.path, observer);
              if (childProperties) {
                for (i=0; i<childProperties.length; i++) {
                  view.registerObserver(normalized.root, normalized.path+'.'+childProperties[i], observer);
                }
              }
            }
          } else {
            // The object is not observable, so just render it out and
            // be done with it.
            data.buffer.push(ember$handlebars$ext$$getEscaped(currentContext, property, options));
          }
        }

        ember$handlebars$helpers$binding$$bind = bind;

        function simpleBind(currentContext, property, options) {
          var data = options.data,
              view = data.view,
              normalized, observer, pathRoot, output;

          normalized = ember$handlebars$ext$$normalizePath(currentContext, property, data);
          pathRoot = normalized.root;

          // Set up observers for observable objects
          if (pathRoot && ('object' === typeof pathRoot)) {
            if (data.insideGroup) {
              observer = function() {
                while (view._contextView) {
                  view = view._contextView;
                }
                ember$metal$run_loop$$default.once(view, 'rerender');
              };

              output = ember$handlebars$ext$$getEscaped(currentContext, property, options);

              data.buffer.push(output);
            } else {
              var bindView = new ember$handlebars$views$handlebars_bound_view$$SimpleHandlebarsView(
                property, currentContext, !options.hash.unescaped, options.data
              );

              bindView._parentView = view;
              view.appendChild(bindView);

              observer = function() {
                ember$metal$run_loop$$default.scheduleOnce('render', bindView, 'rerender');
              };
            }

            // Observes the given property on the context and
            // tells the Ember._HandlebarsBoundView to re-render. If property
            // is an empty string, we are printing the current context
            // object ({{this}}) so updating it is not our responsibility.
            if (normalized.path !== '') {
              view.registerObserver(normalized.root, normalized.path, observer);
            }
          } else {
            // The object is not observable, so just render it out and
            // be done with it.
            output = ember$handlebars$ext$$getEscaped(currentContext, property, options);
            data.buffer.push(output);
          }
        }

        function shouldDisplayIfHelperContent(result) {
          var truthy = result && ember$metal$property_get$$get(result, 'isTruthy');
          if (typeof truthy === 'boolean') { return truthy; }

          if (ember$metal$utils$$isArray(result)) {
            return ember$metal$property_get$$get(result, 'length') !== 0;
          } else {
            return !!result;
          }
        }

        /**
          '_triageMustache' is used internally select between a binding, helper, or component for
          the given context. Until this point, it would be hard to determine if the
          mustache is a property reference or a regular helper reference. This triage
          helper resolves that.

          This would not be typically invoked by directly.

          @private
          @method _triageMustache
          @for Ember.Handlebars.helpers
          @param {String} property Property/helperID to triage
          @param {Object} options hash of template/rendering options
          @return {String} HTML string
        */
        function _triageMustacheHelper(property, options) {
          ember$metal$core$$default.assert("You cannot pass more than one argument to the _triageMustache helper", arguments.length <= 2);

          var helper = ember$handlebars$compiler$$default.resolveHelper(options.data.view.container, property);
          if (helper) {
            return helper.call(this, options);
          }

          return helpers.bind.call(this, property, options);
        }

        ember$handlebars$helpers$binding$$_triageMustacheHelper = _triageMustacheHelper;

        /**
          Used to lookup/resolve handlebars helpers. The lookup order is:

          * Look for a registered helper
          * If a dash exists in the name:
            * Look for a helper registed in the container
            * Use Ember.ComponentLookup to find an Ember.Component that resolves
              to the given name

          @private
          @method resolveHelper
          @param {Container} container
          @param {String} name the name of the helper to lookup
          @return {Handlebars Helper}
        */
        function resolveHelper(container, name) {
          if (helpers[name]) {
            return helpers[name];
          }

          if (!container || name.indexOf('-') === -1) {
            return;
          }

          var helper = container.lookup('helper:' + name);
          if (!helper) {
            var componentLookup = container.lookup('component-lookup:main');
            ember$metal$core$$default.assert("Could not find 'component-lookup:main' on the provided container, which is necessary for performing component lookups", componentLookup);

            var Component = componentLookup.lookupFactory(name, container);
            if (Component) {
              helper = ember$handlebars$compiler$$default.makeViewHelper(Component);
              container.register('helper:' + name, helper);
            }
          }
          return helper;
        }

        ember$handlebars$helpers$binding$$resolveHelper = resolveHelper;

        /**
          `bind` can be used to display a value, then update that value if it
          changes. For example, if you wanted to print the `title` property of
          `content`:

          ```handlebars
          {{bind "content.title"}}
          ```

          This will return the `title` property as a string, then create a new observer
          at the specified path. If it changes, it will update the value in DOM. Note
          that if you need to support IE7 and IE8 you must modify the model objects
          properties using `Ember.get()` and `Ember.set()` for this to work as it
          relies on Ember's KVO system. For all other browsers this will be handled for
          you automatically.

          @private
          @method bind
          @for Ember.Handlebars.helpers
          @param {String} property Property to bind
          @param {Function} fn Context to provide for rendering
          @return {String} HTML string
        */
        function bindHelper(property, options) {
          ember$metal$core$$default.assert("You cannot pass more than one argument to the bind helper", arguments.length <= 2);

          var context = (options.contexts && options.contexts.length) ? options.contexts[0] : this;

          if (!options.fn) {
            return simpleBind(context, property, options);
          }

          options.helperName = 'bind';

          return ember$handlebars$helpers$binding$$bind.call(context, property, options, false, exists);
        }

        ember$handlebars$helpers$binding$$bindHelper = bindHelper;

        /**
          Use the `boundIf` helper to create a conditional that re-evaluates
          whenever the truthiness of the bound value changes.

          ```handlebars
          {{#boundIf "content.shouldDisplayTitle"}}
            {{content.title}}
          {{/boundIf}}
          ```

          @private
          @method boundIf
          @for Ember.Handlebars.helpers
          @param {String} property Property to bind
          @param {Function} fn Context to provide for rendering
          @return {String} HTML string
        */
        function boundIfHelper(property, fn) {
          var context = (fn.contexts && fn.contexts.length) ? fn.contexts[0] : this;

          fn.helperName = fn.helperName || 'boundIf';

          return ember$handlebars$helpers$binding$$bind.call(context, property, fn, true, shouldDisplayIfHelperContent, shouldDisplayIfHelperContent, ['isTruthy', 'length']);
        }

        ember$handlebars$helpers$binding$$boundIfHelper = boundIfHelper;

        /**
          @private

          Use the `unboundIf` helper to create a conditional that evaluates once.

          ```handlebars
          {{#unboundIf "content.shouldDisplayTitle"}}
            {{content.title}}
          {{/unboundIf}}
          ```

          @method unboundIf
          @for Ember.Handlebars.helpers
          @param {String} property Property to bind
          @param {Function} fn Context to provide for rendering
          @return {String} HTML string
          @since 1.4.0
        */
        function unboundIfHelper(property, fn) {
          var context = (fn.contexts && fn.contexts.length) ? fn.contexts[0] : this,
              data = fn.data,
              template = fn.fn,
              inverse = fn.inverse,
              normalized, propertyValue, result;

          normalized = ember$handlebars$ext$$normalizePath(context, property, data);
          propertyValue = ember$handlebars$ext$$handlebarsGet(context, property, fn);

          if (!shouldDisplayIfHelperContent(propertyValue)) {
            template = inverse;
          }

          template(context, { data: data });
        }

        ember$handlebars$helpers$binding$$unboundIfHelper = unboundIfHelper;

        /**
          Use the `{{with}}` helper when you want to scope context. Take the following code as an example:

          ```handlebars
          <h5>{{user.name}}</h5>

          <div class="role">
            <h6>{{user.role.label}}</h6>
            <span class="role-id">{{user.role.id}}</span>

            <p class="role-desc">{{user.role.description}}</p>
          </div>
          ```

          `{{with}}` can be our best friend in these cases,
          instead of writing `user.role.*` over and over, we use `{{#with user.role}}`.
          Now the context within the `{{#with}} .. {{/with}}` block is `user.role` so you can do the following:

          ```handlebars
          <h5>{{user.name}}</h5>

          <div class="role">
            {{#with user.role}}
              <h6>{{label}}</h6>
              <span class="role-id">{{id}}</span>

              <p class="role-desc">{{description}}</p>
            {{/with}}
          </div>
          ```

          ### `as` operator

          This operator aliases the scope to a new name. It's helpful for semantic clarity and to retain
          default scope or to reference from another `{{with}}` block.

          ```handlebars
          // posts might not be
          {{#with user.posts as blogPosts}}
            <div class="notice">
              There are {{blogPosts.length}} blog posts written by {{user.name}}.
            </div>

            {{#each post in blogPosts}}
              <li>{{post.title}}</li>
            {{/each}}
          {{/with}}
          ```

          Without the `as` operator, it would be impossible to reference `user.name` in the example above.

          NOTE: The alias should not reuse a name from the bound property path.
          For example: `{{#with foo.bar as foo}}` is not supported because it attempts to alias using
          the first part of the property path, `foo`. Instead, use `{{#with foo.bar as baz}}`.

          ### `controller` option

          Adding `controller='something'` instructs the `{{with}}` helper to create and use an instance of
          the specified controller with the new context as its content.

          This is very similar to using an `itemController` option with the `{{each}}` helper.

          ```handlebars
          {{#with users.posts controller='userBlogPosts'}}
            {{!- The current context is wrapped in our controller instance }}
          {{/with}}
          ```

          In the above example, the template provided to the `{{with}}` block is now wrapped in the
          `userBlogPost` controller, which provides a very elegant way to decorate the context with custom
          functions/properties.

          @method with
          @for Ember.Handlebars.helpers
          @param {Function} context
          @param {Hash} options
          @return {String} HTML string
        */
        function withHelper(context, options) {
          var bindContext, preserveContext, controller, helperName = 'with';

          if (arguments.length === 4) {
            var keywordName, path, rootPath, normalized, contextPath;

            ember$metal$core$$default.assert("If you pass more than one argument to the with helper, it must be in the form #with foo as bar", arguments[1] === "as");
            options = arguments[3];
            keywordName = arguments[2];
            path = arguments[0];

            if (path) {
              helperName += ' ' + path + ' as ' + keywordName;
            }

            ember$metal$core$$default.assert("You must pass a block to the with helper", options.fn && options.fn !== Handlebars.VM.noop);

            var localizedOptions = ember$metal$platform$$create(options);
            localizedOptions.data = ember$metal$platform$$create(options.data);
            localizedOptions.data.keywords = ember$metal$platform$$create(options.data.keywords || {});

            if (ember$metal$binding$$isGlobalPath(path)) {
              contextPath = path;
            } else {
              normalized = ember$handlebars$ext$$normalizePath(this, path, options.data);
              path = normalized.path;
              rootPath = normalized.root;

              // This is a workaround for the fact that you cannot bind separate objects
              // together. When we implement that functionality, we should use it here.
              var contextKey = ember$views$system$jquery$$default.expando + ember$metal$utils$$guidFor(rootPath);
              localizedOptions.data.keywords[contextKey] = rootPath;
              // if the path is '' ("this"), just bind directly to the current context
              contextPath = path ? contextKey + '.' + path : contextKey;
            }

            localizedOptions.hash.keywordName = keywordName;
            localizedOptions.hash.keywordPath = contextPath;

            bindContext = this;
            context = path;
            options = localizedOptions;
            preserveContext = true;
          } else {
            ember$metal$core$$default.assert("You must pass exactly one argument to the with helper", arguments.length === 2);
            ember$metal$core$$default.assert("You must pass a block to the with helper", options.fn && options.fn !== Handlebars.VM.noop);

            helperName += ' ' + context;
            bindContext = options.contexts[0];
            preserveContext = false;
          }

          options.helperName = helperName;
          options.isWithHelper = true;

          return ember$handlebars$helpers$binding$$bind.call(bindContext, context, options, preserveContext, exists);
        }

        ember$handlebars$helpers$binding$$withHelper = withHelper;

        /**
          See [boundIf](/api/classes/Ember.Handlebars.helpers.html#method_boundIf)
          and [unboundIf](/api/classes/Ember.Handlebars.helpers.html#method_unboundIf)

          @method if
          @for Ember.Handlebars.helpers
          @param {Function} context
          @param {Hash} options
          @return {String} HTML string
        */
        function ifHelper(context, options) {
          ember$metal$core$$default.assert("You must pass exactly one argument to the if helper", arguments.length === 2);
          ember$metal$core$$default.assert("You must pass a block to the if helper", options.fn && options.fn !== Handlebars.VM.noop);

          options.helperName = options.helperName || ('if ' + context);

          if (options.data.isUnbound) {
            return helpers.unboundIf.call(options.contexts[0], context, options);
          } else {
            return helpers.boundIf.call(options.contexts[0], context, options);
          }
        }

        ember$handlebars$helpers$binding$$ifHelper = ifHelper;

        /**
          @method unless
          @for Ember.Handlebars.helpers
          @param {Function} context
          @param {Hash} options
          @return {String} HTML string
        */
        function unlessHelper(context, options) {
          ember$metal$core$$default.assert("You must pass exactly one argument to the unless helper", arguments.length === 2);
          ember$metal$core$$default.assert("You must pass a block to the unless helper", options.fn && options.fn !== Handlebars.VM.noop);

          var fn = options.fn, inverse = options.inverse, helperName = 'unless';

          if (context) {
            helperName += ' ' + context;
          }

          options.fn = inverse;
          options.inverse = fn;

          options.helperName = options.helperName || helperName;

          if (options.data.isUnbound) {
            return helpers.unboundIf.call(options.contexts[0], context, options);
          } else {
            return helpers.boundIf.call(options.contexts[0], context, options);
          }
        }

        ember$handlebars$helpers$binding$$unlessHelper = unlessHelper;

        /**
          `bind-attr` allows you to create a binding between DOM element attributes and
          Ember objects. For example:

          ```handlebars
          <img {{bind-attr src="imageUrl" alt="imageTitle"}}>
          ```

          The above handlebars template will fill the `<img>`'s `src` attribute will
          the value of the property referenced with `"imageUrl"` and its `alt`
          attribute with the value of the property referenced with `"imageTitle"`.

          If the rendering context of this template is the following object:

          ```javascript
          {
            imageUrl: 'http://lolcats.info/haz-a-funny',
            imageTitle: 'A humorous image of a cat'
          }
          ```

          The resulting HTML output will be:

          ```html
          <img src="http://lolcats.info/haz-a-funny" alt="A humorous image of a cat">
          ```

          `bind-attr` cannot redeclare existing DOM element attributes. The use of `src`
          in the following `bind-attr` example will be ignored and the hard coded value
          of `src="/failwhale.gif"` will take precedence:

          ```handlebars
          <img src="/failwhale.gif" {{bind-attr src="imageUrl" alt="imageTitle"}}>
          ```

          ### `bind-attr` and the `class` attribute

          `bind-attr` supports a special syntax for handling a number of cases unique
          to the `class` DOM element attribute. The `class` attribute combines
          multiple discrete values into a single attribute as a space-delimited
          list of strings. Each string can be:

          * a string return value of an object's property.
          * a boolean return value of an object's property
          * a hard-coded value

          A string return value works identically to other uses of `bind-attr`. The
          return value of the property will become the value of the attribute. For
          example, the following view and template:

          ```javascript
            AView = View.extend({
              someProperty: function() {
                return "aValue";
              }.property()
            })
          ```

          ```handlebars
          <img {{bind-attr class="view.someProperty}}>
          ```

          Result in the following rendered output:

          ```html
          <img class="aValue">
          ```

          A boolean return value will insert a specified class name if the property
          returns `true` and remove the class name if the property returns `false`.

          A class name is provided via the syntax
          `somePropertyName:class-name-if-true`.

          ```javascript
          AView = View.extend({
            someBool: true
          })
          ```

          ```handlebars
          <img {{bind-attr class="view.someBool:class-name-if-true"}}>
          ```

          Result in the following rendered output:

          ```html
          <img class="class-name-if-true">
          ```

          An additional section of the binding can be provided if you want to
          replace the existing class instead of removing it when the boolean
          value changes:

          ```handlebars
          <img {{bind-attr class="view.someBool:class-name-if-true:class-name-if-false"}}>
          ```

          A hard-coded value can be used by prepending `:` to the desired
          class name: `:class-name-to-always-apply`.

          ```handlebars
          <img {{bind-attr class=":class-name-to-always-apply"}}>
          ```

          Results in the following rendered output:

          ```html
          <img class="class-name-to-always-apply">
          ```

          All three strategies - string return value, boolean return value, and
          hard-coded value – can be combined in a single declaration:

          ```handlebars
          <img {{bind-attr class=":class-name-to-always-apply view.someBool:class-name-if-true view.someProperty"}}>
          ```

          @method bind-attr
          @for Ember.Handlebars.helpers
          @param {Hash} options
          @return {String} HTML string
        */
        function bindAttrHelper(options) {
          var attrs = options.hash;

          ember$metal$core$$default.assert("You must specify at least one hash argument to bind-attr", !!ember$runtime$keys$$default(attrs).length);

          var view = options.data.view;
          var ret = [];

          // we relied on the behavior of calling without
          // context to mean this === window, but when running
          // "use strict", it's possible for this to === undefined;
          var ctx = this || window;

          // Generate a unique id for this element. This will be added as a
          // data attribute to the element so it can be looked up when
          // the bound property changes.
          var dataId = ++ember$metal$core$$default.uuid;

          // Handle classes differently, as we can bind multiple classes
          var classBindings = attrs['class'];
          if (classBindings != null) {
            var classResults = ember$handlebars$helpers$binding$$bindClasses(ctx, classBindings, view, dataId, options);

            ret.push('class="' + Handlebars.Utils.escapeExpression(classResults.join(' ')) + '"');
            delete attrs['class'];
          }

          var attrKeys = ember$runtime$keys$$default(attrs);

          // For each attribute passed, create an observer and emit the
          // current value of the property as an attribute.
          ember$metal$array$$forEach.call(attrKeys, function(attr) {
            var path = attrs[attr],
                normalized;

            ember$metal$core$$default.assert(ember$runtime$system$string$$fmt("You must provide an expression as the value of bound attribute. You specified: %@=%@", [attr, path]), typeof path === 'string');

            normalized = ember$handlebars$ext$$normalizePath(ctx, path, options.data);

            var value = (path === 'this') ? normalized.root : ember$handlebars$ext$$handlebarsGet(ctx, path, options),
                type = ember$metal$utils$$typeOf(value);

            ember$metal$core$$default.assert(ember$runtime$system$string$$fmt("Attributes must be numbers, strings or booleans, not %@", [value]), value === null || value === undefined || type === 'number' || type === 'string' || type === 'boolean');

            var observer;

            observer = function observer() {
              var result = ember$handlebars$ext$$handlebarsGet(ctx, path, options);

              ember$metal$core$$default.assert(ember$runtime$system$string$$fmt("Attributes must be numbers, strings or booleans, not %@", [result]),
                           result === null || result === undefined || typeof result === 'number' ||
                             typeof result === 'string' || typeof result === 'boolean');

              var elem = view.$("[data-bindattr-" + dataId + "='" + dataId + "']");

              // If we aren't able to find the element, it means the element
              // to which we were bound has been removed from the view.
              // In that case, we can assume the template has been re-rendered
              // and we need to clean up the observer.
              if (!elem || elem.length === 0) {
                ember$metal$observer$$removeObserver(normalized.root, normalized.path, observer);
                return;
              }

              ember$views$views$view$$View.applyAttributeBindings(elem, attr, result);
            };

            // Add an observer to the view for when the property changes.
            // When the observer fires, find the element using the
            // unique data id and update the attribute to the new value.
            // Note: don't add observer when path is 'this' or path
            // is whole keyword e.g. {{#each x in list}} ... {{bind-attr attr="x"}}
            if (path !== 'this' && !(normalized.isKeyword && normalized.path === '' )) {
              view.registerObserver(normalized.root, normalized.path, observer);
            }

            // if this changes, also change the logic in ember-views/lib/views/view.js
            if ((type === 'string' || (type === 'number' && !isNaN(value)))) {
              ret.push(attr + '="' + Handlebars.Utils.escapeExpression(value) + '"');
            } else if (value && type === 'boolean') {
              // The developer controls the attr name, so it should always be safe
              ret.push(attr + '="' + attr + '"');
            }
          }, this);

          // Add the unique identifier
          // NOTE: We use all lower-case since Firefox has problems with mixed case in SVG
          ret.push('data-bindattr-' + dataId + '="' + dataId + '"');
          return new SafeString(ret.join(' '));
        }

        ember$handlebars$helpers$binding$$bindAttrHelper = bindAttrHelper;

        /**
          See `bind-attr`

          @method bindAttr
          @for Ember.Handlebars.helpers
          @deprecated
          @param {Function} context
          @param {Hash} options
          @return {String} HTML string
        */
        function bindAttrHelperDeprecated() {
          ember$metal$core$$default.warn("The 'bindAttr' view helper is deprecated in favor of 'bind-attr'");
          return helpers['bind-attr'].apply(this, arguments);
        }

        ember$handlebars$helpers$binding$$bindAttrHelperDeprecated = bindAttrHelperDeprecated;

        /**
          Helper that, given a space-separated string of property paths and a context,
          returns an array of class names. Calling this method also has the side
          effect of setting up observers at those property paths, such that if they
          change, the correct class name will be reapplied to the DOM element.

          For example, if you pass the string "fooBar", it will first look up the
          "fooBar" value of the context. If that value is true, it will add the
          "foo-bar" class to the current element (i.e., the dasherized form of
          "fooBar"). If the value is a string, it will add that string as the class.
          Otherwise, it will not add any new class name.

          @private
          @method bindClasses
          @for Ember.Handlebars
          @param {Ember.Object} context The context from which to lookup properties
          @param {String} classBindings A string, space-separated, of class bindings
            to use
          @param {View} view The view in which observers should look for the
            element to update
          @param {Srting} bindAttrId Optional bindAttr id used to lookup elements
          @return {Array} An array of class names to add
        */
        function bindClasses(context, classBindings, view, bindAttrId, options) {
          var ret = [], newClass, value, elem;

          // Helper method to retrieve the property from the context and
          // determine which class string to return, based on whether it is
          // a Boolean or not.
          var classStringForPath = function(root, parsedPath, options) {
            var val,
                path = parsedPath.path;

            if (path === 'this') {
              val = root;
            } else if (path === '') {
              val = true;
            } else {
              val = ember$handlebars$ext$$handlebarsGet(root, path, options);
            }

            return ember$views$views$view$$View._classStringForValue(path, val, parsedPath.className, parsedPath.falsyClassName);
          };

          // For each property passed, loop through and setup
          // an observer.
          ember$metal$array$$forEach.call(classBindings.split(' '), function(binding) {

            // Variable in which the old class value is saved. The observer function
            // closes over this variable, so it knows which string to remove when
            // the property changes.
            var oldClass;

            var observer;

            var parsedPath = ember$views$views$view$$View._parsePropertyPath(binding),
                path = parsedPath.path,
                pathRoot = context,
                normalized;

            if (path !== '' && path !== 'this') {
              normalized = ember$handlebars$ext$$normalizePath(context, path, options.data);

              pathRoot = normalized.root;
              path = normalized.path;
            }

            // Set up an observer on the context. If the property changes, toggle the
            // class name.
            observer = function() {
              // Get the current value of the property
              newClass = classStringForPath(context, parsedPath, options);
              elem = bindAttrId ? view.$("[data-bindattr-" + bindAttrId + "='" + bindAttrId + "']") : view.$();

              // If we can't find the element anymore, a parent template has been
              // re-rendered and we've been nuked. Remove the observer.
              if (!elem || elem.length === 0) {
                ember$metal$observer$$removeObserver(pathRoot, path, observer);
              } else {
                // If we had previously added a class to the element, remove it.
                if (oldClass) {
                  elem.removeClass(oldClass);
                }

                // If necessary, add a new class. Make sure we keep track of it so
                // it can be removed in the future.
                if (newClass) {
                  elem.addClass(newClass);
                  oldClass = newClass;
                } else {
                  oldClass = null;
                }
              }
            };

            if (path !== '' && path !== 'this') {
              view.registerObserver(pathRoot, path, observer);
            }

            // We've already setup the observer; now we just need to figure out the
            // correct behavior right now on the first pass through.
            value = classStringForPath(context, parsedPath, options);

            if (value) {
              ret.push(value);

              // Make sure we save the current value so that it can be removed if the
              // observer fires.
              oldClass = value;
            }
          });

          return ret;
        }

        ember$handlebars$helpers$binding$$bindClasses = bindClasses;
    }).call(this);

    (function() {
        var helpers = ember$handlebars$compiler$$default.helpers;
        var slice = [].slice, originalTemplate = ember$handlebars$compiler$$default.template;

        /**
          If a path starts with a reserved keyword, returns the root
          that should be used.

          @private
          @method normalizePath
          @for Ember
          @param root {Object}
          @param path {String}
          @param data {Hash}
        */
        function normalizePath(root, path, data) {
          var keywords = (data && data.keywords) || {},
              keyword, isKeyword;

          // Get the first segment of the path. For example, if the
          // path is "foo.bar.baz", returns "foo".
          keyword = path.split('.', 1)[0];

          // Test to see if the first path is a keyword that has been
          // passed along in the view's data hash. If so, we will treat
          // that object as the new root.
          if (keywords.hasOwnProperty(keyword)) {
            // Look up the value in the template's data hash.
            root = keywords[keyword];
            isKeyword = true;

            // Handle cases where the entire path is the reserved
            // word. In that case, return the object itself.
            if (path === keyword) {
              path = '';
            } else {
              // Strip the keyword from the path and look up
              // the remainder from the newly found root.
              path = path.substr(keyword.length+1);
            }
          }

          return { root: root, path: path, isKeyword: isKeyword };
        }

        ember$handlebars$ext$$normalizePath = normalizePath;

        /**
          Lookup both on root and on window. If the path starts with
          a keyword, the corresponding object will be looked up in the
          template's data hash and used to resolve the path.

          @method get
          @for Ember.Handlebars
          @param {Object} root The object to look up the property on
          @param {String} path The path to be lookedup
          @param {Object} options The template's option hash
        */
        function handlebarsGet(root, path, options) {
          var data = options && options.data,
              normalizedPath = ember$handlebars$ext$$normalizePath(root, path, data),
              value;

          if (ember$metal$core$$default.FEATURES.isEnabled("ember-handlebars-caps-lookup")) {

            // If the path starts with a capital letter, look it up on Ember.lookup,
            // which defaults to the `window` object in browsers.
            if (ember$metal$binding$$isGlobalPath(path)) {
              value = ember$metal$property_get$$get(ember$metal$core$$default.lookup, path);
            } else {

              // In cases where the path begins with a keyword, change the
              // root to the value represented by that keyword, and ensure
              // the path is relative to it.
              value = ember$metal$property_get$$get(normalizedPath.root, normalizedPath.path);
            }

          } else {
            root = normalizedPath.root;
            path = normalizedPath.path;

            value = ember$metal$property_get$$get(root, path);

            if (value === undefined && root !== ember$metal$core$$default.lookup && ember$metal$binding$$isGlobalPath(path)) {
              value = ember$metal$property_get$$get(ember$metal$core$$default.lookup, path);
            }
          }

          return value;
        }

        ember$handlebars$ext$$handlebarsGet = handlebarsGet;

        function getEscaped(root, path, options) {
          var result = ember$handlebars$ext$$handlebarsGet(root, path, options);

          if (result === null || result === undefined) {
            result = "";
          } else if (!(result instanceof Handlebars.SafeString)) {
            result = String(result);
          }
          if (!options.hash.unescaped){
            result = Handlebars.Utils.escapeExpression(result);
          }

          return result;
        }

        ember$handlebars$ext$$getEscaped = getEscaped;

        function resolveParams(context, params, options) {
          var resolvedParams = [], types = options.types, param, type;

          for (var i=0, l=params.length; i<l; i++) {
            param = params[i];
            type = types[i];

            if (type === 'ID') {
              resolvedParams.push(ember$handlebars$ext$$handlebarsGet(context, param, options));
            } else {
              resolvedParams.push(param);
            }
          }

          return resolvedParams;
        }

        ember$handlebars$ext$$resolveParams = resolveParams;

        function resolveHash(context, hash, options) {
          var resolvedHash = {}, types = options.hashTypes, type;

          for (var key in hash) {
            if (!hash.hasOwnProperty(key)) { continue; }

            type = types[key];

            if (type === 'ID') {
              resolvedHash[key] = ember$handlebars$ext$$handlebarsGet(context, hash[key], options);
            } else {
              resolvedHash[key] = hash[key];
            }
          }

          return resolvedHash;
        }

        ember$handlebars$ext$$resolveHash = resolveHash;

        function helperMissingHelper(path) {
          var error, view = "";

          var options = arguments[arguments.length - 1];

          var helper = ember$handlebars$helpers$binding$$resolveHelper(options.data.view.container, path);

          if (helper) {
            return helper.apply(this, slice.call(arguments, 1));
          }

          error = "%@ Handlebars error: Could not find property '%@' on object %@.";
          if (options.data) {
            view = options.data.view;
          }
          throw new ember$metal$error$$default(ember$runtime$system$string$$fmt(error, [view, path, this]));
        }

        ember$handlebars$ext$$helperMissingHelper = helperMissingHelper;

        function blockHelperMissingHelper(path) {
          var options = arguments[arguments.length - 1];

          ember$metal$core$$default.assert("`blockHelperMissing` was invoked without a helper name, which " +
                       "is most likely due to a mismatch between the version of " +
                       "Ember.js you're running now and the one used to precompile your " +
                       "templates. Please make sure the version of " +
                       "`ember-handlebars-compiler` you're using is up to date.", path);

          var helper = ember$handlebars$helpers$binding$$resolveHelper(options.data.view.container, path);

          if (helper) {
            return helper.apply(this, slice.call(arguments, 1));
          } else {
            return helpers.helperMissing.call(this, path);
          }
        }

        ember$handlebars$ext$$blockHelperMissingHelper = blockHelperMissingHelper;

        function registerBoundHelper(name, fn) {
          var boundHelperArgs = slice.call(arguments, 1),
              boundFn = ember$handlebars$ext$$makeBoundHelper.apply(this, boundHelperArgs);
          ember$handlebars$compiler$$default.registerHelper(name, boundFn);
        }

        ember$handlebars$ext$$registerBoundHelper = registerBoundHelper;

        /**
          A helper function used by `registerBoundHelper`. Takes the
          provided Handlebars helper function fn and returns it in wrapped
          bound helper form.

          The main use case for using this outside of `registerBoundHelper`
          is for registering helpers on the container:

          ```js
          var boundHelperFn = Ember.Handlebars.makeBoundHelper(function(word) {
            return word.toUpperCase();
          });

          container.register('helper:my-bound-helper', boundHelperFn);
          ```

          In the above example, if the helper function hadn't been wrapped in
          `makeBoundHelper`, the registered helper would be unbound.

          @method makeBoundHelper
          @for Ember.Handlebars
          @param {Function} function
          @param {String} dependentKeys*
          @since 1.2.0
        */
        function makeBoundHelper(fn) {
          var dependentKeys = slice.call(arguments, 1);

          function helper() {
            var properties = slice.call(arguments, 0, -1),
              numProperties = properties.length,
              options = arguments[arguments.length - 1],
              normalizedProperties = [],
              data = options.data,
              types = data.isUnbound ? slice.call(options.types, 1) : options.types,
              hash = options.hash,
              view = data.view,
              contexts = options.contexts,
              currentContext = (contexts && contexts.length) ? contexts[0] : this,
              prefixPathForDependentKeys = '',
              loc, len, hashOption,
              boundOption, property,
              normalizedValue = ember$handlebars$views$handlebars_bound_view$$SimpleHandlebarsView.prototype.normalizedValue;

            ember$metal$core$$default.assert("registerBoundHelper-generated helpers do not support use with Handlebars blocks.", !options.fn);

            // Detect bound options (e.g. countBinding="otherCount")
            var boundOptions = hash.boundOptions = {};
            for (hashOption in hash) {
              if (ember$metal$mixin$$IS_BINDING.test(hashOption)) {
                // Lop off 'Binding' suffix.
                boundOptions[hashOption.slice(0, -7)] = hash[hashOption];
              }
            }

            // Expose property names on data.properties object.
            var watchedProperties = [];
            data.properties = [];
            for (loc = 0; loc < numProperties; ++loc) {
              data.properties.push(properties[loc]);
              if (types[loc] === 'ID') {
                var normalizedProp = ember$handlebars$ext$$normalizePath(currentContext, properties[loc], data);
                normalizedProperties.push(normalizedProp);
                watchedProperties.push(normalizedProp);
              } else {
                if(data.isUnbound) {
                  normalizedProperties.push({path: properties[loc]});
                }else {
                  normalizedProperties.push(null);
                }
              }
            }

            // Handle case when helper invocation is preceded by `unbound`, e.g.
            // {{unbound myHelper foo}}
            if (data.isUnbound) {
              return ember$handlebars$ext$$evaluateUnboundHelper(this, fn, normalizedProperties, options);
            }

            var bindView = new ember$handlebars$views$handlebars_bound_view$$SimpleHandlebarsView(null, null, !options.hash.unescaped, options.data);

            // Override SimpleHandlebarsView's method for generating the view's content.
            bindView.normalizedValue = function() {
              var args = [], boundOption;

              // Copy over bound hash options.
              for (boundOption in boundOptions) {
                if (!boundOptions.hasOwnProperty(boundOption)) { continue; }
                property = ember$handlebars$ext$$normalizePath(currentContext, boundOptions[boundOption], data);
                bindView.path = property.path;
                bindView.pathRoot = property.root;
                hash[boundOption] = normalizedValue.call(bindView);
              }

              for (loc = 0; loc < numProperties; ++loc) {
                property = normalizedProperties[loc];
                if (property) {
                  bindView.path = property.path;
                  bindView.pathRoot = property.root;
                  args.push(normalizedValue.call(bindView));
                } else {
                  args.push(properties[loc]);
                }
              }
              args.push(options);

              // Run the supplied helper function.
              return fn.apply(currentContext, args);
            };

            view.appendChild(bindView);

            // Assemble list of watched properties that'll re-render this helper.
            for (boundOption in boundOptions) {
              if (boundOptions.hasOwnProperty(boundOption)) {
                watchedProperties.push(ember$handlebars$ext$$normalizePath(currentContext, boundOptions[boundOption], data));
              }
            }

            // Observe each property.
            for (loc = 0, len = watchedProperties.length; loc < len; ++loc) {
              property = watchedProperties[loc];
              view.registerObserver(property.root, property.path, bindView, bindView.rerender);
            }

            if (types[0] !== 'ID' || normalizedProperties.length === 0) {
              return;
            }

            // Add dependent key observers to the first param
            var normalized = normalizedProperties[0],
                pathRoot = normalized.root,
                path = normalized.path;

            if(!ember$metal$is_empty$$default(path)) {
              prefixPathForDependentKeys = path + '.';
            }
            for (var i=0, l=dependentKeys.length; i<l; i++) {
              view.registerObserver(pathRoot, prefixPathForDependentKeys + dependentKeys[i], bindView, bindView.rerender);
            }
          }

          helper._rawFunction = fn;
          return helper;
        }

        ember$handlebars$ext$$makeBoundHelper = makeBoundHelper;

        /**
          Renders the unbound form of an otherwise bound helper function.

          @private
          @method evaluateUnboundHelper
          @param {Function} fn
          @param {Object} context
          @param {Array} normalizedProperties
          @param {String} options
        */
        function evaluateUnboundHelper(context, fn, normalizedProperties, options) {
          var args = [],
           hash = options.hash,
           boundOptions = hash.boundOptions,
           types = slice.call(options.types, 1),
           loc,
           len,
           property,
           propertyType,
           boundOption;

          for (boundOption in boundOptions) {
            if (!boundOptions.hasOwnProperty(boundOption)) { continue; }
            hash[boundOption] = ember$handlebars$ext$$handlebarsGet(context, boundOptions[boundOption], options);
          }

          for(loc = 0, len = normalizedProperties.length; loc < len; ++loc) {
            property = normalizedProperties[loc];
            propertyType = types[loc];
            if(propertyType === "ID") {
              args.push(ember$handlebars$ext$$handlebarsGet(property.root, property.path, options));
            } else {
              args.push(property.path);
            }
          }
          args.push(options);
          return fn.apply(context, args);
        }

        ember$handlebars$ext$$evaluateUnboundHelper = evaluateUnboundHelper;

        function template(spec) {
          var t = originalTemplate(spec);
          t.isTop = true;
          return t;
        }

        ember$handlebars$ext$$template = template;
    }).call(this);

    (function() {
        /**
          Mark a string as safe for unescaped output with Handlebars. If you
          return HTML from a Handlebars helper, use this function to
          ensure Handlebars does not escape the HTML.

          ```javascript
          Ember.String.htmlSafe('<div>someString</div>')
          ```

          @method htmlSafe
          @for Ember.String
          @static
          @return {Handlebars.SafeString} a string that will not be html escaped by Handlebars
        */
        function htmlSafe(str) {
          return new Handlebars.SafeString(str);
        }

        ember$runtime$system$string$$default.htmlSafe = htmlSafe;

        if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.String) {

          /**
            Mark a string as being safe for unescaped output with Handlebars.

            ```javascript
            '<div>someString</div>'.htmlSafe()
            ```

            See [Ember.String.htmlSafe](/api/classes/Ember.String.html#method_htmlSafe).

            @method htmlSafe
            @for String
            @return {Handlebars.SafeString} a string that will not be html escaped by Handlebars
          */
          String.prototype.htmlSafe = function() {
            return htmlSafe(this);
          };
        }

        ember$handlebars$string$$default = htmlSafe;
    }).call(this);

    (function() {
        ember$handlebars$helpers$shared$$default = function resolvePaths(options) {
          var ret = [],
              contexts = options.contexts,
              roots = options.roots,
              data = options.data;

          for (var i=0, l=contexts.length; i<l; i++) {
            ret.push(ember$handlebars$ext$$handlebarsGet(roots[i], contexts[i], { data: data }));
          }

          return ret;
        };
    }).call(this);

    (function() {
        var LOWERCASE_A_Z = /^[a-z]/,
            VIEW_PREFIX = /^view\./;

        function makeBindings(thisContext, options) {
          var hash = options.hash,
              hashType = options.hashTypes;

          for (var prop in hash) {
            if (hashType[prop] === 'ID') {

              var value = hash[prop];

              if (ember$metal$mixin$$IS_BINDING.test(prop)) {
                ember$metal$core$$default.warn("You're attempting to render a view by passing " + prop + "=" + value + " to a view helper, but this syntax is ambiguous. You should either surround " + value + " in quotes or remove `Binding` from " + prop + ".");
              } else {
                hash[prop + 'Binding'] = value;
                hashType[prop + 'Binding'] = 'STRING';
                delete hash[prop];
                delete hashType[prop];
              }
            }
          }

          if (hash.hasOwnProperty('idBinding')) {
            // id can't be bound, so just perform one-time lookup.
            hash.id = ember$handlebars$ext$$handlebarsGet(thisContext, hash.idBinding, options);
            hashType.id = 'STRING';
            delete hash.idBinding;
            delete hashType.idBinding;
          }
        }

        ember$handlebars$helpers$view$$ViewHelper = ember$runtime$system$object$$default.create({

          propertiesFromHTMLOptions: function(options) {
            var hash = options.hash, data = options.data;
            var extensions = {},
                classes = hash['class'],
                dup = false;

            if (hash.id) {
              extensions.elementId = hash.id;
              dup = true;
            }

            if (hash.tag) {
              extensions.tagName = hash.tag;
              dup = true;
            }

            if (classes) {
              classes = classes.split(' ');
              extensions.classNames = classes;
              dup = true;
            }

            if (hash.classBinding) {
              extensions.classNameBindings = hash.classBinding.split(' ');
              dup = true;
            }

            if (hash.classNameBindings) {
              if (extensions.classNameBindings === undefined) extensions.classNameBindings = [];
              extensions.classNameBindings = extensions.classNameBindings.concat(hash.classNameBindings.split(' '));
              dup = true;
            }

            if (hash.attributeBindings) {
              ember$metal$core$$default.assert("Setting 'attributeBindings' via Handlebars is not allowed. Please subclass Ember.View and set it there instead.");
              extensions.attributeBindings = null;
              dup = true;
            }

            if (dup) {
              hash = ember$views$system$jquery$$default.extend({}, hash);
              delete hash.id;
              delete hash.tag;
              delete hash['class'];
              delete hash.classBinding;
            }

            // Set the proper context for all bindings passed to the helper. This applies to regular attribute bindings
            // as well as class name bindings. If the bindings are local, make them relative to the current context
            // instead of the view.
            var path;

            // Evaluate the context of regular attribute bindings:
            for (var prop in hash) {
              if (!hash.hasOwnProperty(prop)) { continue; }

              // Test if the property ends in "Binding"
              if (ember$metal$mixin$$IS_BINDING.test(prop) && typeof hash[prop] === 'string') {
                path = this.contextualizeBindingPath(hash[prop], data);
                if (path) { hash[prop] = path; }
              }
            }

            // Evaluate the context of class name bindings:
            if (extensions.classNameBindings) {
              for (var b in extensions.classNameBindings) {
                var full = extensions.classNameBindings[b];
                if (typeof full === 'string') {
                  // Contextualize the path of classNameBinding so this:
                  //
                  //     classNameBinding="isGreen:green"
                  //
                  // is converted to this:
                  //
                  //     classNameBinding="_parentView.context.isGreen:green"
                  var parsedPath = ember$views$views$view$$View._parsePropertyPath(full);
                  path = this.contextualizeBindingPath(parsedPath.path, data);
                  if (path) { extensions.classNameBindings[b] = path + parsedPath.classNames; }
                }
              }
            }

            return ember$views$system$jquery$$default.extend(hash, extensions);
          },

          // Transform bindings from the current context to a context that can be evaluated within the view.
          // Returns null if the path shouldn't be changed.
          //
          // TODO: consider the addition of a prefix that would allow this method to return `path`.
          contextualizeBindingPath: function(path, data) {
            var normalized = ember$handlebars$ext$$normalizePath(null, path, data);
            if (normalized.isKeyword) {
              return 'templateData.keywords.' + path;
            } else if (ember$metal$binding$$isGlobalPath(path)) {
              return null;
            } else if (path === 'this' || path === '') {
              return '_parentView.context';
            } else {
              return '_parentView.context.' + path;
            }
          },

          helper: function(thisContext, path, options) {
            var data = options.data,
                fn = options.fn,
                newView;

            makeBindings(thisContext, options);

            if ('string' === typeof path) {
              var lookup;
              // TODO: this is a lame conditional, this should likely change
              // but something along these lines will likely need to be added
              // as deprecation warnings
              //
              if (options.types[0] === 'STRING' && LOWERCASE_A_Z.test(path) && !VIEW_PREFIX.test(path)) {
                lookup = path;
              } else {
                newView = ember$handlebars$ext$$handlebarsGet(thisContext, path, options);
                if (typeof newView === 'string') {
                  lookup = newView;
                }
              }

              if (lookup) {
                ember$metal$core$$default.assert("View requires a container", !!data.view.container);
                newView = data.view.container.lookupFactory('view:' + lookup);
              }

              ember$metal$core$$default.assert("Unable to find view at path '" + path + "'", !!newView);
            } else {
              newView = path;
            }

            ember$metal$core$$default.assert(ember$runtime$system$string$$default.fmt('You must pass a view to the #view helper, not %@ (%@)', [path, newView]), ember$views$views$view$$View.detect(newView) || ember$views$views$view$$View.detectInstance(newView));

            var viewOptions = this.propertiesFromHTMLOptions(options, thisContext);
            var currentView = data.view;
            viewOptions.templateData = data;
            var newViewProto = newView.proto ? newView.proto() : newView;

            if (fn) {
              ember$metal$core$$default.assert("You cannot provide a template block if you also specified a templateName", !ember$metal$property_get$$get(viewOptions, 'templateName') && !ember$metal$property_get$$get(newViewProto, 'templateName'));
              viewOptions.template = fn;
            }

            // We only want to override the `_context` computed property if there is
            // no specified controller. See View#_context for more information.
            if (!newViewProto.controller && !newViewProto.controllerBinding && !viewOptions.controller && !viewOptions.controllerBinding) {
              viewOptions._context = thisContext;
            }

            // for instrumentation
            if (options.helperName) {
              viewOptions.helperName = options.helperName;
            }

            currentView.appendChild(newView, viewOptions);
          }
        });

        function viewHelper(path, options) {
          ember$metal$core$$default.assert("The view helper only takes a single argument", arguments.length <= 2);

          // If no path is provided, treat path param as options
          // and get an instance of the registered `view:default`
          if (path && path.data && path.data.isRenderData) {
            options = path;
            ember$metal$core$$default.assert('{{view}} helper requires parent view to have a container but none was found. This usually happens when you are manually-managing views.', !!options.data.view.container);
            path = options.data.view.container.lookupFactory('view:default');
          }

          options.helperName = options.helperName || 'view';

          return ember$handlebars$helpers$view$$ViewHelper.helper(this, path, options);
        }

        ember$handlebars$helpers$view$$viewHelper = viewHelper;
    }).call(this);

    (function() {
        var forEach = ember$metal$enumerable_utils$$default.forEach;

        /**
        @module ember
        @submodule ember-views
        */

        var states = ember$views$views$states$$cloneStates(ember$views$views$states$$states);

        /**
          A `ContainerView` is an `Ember.View` subclass that implements `Ember.MutableArray`
          allowing programmatic management of its child views.

          ## Setting Initial Child Views

          The initial array of child views can be set in one of two ways. You can
          provide a `childViews` property at creation time that contains instance of
          `Ember.View`:

          ```javascript
          aContainer = Ember.ContainerView.create({
            childViews: [Ember.View.create(), Ember.View.create()]
          });
          ```

          You can also provide a list of property names whose values are instances of
          `Ember.View`:

          ```javascript
          aContainer = Ember.ContainerView.create({
            childViews: ['aView', 'bView', 'cView'],
            aView: Ember.View.create(),
            bView: Ember.View.create(),
            cView: Ember.View.create()
          });
          ```

          The two strategies can be combined:

          ```javascript
          aContainer = Ember.ContainerView.create({
            childViews: ['aView', Ember.View.create()],
            aView: Ember.View.create()
          });
          ```

          Each child view's rendering will be inserted into the container's rendered
          HTML in the same order as its position in the `childViews` property.

          ## Adding and Removing Child Views

          The container view implements `Ember.MutableArray` allowing programmatic management of its child views.

          To remove a view, pass that view into a `removeObject` call on the container view.

          Given an empty `<body>` the following code

          ```javascript
          aContainer = Ember.ContainerView.create({
            classNames: ['the-container'],
            childViews: ['aView', 'bView'],
            aView: Ember.View.create({
              template: Ember.Handlebars.compile("A")
            }),
            bView: Ember.View.create({
              template: Ember.Handlebars.compile("B")
            })
          });

          aContainer.appendTo('body');
          ```

          Results in the HTML

          ```html
          <div class="ember-view the-container">
            <div class="ember-view">A</div>
            <div class="ember-view">B</div>
          </div>
          ```

          Removing a view

          ```javascript
          aContainer.toArray();  // [aContainer.aView, aContainer.bView]
          aContainer.removeObject(aContainer.get('bView'));
          aContainer.toArray();  // [aContainer.aView]
          ```

          Will result in the following HTML

          ```html
          <div class="ember-view the-container">
            <div class="ember-view">A</div>
          </div>
          ```

          Similarly, adding a child view is accomplished by adding `Ember.View` instances to the
          container view.

          Given an empty `<body>` the following code

          ```javascript
          aContainer = Ember.ContainerView.create({
            classNames: ['the-container'],
            childViews: ['aView', 'bView'],
            aView: Ember.View.create({
              template: Ember.Handlebars.compile("A")
            }),
            bView: Ember.View.create({
              template: Ember.Handlebars.compile("B")
            })
          });

          aContainer.appendTo('body');
          ```

          Results in the HTML

          ```html
          <div class="ember-view the-container">
            <div class="ember-view">A</div>
            <div class="ember-view">B</div>
          </div>
          ```

          Adding a view

          ```javascript
          AnotherViewClass = Ember.View.extend({
            template: Ember.Handlebars.compile("Another view")
          });

          aContainer.toArray();  // [aContainer.aView, aContainer.bView]
          aContainer.pushObject(AnotherViewClass.create());
          aContainer.toArray(); // [aContainer.aView, aContainer.bView, <AnotherViewClass instance>]
          ```

          Will result in the following HTML

          ```html
          <div class="ember-view the-container">
            <div class="ember-view">A</div>
            <div class="ember-view">B</div>
            <div class="ember-view">Another view</div>
          </div>
          ```

          ## Templates and Layout

          A `template`, `templateName`, `defaultTemplate`, `layout`, `layoutName` or
          `defaultLayout` property on a container view will not result in the template
          or layout being rendered. The HTML contents of a `Ember.ContainerView`'s DOM
          representation will only be the rendered HTML of its child views.

          @class ContainerView
          @namespace Ember
          @extends Ember.View
        */
        var ContainerView = ember$views$views$view$$View.extend(ember$runtime$mixins$mutable_array$$default, {
          _states: states,

          init: function() {
            this._super();

            var childViews = ember$metal$property_get$$get(this, 'childViews');

            // redefine view's childViews property that was obliterated
            ember$metal$properties$$defineProperty(this, 'childViews', ember$views$views$view$$View.childViewsProperty);

            var _childViews = this._childViews;

            forEach(childViews, function(viewName, idx) {
              var view;

              if ('string' === typeof viewName) {
                view = ember$metal$property_get$$get(this, viewName);
                view = this.createChildView(view);
                ember$metal$property_set$$set(this, viewName, view);
              } else {
                view = this.createChildView(viewName);
              }

              _childViews[idx] = view;
            }, this);

            var currentView = ember$metal$property_get$$get(this, 'currentView');
            if (currentView) {
              if (!_childViews.length) { _childViews = this._childViews = this._childViews.slice(); }
              _childViews.push(this.createChildView(currentView));
            }
          },

          replace: function(idx, removedCount, addedViews) {
            var addedCount = addedViews ? ember$metal$property_get$$get(addedViews, 'length') : 0;
            var self = this;
            ember$metal$core$$default.assert("You can't add a child to a container - the child is already a child of another view", ember$runtime$system$native_array$$A(addedViews).every(function(item) { return !ember$metal$property_get$$get(item, '_parentView') || ember$metal$property_get$$get(item, '_parentView') === self; }));

            this.arrayContentWillChange(idx, removedCount, addedCount);
            this.childViewsWillChange(this._childViews, idx, removedCount);

            if (addedCount === 0) {
              this._childViews.splice(idx, removedCount) ;
            } else {
              var args = [idx, removedCount].concat(addedViews);
              if (addedViews.length && !this._childViews.length) { this._childViews = this._childViews.slice(); }
              this._childViews.splice.apply(this._childViews, args);
            }

            this.arrayContentDidChange(idx, removedCount, addedCount);
            this.childViewsDidChange(this._childViews, idx, removedCount, addedCount);

            return this;
          },

          objectAt: function(idx) {
            return this._childViews[idx];
          },

          length: ember$metal$computed$$computed(function () {
            return this._childViews.length;
          }).volatile(),

          /**
            Instructs each child view to render to the passed render buffer.

            @private
            @method render
            @param {Ember.RenderBuffer} buffer the buffer to render to
          */
          render: function(buffer) {
            this.forEachChildView(function(view) {
              view.renderToBuffer(buffer);
            });
          },

          instrumentName: 'container',

          /**
            When a child view is removed, destroy its element so that
            it is removed from the DOM.

            The array observer that triggers this action is set up in the
            `renderToBuffer` method.

            @private
            @method childViewsWillChange
            @param {Ember.Array} views the child views array before mutation
            @param {Number} start the start position of the mutation
            @param {Number} removed the number of child views removed
          **/
          childViewsWillChange: function(views, start, removed) {
            this.propertyWillChange('childViews');

            if (removed > 0) {
              var changedViews = views.slice(start, start+removed);
              // transition to preRender before clearing parentView
              this.currentState.childViewsWillChange(this, views, start, removed);
              this.initializeViews(changedViews, null, null);
            }
          },

          removeChild: function(child) {
            this.removeObject(child);
            return this;
          },

          /**
            When a child view is added, make sure the DOM gets updated appropriately.

            If the view has already rendered an element, we tell the child view to
            create an element and insert it into the DOM. If the enclosing container
            view has already written to a buffer, but not yet converted that buffer
            into an element, we insert the string representation of the child into the
            appropriate place in the buffer.

            @private
            @method childViewsDidChange
            @param {Ember.Array} views the array of child views after the mutation has occurred
            @param {Number} start the start position of the mutation
            @param {Number} removed the number of child views removed
            @param {Number} added the number of child views added
          */
          childViewsDidChange: function(views, start, removed, added) {
            if (added > 0) {
              var changedViews = views.slice(start, start+added);
              this.initializeViews(changedViews, this, ember$metal$property_get$$get(this, 'templateData'));
              this.currentState.childViewsDidChange(this, views, start, added);
            }
            this.propertyDidChange('childViews');
          },

          initializeViews: function(views, parentView, templateData) {
            forEach(views, function(view) {
              ember$metal$property_set$$set(view, '_parentView', parentView);

              if (!view.container && parentView) {
                ember$metal$property_set$$set(view, 'container', parentView.container);
              }

              if (!ember$metal$property_get$$get(view, 'templateData')) {
                ember$metal$property_set$$set(view, 'templateData', templateData);
              }
            });
          },

          currentView: null,

          _currentViewWillChange: ember$metal$mixin$$beforeObserver('currentView', function() {
            var currentView = ember$metal$property_get$$get(this, 'currentView');
            if (currentView) {
              currentView.destroy();
            }
          }),

          _currentViewDidChange: ember$metal$mixin$$observer('currentView', function() {
            var currentView = ember$metal$property_get$$get(this, 'currentView');
            if (currentView) {
              ember$metal$core$$default.assert("You tried to set a current view that already has a parent. Make sure you don't have multiple outlets in the same view.", !ember$metal$property_get$$get(currentView, '_parentView'));
              this.pushObject(currentView);
            }
          }),

          _ensureChildrenAreInDOM: function () {
            this.currentState.ensureChildrenAreInDOM(this);
          }
        });

        ember$metal$merge$$default(states._default, {
          childViewsWillChange: ember$metal$core$$default.K,
          childViewsDidChange: ember$metal$core$$default.K,
          ensureChildrenAreInDOM: ember$metal$core$$default.K
        });

        ember$metal$merge$$default(states.inBuffer, {
          childViewsDidChange: function(parentView, views, start, added) {
            throw new ember$metal$error$$default('You cannot modify child views while in the inBuffer state');
          }
        });

        ember$metal$merge$$default(states.hasElement, {
          childViewsWillChange: function(view, views, start, removed) {
            for (var i=start; i<start+removed; i++) {
              views[i].remove();
            }
          },

          childViewsDidChange: function(view, views, start, added) {
            ember$metal$run_loop$$default.scheduleOnce('render', view, '_ensureChildrenAreInDOM');
          },

          ensureChildrenAreInDOM: function(view) {
            var childViews = view._childViews, i, len, childView, previous, buffer, viewCollection = new ember$views$views$view$$ViewCollection();

            for (i = 0, len = childViews.length; i < len; i++) {
              childView = childViews[i];

              if (!buffer) { buffer = ember$views$system$render_buffer$$default(); buffer._hasElement = false; }

              if (childView.renderToBufferIfNeeded(buffer)) {
                viewCollection.push(childView);
              } else if (viewCollection.length) {
                insertViewCollection(view, viewCollection, previous, buffer);
                buffer = null;
                previous = childView;
                viewCollection.clear();
              } else {
                previous = childView;
              }
            }

            if (viewCollection.length) {
              insertViewCollection(view, viewCollection, previous, buffer);
            }
          }
        });

        function insertViewCollection(view, viewCollection, previous, buffer) {
          viewCollection.triggerRecursively('willInsertElement');

          if (previous) {
            previous.domManager.after(previous, buffer.string());
          } else {
            view.domManager.prepend(view, buffer.string());
          }

          viewCollection.forEach(function(v) {
            v.transitionTo('inDOM');
            v.propertyDidChange('element');
            v.triggerRecursively('didInsertElement');
          });
        }

        ember$views$views$container_view$$default = ContainerView;
    }).call(this);

    (function() {
        /**
          `Ember.CollectionView` is an `Ember.View` descendent responsible for managing
          a collection (an array or array-like object) by maintaining a child view object
          and associated DOM representation for each item in the array and ensuring
          that child views and their associated rendered HTML are updated when items in
          the array are added, removed, or replaced.

          ## Setting content

          The managed collection of objects is referenced as the `Ember.CollectionView`
          instance's `content` property.

          ```javascript
          someItemsView = Ember.CollectionView.create({
            content: ['A', 'B','C']
          })
          ```

          The view for each item in the collection will have its `content` property set
          to the item.

          ## Specifying itemViewClass

          By default the view class for each item in the managed collection will be an
          instance of `Ember.View`. You can supply a different class by setting the
          `CollectionView`'s `itemViewClass` property.

          Given an empty `<body>` and the following code:

          ```javascript
          someItemsView = Ember.CollectionView.create({
            classNames: ['a-collection'],
            content: ['A','B','C'],
            itemViewClass: Ember.View.extend({
              template: Ember.Handlebars.compile("the letter: {{view.content}}")
            })
          });

          someItemsView.appendTo('body');
          ```

          Will result in the following HTML structure

          ```html
          <div class="ember-view a-collection">
            <div class="ember-view">the letter: A</div>
            <div class="ember-view">the letter: B</div>
            <div class="ember-view">the letter: C</div>
          </div>
          ```

          ## Automatic matching of parent/child tagNames

          Setting the `tagName` property of a `CollectionView` to any of
          "ul", "ol", "table", "thead", "tbody", "tfoot", "tr", or "select" will result
          in the item views receiving an appropriately matched `tagName` property.

          Given an empty `<body>` and the following code:

          ```javascript
          anUnorderedListView = Ember.CollectionView.create({
            tagName: 'ul',
            content: ['A','B','C'],
            itemViewClass: Ember.View.extend({
              template: Ember.Handlebars.compile("the letter: {{view.content}}")
            })
          });

          anUnorderedListView.appendTo('body');
          ```

          Will result in the following HTML structure

          ```html
          <ul class="ember-view a-collection">
            <li class="ember-view">the letter: A</li>
            <li class="ember-view">the letter: B</li>
            <li class="ember-view">the letter: C</li>
          </ul>
          ```

          Additional `tagName` pairs can be provided by adding to
          `Ember.CollectionView.CONTAINER_MAP `

          ```javascript
          Ember.CollectionView.CONTAINER_MAP['article'] = 'section'
          ```

          ## Programmatic creation of child views

          For cases where additional customization beyond the use of a single
          `itemViewClass` or `tagName` matching is required CollectionView's
          `createChildView` method can be overidden:

          ```javascript
          CustomCollectionView = Ember.CollectionView.extend({
            createChildView: function(viewClass, attrs) {
              if (attrs.content.kind == 'album') {
                viewClass = App.AlbumView;
              } else {
                viewClass = App.SongView;
              }
              return this._super(viewClass, attrs);
            }
          });
          ```

          ## Empty View

          You can provide an `Ember.View` subclass to the `Ember.CollectionView`
          instance as its `emptyView` property. If the `content` property of a
          `CollectionView` is set to `null` or an empty array, an instance of this view
          will be the `CollectionView`s only child.

          ```javascript
          aListWithNothing = Ember.CollectionView.create({
            classNames: ['nothing']
            content: null,
            emptyView: Ember.View.extend({
              template: Ember.Handlebars.compile("The collection is empty")
            })
          });

          aListWithNothing.appendTo('body');
          ```

          Will result in the following HTML structure

          ```html
          <div class="ember-view nothing">
            <div class="ember-view">
              The collection is empty
            </div>
          </div>
          ```

          ## Adding and Removing items

          The `childViews` property of a `CollectionView` should not be directly
          manipulated. Instead, add, remove, replace items from its `content` property.
          This will trigger appropriate changes to its rendered HTML.


          @class CollectionView
          @namespace Ember
          @extends Ember.ContainerView
          @since Ember 0.9
        */
        var CollectionView = ember$views$views$container_view$$default.extend({

          /**
            A list of items to be displayed by the `Ember.CollectionView`.

            @property content
            @type Ember.Array
            @default null
          */
          content: null,

          /**
            This provides metadata about what kind of empty view class this
            collection would like if it is being instantiated from another
            system (like Handlebars)

            @private
            @property emptyViewClass
          */
          emptyViewClass: ember$views$views$view$$View,

          /**
            An optional view to display if content is set to an empty array.

            @property emptyView
            @type Ember.View
            @default null
          */
          emptyView: null,

          /**
            @property itemViewClass
            @type Ember.View
            @default Ember.View
          */
          itemViewClass: ember$views$views$view$$View,

          /**
            Setup a CollectionView

            @method init
          */
          init: function() {
            var ret = this._super();
            this._contentDidChange();
            return ret;
          },

          /**
            Invoked when the content property is about to change. Notifies observers that the
            entire array content will change.

            @private
            @method _contentWillChange
          */
          _contentWillChange: ember$metal$mixin$$beforeObserver('content', function() {
            var content = this.get('content');

            if (content) { content.removeArrayObserver(this); }
            var len = content ? ember$metal$property_get$$get(content, 'length') : 0;
            this.arrayWillChange(content, 0, len);
          }),

          /**
            Check to make sure that the content has changed, and if so,
            update the children directly. This is always scheduled
            asynchronously, to allow the element to be created before
            bindings have synchronized and vice versa.

            @private
            @method _contentDidChange
          */
          _contentDidChange: ember$metal$mixin$$observer('content', function() {
            var content = ember$metal$property_get$$get(this, 'content');

            if (content) {
              this._assertArrayLike(content);
              content.addArrayObserver(this);
            }

            var len = content ? ember$metal$property_get$$get(content, 'length') : 0;
            this.arrayDidChange(content, 0, null, len);
          }),

          /**
            Ensure that the content implements Ember.Array

            @private
            @method _assertArrayLike
          */
          _assertArrayLike: function(content) {
            ember$metal$core$$default.assert(ember$runtime$system$string$$fmt("an Ember.CollectionView's content must implement Ember.Array. You passed %@", [content]), ember$runtime$mixins$array$$default.detect(content));
          },

          /**
            Removes the content and content observers.

            @method destroy
          */
          destroy: function() {
            if (!this._super()) { return; }

            var content = ember$metal$property_get$$get(this, 'content');
            if (content) { content.removeArrayObserver(this); }

            if (this._createdEmptyView) {
              this._createdEmptyView.destroy();
            }

            return this;
          },

          /**
            Called when a mutation to the underlying content array will occur.

            This method will remove any views that are no longer in the underlying
            content array.

            Invokes whenever the content array itself will change.

            @method arrayWillChange
            @param {Array} content the managed collection of objects
            @param {Number} start the index at which the changes will occurr
            @param {Number} removed number of object to be removed from content
          */
          arrayWillChange: function(content, start, removedCount) {
            // If the contents were empty before and this template collection has an
            // empty view remove it now.
            var emptyView = ember$metal$property_get$$get(this, 'emptyView');
            if (emptyView && emptyView instanceof ember$views$views$view$$View) {
              emptyView.removeFromParent();
            }

            // Loop through child views that correspond with the removed items.
            // Note that we loop from the end of the array to the beginning because
            // we are mutating it as we go.
            var childViews = this._childViews, childView, idx, len;

            len = this._childViews.length;

            var removingAll = removedCount === len;

            if (removingAll) {
              this.currentState.empty(this);
              this.invokeRecursively(function(view) {
                view.removedFromDOM = true;
              }, false);
            }

            for (idx = start + removedCount - 1; idx >= start; idx--) {
              childView = childViews[idx];
              childView.destroy();
            }
          },

          /**
            Called when a mutation to the underlying content array occurs.

            This method will replay that mutation against the views that compose the
            `Ember.CollectionView`, ensuring that the view reflects the model.

            This array observer is added in `contentDidChange`.

            @method arrayDidChange
            @param {Array} content the managed collection of objects
            @param {Number} start the index at which the changes occurred
            @param {Number} removed number of object removed from content
            @param {Number} added number of object added to content
          */
          arrayDidChange: function(content, start, removed, added) {
            var addedViews = [], view, item, idx, len, itemViewClass,
              emptyView;

            len = content ? ember$metal$property_get$$get(content, 'length') : 0;

            if (len) {
              itemViewClass = ember$metal$property_get$$get(this, 'itemViewClass');

              if ('string' === typeof itemViewClass && ember$metal$binding$$isGlobalPath(itemViewClass)) {
                itemViewClass = ember$metal$property_get$$get(itemViewClass) || itemViewClass;
              }

              ember$metal$core$$default.assert(ember$runtime$system$string$$fmt("itemViewClass must be a subclass of Ember.View, not %@",
                               [itemViewClass]),
                               'string' === typeof itemViewClass || ember$views$views$view$$View.detect(itemViewClass));

              for (idx = start; idx < start+added; idx++) {
                item = content.objectAt(idx);

                view = this.createChildView(itemViewClass, {
                  content: item,
                  contentIndex: idx
                });

                addedViews.push(view);
              }
            } else {
              emptyView = ember$metal$property_get$$get(this, 'emptyView');

              if (!emptyView) { return; }

              if ('string' === typeof emptyView && ember$metal$binding$$isGlobalPath(emptyView)) {
                emptyView = ember$metal$property_get$$get(emptyView) || emptyView;
              }

              emptyView = this.createChildView(emptyView);
              addedViews.push(emptyView);
              ember$metal$property_set$$set(this, 'emptyView', emptyView);

              if (ember$views$views$view$$CoreView.detect(emptyView)) {
                this._createdEmptyView = emptyView;
              }
            }

            this.replace(start, 0, addedViews);
          },

          /**
            Instantiates a view to be added to the childViews array during view
            initialization. You generally will not call this method directly unless
            you are overriding `createChildViews()`. Note that this method will
            automatically configure the correct settings on the new view instance to
            act as a child of the parent.

            The tag name for the view will be set to the tagName of the viewClass
            passed in.

            @method createChildView
            @param {Class} viewClass
            @param {Hash} [attrs] Attributes to add
            @return {Ember.View} new instance
          */
          createChildView: function(view, attrs) {
            view = this._super(view, attrs);

            var itemTagName = ember$metal$property_get$$get(view, 'tagName');

            if (itemTagName === null || itemTagName === undefined) {
              itemTagName = CollectionView.CONTAINER_MAP[ember$metal$property_get$$get(this, 'tagName')];
              ember$metal$property_set$$set(view, 'tagName', itemTagName);
            }

            return view;
          }
        });

        /**
          A map of parent tags to their default child tags. You can add
          additional parent tags if you want collection views that use
          a particular parent tag to default to a child tag.

          @property CONTAINER_MAP
          @type Hash
          @static
          @final
        */
        CollectionView.CONTAINER_MAP = {
          ul: 'li',
          ol: 'li',
          table: 'tr',
          thead: 'tr',
          tbody: 'tr',
          tfoot: 'tr',
          tr: 'td',
          select: 'option'
        };

        ember$views$views$collection_view$$default = CollectionView;
    }).call(this);

    (function() {
        var helpers = ember$handlebars$compiler$$default.helpers;
        var alias = ember$metal$computed$$computed.alias;

        /**
          `{{collection}}` is a `Ember.Handlebars` helper for adding instances of
          `Ember.CollectionView` to a template. See [Ember.CollectionView](/api/classes/Ember.CollectionView.html)
           for additional information on how a `CollectionView` functions.

          `{{collection}}`'s primary use is as a block helper with a `contentBinding`
          option pointing towards an `Ember.Array`-compatible object. An `Ember.View`
          instance will be created for each item in its `content` property. Each view
          will have its own `content` property set to the appropriate item in the
          collection.

          The provided block will be applied as the template for each item's view.

          Given an empty `<body>` the following template:

          ```handlebars
          {{#collection contentBinding="App.items"}}
            Hi {{view.content.name}}
          {{/collection}}
          ```

          And the following application code

          ```javascript
          App = Ember.Application.create()
          App.items = [
            Ember.Object.create({name: 'Dave'}),
            Ember.Object.create({name: 'Mary'}),
            Ember.Object.create({name: 'Sara'})
          ]
          ```

          Will result in the HTML structure below

          ```html
          <div class="ember-view">
            <div class="ember-view">Hi Dave</div>
            <div class="ember-view">Hi Mary</div>
            <div class="ember-view">Hi Sara</div>
          </div>
          ```

          ### Blockless use in a collection

          If you provide an `itemViewClass` option that has its own `template` you can
          omit the block.

          The following template:

          ```handlebars
          {{collection contentBinding="App.items" itemViewClass="App.AnItemView"}}
          ```

          And application code

          ```javascript
          App = Ember.Application.create();
          App.items = [
            Ember.Object.create({name: 'Dave'}),
            Ember.Object.create({name: 'Mary'}),
            Ember.Object.create({name: 'Sara'})
          ];

          App.AnItemView = Ember.View.extend({
            template: Ember.Handlebars.compile("Greetings {{view.content.name}}")
          });
          ```

          Will result in the HTML structure below

          ```html
          <div class="ember-view">
            <div class="ember-view">Greetings Dave</div>
            <div class="ember-view">Greetings Mary</div>
            <div class="ember-view">Greetings Sara</div>
          </div>
          ```

          ### Specifying a CollectionView subclass

          By default the `{{collection}}` helper will create an instance of
          `Ember.CollectionView`. You can supply a `Ember.CollectionView` subclass to
          the helper by passing it as the first argument:

          ```handlebars
          {{#collection App.MyCustomCollectionClass contentBinding="App.items"}}
            Hi {{view.content.name}}
          {{/collection}}
          ```

          ### Forwarded `item.*`-named Options

          As with the `{{view}}`, helper options passed to the `{{collection}}` will be
          set on the resulting `Ember.CollectionView` as properties. Additionally,
          options prefixed with `item` will be applied to the views rendered for each
          item (note the camelcasing):

          ```handlebars
          {{#collection contentBinding="App.items"
                        itemTagName="p"
                        itemClassNames="greeting"}}
            Howdy {{view.content.name}}
          {{/collection}}
          ```

          Will result in the following HTML structure:

          ```html
          <div class="ember-view">
            <p class="ember-view greeting">Howdy Dave</p>
            <p class="ember-view greeting">Howdy Mary</p>
            <p class="ember-view greeting">Howdy Sara</p>
          </div>
          ```

          @method collection
          @for Ember.Handlebars.helpers
          @param {String} path
          @param {Hash} options
          @return {String} HTML string
          @deprecated Use `{{each}}` helper instead.
        */
        function collectionHelper(path, options) {
          ember$metal$core$$default.deprecate("Using the {{collection}} helper without specifying a class has been deprecated as the {{each}} helper now supports the same functionality.", path !== 'collection');

          // If no path is provided, treat path param as options.
          if (path && path.data && path.data.isRenderData) {
            options = path;
            path = undefined;
            ember$metal$core$$default.assert("You cannot pass more than one argument to the collection helper", arguments.length === 1);
          } else {
            ember$metal$core$$default.assert("You cannot pass more than one argument to the collection helper", arguments.length === 2);
          }

          var fn = options.fn;
          var data = options.data;
          var inverse = options.inverse;
          var view = options.data.view;


          var controller, container;
          // If passed a path string, convert that into an object.
          // Otherwise, just default to the standard class.
          var collectionClass;
          if (path) {
            controller = data.keywords.controller;
            container = controller && controller.container;
            collectionClass = ember$handlebars$ext$$handlebarsGet(this, path, options) || container.lookupFactory('view:' + path);
            ember$metal$core$$default.assert(ember$runtime$system$string$$fmt("%@ #collection: Could not find collection class %@", [data.view, path]), !!collectionClass);
          }
          else {
            collectionClass = ember$views$views$collection_view$$default;
          }

          var hash = options.hash, itemHash = {}, match;

          // Extract item view class if provided else default to the standard class
          var collectionPrototype = collectionClass.proto(), itemViewClass;

          if (hash.itemView) {
            controller = data.keywords.controller;
            ember$metal$core$$default.assert('You specified an itemView, but the current context has no ' +
                         'container to look the itemView up in. This probably means ' +
                         'that you created a view manually, instead of through the ' +
                         'container. Instead, use container.lookup("view:viewName"), ' +
                         'which will properly instantiate your view.',
                         controller && controller.container);
            container = controller.container;
            itemViewClass = container.lookupFactory('view:' + hash.itemView);
            ember$metal$core$$default.assert('You specified the itemView ' + hash.itemView + ", but it was " +
                         "not found at " + container.describe("view:" + hash.itemView) +
                         " (and it was not registered in the container)", !!itemViewClass);
          } else if (hash.itemViewClass) {
            itemViewClass = ember$handlebars$ext$$handlebarsGet(collectionPrototype, hash.itemViewClass, options);
          } else {
            itemViewClass = collectionPrototype.itemViewClass;
          }

          ember$metal$core$$default.assert(ember$runtime$system$string$$fmt("%@ #collection: Could not find itemViewClass %@", [data.view, itemViewClass]), !!itemViewClass);

          delete hash.itemViewClass;
          delete hash.itemView;

          // Go through options passed to the {{collection}} helper and extract options
          // that configure item views instead of the collection itself.
          for (var prop in hash) {
            if (hash.hasOwnProperty(prop)) {
              match = prop.match(/^item(.)(.*)$/);

              if (match && prop !== 'itemController') {
                // Convert itemShouldFoo -> shouldFoo
                itemHash[match[1].toLowerCase() + match[2]] = hash[prop];
                // Delete from hash as this will end up getting passed to the
                // {{view}} helper method.
                delete hash[prop];
              }
            }
          }

          if (fn) {
            itemHash.template = fn;
            delete options.fn;
          }

          var emptyViewClass;
          if (inverse && inverse !== ember$handlebars$compiler$$default.VM.noop) {
            emptyViewClass = ember$metal$property_get$$get(collectionPrototype, 'emptyViewClass');
            emptyViewClass = emptyViewClass.extend({
                  template: inverse,
                  tagName: itemHash.tagName
            });
          } else if (hash.emptyViewClass) {
            emptyViewClass = ember$handlebars$ext$$handlebarsGet(this, hash.emptyViewClass, options);
          }
          if (emptyViewClass) { hash.emptyView = emptyViewClass; }

          if (hash.keyword) {
            itemHash._context = this;
          } else {
            itemHash._context = alias('content');
          }

          var viewOptions = ember$handlebars$helpers$view$$ViewHelper.propertiesFromHTMLOptions({ data: data, hash: itemHash }, this);
          hash.itemViewClass = itemViewClass.extend(viewOptions);

          options.helperName = options.helperName || 'collection';

          return helpers.view.call(this, collectionClass, options);
        }

        ember$handlebars$helpers$collection$$default = collectionHelper;
    }).call(this);

    (function() {
        var helpers = ember$handlebars$compiler$$default.helpers;
        var slice = [].slice;

        ember$handlebars$helpers$unbound$$default = function unboundHelper(property, fn) {
          var options = arguments[arguments.length - 1],
              container = options.data.view.container,
              helper, context, out, ctx;

          ctx = this;
          if (arguments.length > 2) {
            // Unbound helper call.
            options.data.isUnbound = true;
            helper = ember$handlebars$helpers$binding$$resolveHelper(container, property) || helpers.helperMissing;
            out = helper.apply(ctx, slice.call(arguments, 1));
            delete options.data.isUnbound;
            return out;
          }

          context = (fn.contexts && fn.contexts.length) ? fn.contexts[0] : ctx;
          return ember$handlebars$ext$$handlebarsGet(context, property, fn);
        };
    }).call(this);

    (function() {
        function consoleMethod(name) {
          var consoleObj, logToConsole;
          if (ember$metal$core$$default.imports.console) {
            consoleObj = ember$metal$core$$default.imports.console;
          } else if (typeof console !== 'undefined') {
            consoleObj = console;
          }

          var method = typeof consoleObj === 'object' ? consoleObj[name] : null;

          if (method) {
            // Older IE doesn't support apply, but Chrome needs it
            if (typeof method.apply === 'function') {
              logToConsole = function() {
                method.apply(consoleObj, arguments);
              };
              logToConsole.displayName = 'console.' + name;
              return logToConsole;
            } else {
              return function() {
                var message = Array.prototype.join.call(arguments, ', ');
                method(message);
              };
            }
          }
        }

        function assertPolyfill(test, message) {
          if (!test) {
            try {
              // attempt to preserve the stack
              throw new ember$metal$error$$default("assertion failed: " + message);
            } catch(error) {
              setTimeout(function() {
                throw error;
              }, 0);
            }
          }
        }

        ember$metal$logger$$default = {
          /**
           Logs the arguments to the console.
           You can pass as many arguments as you want and they will be joined together with a space.

            ```javascript
            var foo = 1;
            Ember.Logger.log('log value of foo:', foo);
            // "log value of foo: 1" will be printed to the console
            ```

           @method log
           @for Ember.Logger
           @param {*} arguments
          */
          log:   consoleMethod('log')   || ember$metal$core$$default.K,

          /**
           Prints the arguments to the console with a warning icon.
           You can pass as many arguments as you want and they will be joined together with a space.

            ```javascript
            Ember.Logger.warn('Something happened!');
            // "Something happened!" will be printed to the console with a warning icon.
            ```

           @method warn
           @for Ember.Logger
           @param {*} arguments
          */
          warn:  consoleMethod('warn')  || ember$metal$core$$default.K,

          /**
           Prints the arguments to the console with an error icon, red text and a stack trace.
           You can pass as many arguments as you want and they will be joined together with a space.

            ```javascript
            Ember.Logger.error('Danger! Danger!');
            // "Danger! Danger!" will be printed to the console in red text.
            ```

           @method error
           @for Ember.Logger
           @param {*} arguments
          */
          error: consoleMethod('error') || ember$metal$core$$default.K,

          /**
           Logs the arguments to the console.
           You can pass as many arguments as you want and they will be joined together with a space.

            ```javascript
            var foo = 1;
            Ember.Logger.info('log value of foo:', foo);
            // "log value of foo: 1" will be printed to the console
            ```

           @method info
           @for Ember.Logger
           @param {*} arguments
          */
          info:  consoleMethod('info')  || ember$metal$core$$default.K,

          /**
           Logs the arguments to the console in blue text.
           You can pass as many arguments as you want and they will be joined together with a space.

            ```javascript
            var foo = 1;
            Ember.Logger.debug('log value of foo:', foo);
            // "log value of foo: 1" will be printed to the console
            ```

           @method debug
           @for Ember.Logger
           @param {*} arguments
          */
          debug: consoleMethod('debug') || consoleMethod('info') || ember$metal$core$$default.K,

          /**
           If the value passed into `Ember.Logger.assert` is not truthy it will throw an error with a stack trace.

            ```javascript
            Ember.Logger.assert(true); // undefined
            Ember.Logger.assert(true === false); // Throws an Assertion failed error.
            ```

           @method assert
           @for Ember.Logger
           @param {Boolean} bool Value to test
          */
          assert: consoleMethod('assert') || assertPolyfill
        };
    }).call(this);

    (function() {
        var a_slice = [].slice;

        /**
          `log` allows you to output the value of variables in the current rendering
          context. `log` also accepts primitive types such as strings or numbers.

          ```handlebars
          {{log "myVariable:" myVariable }}
          ```

          @method log
          @for Ember.Handlebars.helpers
          @param {String} property
        */
        function logHelper() {
          var params = a_slice.call(arguments, 0, -1),
              options = arguments[arguments.length - 1],
              logger = ember$metal$logger$$default.log,
              values = [],
              allowPrimitives = true;

          for (var i = 0; i < params.length; i++) {
            var type = options.types[i];

            if (type === 'ID' || !allowPrimitives) {
              var context = (options.contexts && options.contexts[i]) || this,
                  normalized = ember$handlebars$ext$$normalizePath(context, params[i], options.data);

              if (normalized.path === 'this') {
                values.push(normalized.root);
              } else {
                values.push(ember$handlebars$ext$$handlebarsGet(normalized.root, normalized.path, options));
              }
            } else {
              values.push(params[i]);
            }
          }

          logger.apply(logger, values);
        }

        ember$handlebars$helpers$debug$$logHelper = logHelper;

        /**
          Execute the `debugger` statement in the current context.

          ```handlebars
          {{debugger}}
          ```

          Before invoking the `debugger` statement, there
          are a few helpful variables defined in the
          body of this helper that you can inspect while
          debugging that describe how and where this
          helper was invoked:

          - templateContext: this is most likely a controller
            from which this template looks up / displays properties
          - typeOfTemplateContext: a string description of
            what the templateContext is

          For example, if you're wondering why a value `{{foo}}`
          isn't rendering as expected within a template, you
          could place a `{{debugger}}` statement, and when
          the `debugger;` breakpoint is hit, you can inspect
          `templateContext`, determine if it's the object you
          expect, and/or evaluate expressions in the console
          to perform property lookups on the `templateContext`:

          ```
            > templateContext.get('foo') // -> "<value of {{foo}}>"
          ```

          @method debugger
          @for Ember.Handlebars.helpers
          @param {String} property
        */
        function debuggerHelper(options) {

          // These are helpful values you can inspect while debugging.
          var templateContext = this;
          var typeOfTemplateContext = ember$metal$utils$$inspect(templateContext);

          debugger;
        }

        ember$handlebars$helpers$debug$$debuggerHelper = debuggerHelper;
    }).call(this);

    (function() {
        ember$runtime$mixins$controller_content_model_alias_deprecation$$default = ember$metal$mixin$$Mixin.create({
          /**
            @private

            Moves `content` to `model`  at extend time if a `model` is not also specified.

            Note that this currently modifies the mixin themselves, which is technically
            dubious but is practically of little consequence. This may change in the
            future.

            @method willMergeMixin
            @since 1.4.0
          */
          willMergeMixin: function(props) {
            // Calling super is only OK here since we KNOW that
            // there is another Mixin loaded first.
            this._super.apply(this, arguments);

            var modelSpecified = !!props.model;

            if (props.content && !modelSpecified) {
              props.model = props.content;
              delete props['content'];

              ember$metal$core$$default.deprecate('Do not specify `content` on a Controller, use `model` instead.', false);
            }
          }
        });
    }).call(this);

    (function() {
        ember$runtime$controllers$controller$$ControllerMixin = ember$metal$mixin$$Mixin.create(ember$runtime$mixins$action_handler$$default, ember$runtime$mixins$controller_content_model_alias_deprecation$$default, {
          /* ducktype as a controller */
          isController: true,

          /**
            The object to which actions from the view should be sent.

            For example, when a Handlebars template uses the `{{action}}` helper,
            it will attempt to send the action to the view's controller's `target`.

            By default, the value of the target property is set to the router, and
            is injected when a controller is instantiated. This injection is defined
            in Ember.Application#buildContainer, and is applied as part of the
            applications initialization process. It can also be set after a controller
            has been instantiated, for instance when using the render helper in a
            template, or when a controller is used as an `itemController`. In most
            cases the `target` property will automatically be set to the logical
            consumer of actions for the controller.

            @property target
            @default null
          */
          target: null,

          container: null,

          parentController: null,

          store: null,

          model: null,
          content: ember$metal$computed$$computed.alias('model'),

          deprecatedSendHandles: function(actionName) {
            return !!this[actionName];
          },

          deprecatedSend: function(actionName) {
            var args = [].slice.call(arguments, 1);
            ember$metal$core$$default.assert('' + this + " has the action " + actionName + " but it is not a function", typeof this[actionName] === 'function');
            ember$metal$core$$default.deprecate('Action handlers implemented directly on controllers are deprecated in favor of action handlers on an `actions` object ( action: `' + actionName + '` on ' + this + ')', false);
            this[actionName].apply(this, args);
            return;
          }
        });

        ember$runtime$controllers$controller$$Controller = ember$runtime$system$object$$default.extend(ember$runtime$controllers$controller$$ControllerMixin);
    }).call(this);

    (function() {
        /**
        @module ember
        @submodule ember-runtime
        */

        var OUT_OF_RANGE_EXCEPTION = "Index out of range";

        var EMPTY = [];
        var alias = ember$metal$computed$$computed.alias;
        var K = ember$metal$core$$default.K;

        /**
          An ArrayProxy wraps any other object that implements `Ember.Array` and/or
          `Ember.MutableArray,` forwarding all requests. This makes it very useful for
          a number of binding use cases or other cases where being able to swap
          out the underlying array is useful.

          A simple example of usage:

          ```javascript
          var pets = ['dog', 'cat', 'fish'];
          var ap = Ember.ArrayProxy.create({ content: Ember.A(pets) });

          ap.get('firstObject');                        // 'dog'
          ap.set('content', ['amoeba', 'paramecium']);
          ap.get('firstObject');                        // 'amoeba'
          ```

          This class can also be useful as a layer to transform the contents of
          an array, as they are accessed. This can be done by overriding
          `objectAtContent`:

          ```javascript
          var pets = ['dog', 'cat', 'fish'];
          var ap = Ember.ArrayProxy.create({
              content: Ember.A(pets),
              objectAtContent: function(idx) {
                  return this.get('content').objectAt(idx).toUpperCase();
              }
          });

          ap.get('firstObject'); // . 'DOG'
          ```

          @class ArrayProxy
          @namespace Ember
          @extends Ember.Object
          @uses Ember.MutableArray
        */
        var ArrayProxy = ember$runtime$system$object$$default.extend(ember$runtime$mixins$mutable_array$$default, {

          /**
            The content array. Must be an object that implements `Ember.Array` and/or
            `Ember.MutableArray.`

            @property content
            @type Ember.Array
          */
          content: null,

          /**
           The array that the proxy pretends to be. In the default `ArrayProxy`
           implementation, this and `content` are the same. Subclasses of `ArrayProxy`
           can override this property to provide things like sorting and filtering.

           @property arrangedContent
          */
          arrangedContent: alias('content'),

          /**
            Should actually retrieve the object at the specified index from the
            content. You can override this method in subclasses to transform the
            content item to something new.

            This method will only be called if content is non-`null`.

            @method objectAtContent
            @param {Number} idx The index to retrieve.
            @return {Object} the value or undefined if none found
          */
          objectAtContent: function(idx) {
            return ember$metal$property_get$$get(this, 'arrangedContent').objectAt(idx);
          },

          /**
            Should actually replace the specified objects on the content array.
            You can override this method in subclasses to transform the content item
            into something new.

            This method will only be called if content is non-`null`.

            @method replaceContent
            @param {Number} idx The starting index
            @param {Number} amt The number of items to remove from the content.
            @param {Array} objects Optional array of objects to insert or null if no
              objects.
            @return {void}
          */
          replaceContent: function(idx, amt, objects) {
            ember$metal$property_get$$get(this, 'content').replace(idx, amt, objects);
          },

          /**
            Invoked when the content property is about to change. Notifies observers that the
            entire array content will change.

            @private
            @method _contentWillChange
          */
          _contentWillChange: ember$metal$mixin$$beforeObserver('content', function() {
            this._teardownContent();
          }),

          _teardownContent: function() {
            var content = ember$metal$property_get$$get(this, 'content');

            if (content) {
              content.removeArrayObserver(this, {
                willChange: 'contentArrayWillChange',
                didChange: 'contentArrayDidChange'
              });
            }
          },

          contentArrayWillChange: K,
          contentArrayDidChange: K,

          /**
            Invoked when the content property changes. Notifies observers that the
            entire array content has changed.

            @private
            @method _contentDidChange
          */
          _contentDidChange: ember$metal$mixin$$observer('content', function() {
            var content = ember$metal$property_get$$get(this, 'content');

            ember$metal$core$$default.assert("Can't set ArrayProxy's content to itself", content !== this);

            this._setupContent();
          }),

          _setupContent: function() {
            var content = ember$metal$property_get$$get(this, 'content');

            if (content) {
              ember$metal$core$$default.assert(ember$runtime$system$string$$fmt('ArrayProxy expects an Array or ' +
                'Ember.ArrayProxy, but you passed %@', [typeof content]),
                ember$metal$utils$$isArray(content) || content.isDestroyed);

              content.addArrayObserver(this, {
                willChange: 'contentArrayWillChange',
                didChange: 'contentArrayDidChange'
              });
            }
          },

          _arrangedContentWillChange: ember$metal$mixin$$beforeObserver('arrangedContent', function() {
            var arrangedContent = ember$metal$property_get$$get(this, 'arrangedContent'),
                len = arrangedContent ? ember$metal$property_get$$get(arrangedContent, 'length') : 0;

            this.arrangedContentArrayWillChange(this, 0, len, undefined);
            this.arrangedContentWillChange(this);

            this._teardownArrangedContent(arrangedContent);
          }),

          _arrangedContentDidChange: ember$metal$mixin$$observer('arrangedContent', function() {
            var arrangedContent = ember$metal$property_get$$get(this, 'arrangedContent'),
                len = arrangedContent ? ember$metal$property_get$$get(arrangedContent, 'length') : 0;

            ember$metal$core$$default.assert("Can't set ArrayProxy's content to itself", arrangedContent !== this);

            this._setupArrangedContent();

            this.arrangedContentDidChange(this);
            this.arrangedContentArrayDidChange(this, 0, undefined, len);
          }),

          _setupArrangedContent: function() {
            var arrangedContent = ember$metal$property_get$$get(this, 'arrangedContent');

            if (arrangedContent) {
              ember$metal$core$$default.assert(ember$runtime$system$string$$fmt('ArrayProxy expects an Array or ' +
                'Ember.ArrayProxy, but you passed %@', [typeof arrangedContent]),
                ember$metal$utils$$isArray(arrangedContent) || arrangedContent.isDestroyed);

              arrangedContent.addArrayObserver(this, {
                willChange: 'arrangedContentArrayWillChange',
                didChange: 'arrangedContentArrayDidChange'
              });
            }
          },

          _teardownArrangedContent: function() {
            var arrangedContent = ember$metal$property_get$$get(this, 'arrangedContent');

            if (arrangedContent) {
              arrangedContent.removeArrayObserver(this, {
                willChange: 'arrangedContentArrayWillChange',
                didChange: 'arrangedContentArrayDidChange'
              });
            }
          },

          arrangedContentWillChange: K,
          arrangedContentDidChange: K,

          objectAt: function(idx) {
            return ember$metal$property_get$$get(this, 'content') && this.objectAtContent(idx);
          },

          length: ember$metal$computed$$computed(function() {
            var arrangedContent = ember$metal$property_get$$get(this, 'arrangedContent');
            return arrangedContent ? ember$metal$property_get$$get(arrangedContent, 'length') : 0;
            // No dependencies since Enumerable notifies length of change
          }),

          _replace: function(idx, amt, objects) {
            var content = ember$metal$property_get$$get(this, 'content');
            ember$metal$core$$default.assert('The content property of '+ this.constructor + ' should be set before modifying it', content);
            if (content) this.replaceContent(idx, amt, objects);
            return this;
          },

          replace: function() {
            if (ember$metal$property_get$$get(this, 'arrangedContent') === ember$metal$property_get$$get(this, 'content')) {
              ember$metal$utils$$apply(this, this._replace, arguments);
            } else {
              throw new ember$metal$error$$default("Using replace on an arranged ArrayProxy is not allowed.");
            }
          },

          _insertAt: function(idx, object) {
            if (idx > ember$metal$property_get$$get(this, 'content.length')) throw new ember$metal$error$$default(OUT_OF_RANGE_EXCEPTION);
            this._replace(idx, 0, [object]);
            return this;
          },

          insertAt: function(idx, object) {
            if (ember$metal$property_get$$get(this, 'arrangedContent') === ember$metal$property_get$$get(this, 'content')) {
              return this._insertAt(idx, object);
            } else {
              throw new ember$metal$error$$default("Using insertAt on an arranged ArrayProxy is not allowed.");
            }
          },

          removeAt: function(start, len) {
            if ('number' === typeof start) {
              var content = ember$metal$property_get$$get(this, 'content'),
                  arrangedContent = ember$metal$property_get$$get(this, 'arrangedContent'),
                  indices = [], i;

              if ((start < 0) || (start >= ember$metal$property_get$$get(this, 'length'))) {
                throw new ember$metal$error$$default(OUT_OF_RANGE_EXCEPTION);
              }

              if (len === undefined) len = 1;

              // Get a list of indices in original content to remove
              for (i=start; i<start+len; i++) {
                // Use arrangedContent here so we avoid confusion with objects transformed by objectAtContent
                indices.push(content.indexOf(arrangedContent.objectAt(i)));
              }

              // Replace in reverse order since indices will change
              indices.sort(function(a,b) { return b - a; });

              ember$metal$property_events$$beginPropertyChanges();
              for (i=0; i<indices.length; i++) {
                this._replace(indices[i], 1, EMPTY);
              }
              ember$metal$property_events$$endPropertyChanges();
            }

            return this ;
          },

          pushObject: function(obj) {
            this._insertAt(ember$metal$property_get$$get(this, 'content.length'), obj) ;
            return obj ;
          },

          pushObjects: function(objects) {
            if (!(ember$runtime$mixins$enumerable$$default.detect(objects) || ember$metal$utils$$isArray(objects))) {
              throw new TypeError("Must pass Ember.Enumerable to Ember.MutableArray#pushObjects");
            }
            this._replace(ember$metal$property_get$$get(this, 'length'), 0, objects);
            return this;
          },

          setObjects: function(objects) {
            if (objects.length === 0) return this.clear();

            var len = ember$metal$property_get$$get(this, 'length');
            this._replace(0, len, objects);
            return this;
          },

          unshiftObject: function(obj) {
            this._insertAt(0, obj) ;
            return obj ;
          },

          unshiftObjects: function(objects) {
            this._replace(0, 0, objects);
            return this;
          },

          slice: function() {
            var arr = this.toArray();
            return arr.slice.apply(arr, arguments);
          },

          arrangedContentArrayWillChange: function(item, idx, removedCnt, addedCnt) {
            this.arrayContentWillChange(idx, removedCnt, addedCnt);
          },

          arrangedContentArrayDidChange: function(item, idx, removedCnt, addedCnt) {
            this.arrayContentDidChange(idx, removedCnt, addedCnt);
          },

          init: function() {
            this._super();
            this._setupContent();
            this._setupArrangedContent();
          },

          willDestroy: function() {
            this._teardownArrangedContent();
            this._teardownContent();
          }
        });

        ember$runtime$system$array_proxy$$default = ArrayProxy;
    }).call(this);

    (function() {
        var forEach = ember$metal$enumerable_utils$$default.forEach;

        ember$runtime$mixins$sortable$$default = ember$metal$mixin$$Mixin.create(ember$runtime$mixins$mutable_enumerable$$default, {

          /**
            Specifies which properties dictate the arrangedContent's sort order.

            When specifying multiple properties the sorting will use properties
            from the `sortProperties` array prioritized from first to last.

            @property {Array} sortProperties
          */
          sortProperties: null,

          /**
            Specifies the arrangedContent's sort direction.
            Sorts the content in ascending order by default. Set to `false` to
            use descending order.

            @property {Boolean} sortAscending
            @default true
          */
          sortAscending: true,

          /**
            The function used to compare two values. You can override this if you
            want to do custom comparisons. Functions must be of the type expected by
            Array#sort, i.e.
              return 0 if the two parameters are equal,
              return a negative value if the first parameter is smaller than the second or
              return a positive value otherwise:

            ```javascript
            function(x,y) { // These are assumed to be integers
              if (x === y)
                return 0;
              return x < y ? -1 : 1;
            }
            ```

            @property sortFunction
            @type {Function}
            @default Ember.compare
          */
          sortFunction: ember$runtime$compare$$default,

          orderBy: function(item1, item2) {
            var result = 0,
                sortProperties = ember$metal$property_get$$get(this, 'sortProperties'),
                sortAscending = ember$metal$property_get$$get(this, 'sortAscending'),
                sortFunction = ember$metal$property_get$$get(this, 'sortFunction');

            ember$metal$core$$default.assert("you need to define `sortProperties`", !!sortProperties);

            forEach(sortProperties, function(propertyName) {
              if (result === 0) {
                result = sortFunction.call(this, ember$metal$property_get$$get(item1, propertyName), ember$metal$property_get$$get(item2, propertyName));
                if ((result !== 0) && !sortAscending) {
                  result = (-1) * result;
                }
              }
            }, this);

            return result;
          },

          destroy: function() {
            var content = ember$metal$property_get$$get(this, 'content'),
                sortProperties = ember$metal$property_get$$get(this, 'sortProperties');

            if (content && sortProperties) {
              forEach(content, function(item) {
                forEach(sortProperties, function(sortProperty) {
                  ember$metal$observer$$removeObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');
                }, this);
              }, this);
            }

            return this._super();
          },

          isSorted: ember$metal$computed$$computed.bool('sortProperties'),

          /**
            Overrides the default arrangedContent from arrayProxy in order to sort by sortFunction.
            Also sets up observers for each sortProperty on each item in the content Array.

            @property arrangedContent
          */

          arrangedContent: ember$metal$computed$$computed('content', 'sortProperties.@each', function(key, value) {
            var content = ember$metal$property_get$$get(this, 'content'),
                isSorted = ember$metal$property_get$$get(this, 'isSorted'),
                sortProperties = ember$metal$property_get$$get(this, 'sortProperties'),
                self = this;

            if (content && isSorted) {
              content = content.slice();
              content.sort(function(item1, item2) {
                return self.orderBy(item1, item2);
              });
              forEach(content, function(item) {
                forEach(sortProperties, function(sortProperty) {
                  ember$metal$observer$$addObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');
                }, this);
              }, this);
              return ember$metal$core$$default.A(content);
            }

            return content;
          }),

          _contentWillChange: ember$metal$mixin$$beforeObserver('content', function() {
            var content = ember$metal$property_get$$get(this, 'content'),
                sortProperties = ember$metal$property_get$$get(this, 'sortProperties');

            if (content && sortProperties) {
              forEach(content, function(item) {
                forEach(sortProperties, function(sortProperty) {
                  ember$metal$observer$$removeObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');
                }, this);
              }, this);
            }

            this._super();
          }),

          sortPropertiesWillChange: ember$metal$mixin$$beforeObserver('sortProperties', function() {
            this._lastSortAscending = undefined;
          }),

          sortPropertiesDidChange: ember$metal$mixin$$observer('sortProperties', function() {
            this._lastSortAscending = undefined;
          }),

          sortAscendingWillChange: ember$metal$mixin$$beforeObserver('sortAscending', function() {
            this._lastSortAscending = ember$metal$property_get$$get(this, 'sortAscending');
          }),

          sortAscendingDidChange: ember$metal$mixin$$observer('sortAscending', function() {
            if (this._lastSortAscending !== undefined && ember$metal$property_get$$get(this, 'sortAscending') !== this._lastSortAscending) {
              var arrangedContent = ember$metal$property_get$$get(this, 'arrangedContent');
              arrangedContent.reverseObjects();
            }
          }),

          contentArrayWillChange: function(array, idx, removedCount, addedCount) {
            var isSorted = ember$metal$property_get$$get(this, 'isSorted');

            if (isSorted) {
              var arrangedContent = ember$metal$property_get$$get(this, 'arrangedContent');
              var removedObjects = array.slice(idx, idx+removedCount);
              var sortProperties = ember$metal$property_get$$get(this, 'sortProperties');

              forEach(removedObjects, function(item) {
                arrangedContent.removeObject(item);

                forEach(sortProperties, function(sortProperty) {
                  ember$metal$observer$$removeObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');
                }, this);
              }, this);
            }

            return this._super(array, idx, removedCount, addedCount);
          },

          contentArrayDidChange: function(array, idx, removedCount, addedCount) {
            var isSorted = ember$metal$property_get$$get(this, 'isSorted'),
                sortProperties = ember$metal$property_get$$get(this, 'sortProperties');

            if (isSorted) {
              var addedObjects = array.slice(idx, idx+addedCount);

              forEach(addedObjects, function(item) {
                this.insertItemSorted(item);

                forEach(sortProperties, function(sortProperty) {
                  ember$metal$observer$$addObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');
                }, this);
              }, this);
            }

            return this._super(array, idx, removedCount, addedCount);
          },

          insertItemSorted: function(item) {
            var arrangedContent = ember$metal$property_get$$get(this, 'arrangedContent');
            var length = ember$metal$property_get$$get(arrangedContent, 'length');

            var idx = this._binarySearch(item, 0, length);
            arrangedContent.insertAt(idx, item);
          },

          contentItemSortPropertyDidChange: function(item) {
            var arrangedContent = ember$metal$property_get$$get(this, 'arrangedContent'),
                oldIndex = arrangedContent.indexOf(item),
                leftItem = arrangedContent.objectAt(oldIndex - 1),
                rightItem = arrangedContent.objectAt(oldIndex + 1),
                leftResult = leftItem && this.orderBy(item, leftItem),
                rightResult = rightItem && this.orderBy(item, rightItem);

            if (leftResult < 0 || rightResult > 0) {
              arrangedContent.removeObject(item);
              this.insertItemSorted(item);
            }
          },

          _binarySearch: function(item, low, high) {
            var mid, midItem, res, arrangedContent;

            if (low === high) {
              return low;
            }

            arrangedContent = ember$metal$property_get$$get(this, 'arrangedContent');

            mid = low + Math.floor((high - low) / 2);
            midItem = arrangedContent.objectAt(mid);

            res = this.orderBy(midItem, item);

            if (res < 0) {
              return this._binarySearch(item, mid+1, high);
            } else if (res > 0) {
              return this._binarySearch(item, low, mid);
            }

            return mid;
          }
        });
    }).call(this);

    (function() {
        var forEach = ember$metal$enumerable_utils$$default.forEach;
        var replace = ember$metal$enumerable_utils$$default.replace;

        ember$runtime$controllers$array_controller$$default = ember$runtime$system$array_proxy$$default.extend(ember$runtime$controllers$controller$$ControllerMixin, ember$runtime$mixins$sortable$$default, {

          /**
            The controller used to wrap items, if any.

            @property itemController
            @type String
            @default null
          */
          itemController: null,

          /**
            Return the name of the controller to wrap items, or `null` if items should
            be returned directly.  The default implementation simply returns the
            `itemController` property, but subclasses can override this method to return
            different controllers for different objects.

            For example:

            ```javascript
            App.MyArrayController = Ember.ArrayController.extend({
              lookupItemController: function( object ) {
                if (object.get('isSpecial')) {
                  return "special"; // use App.SpecialController
                } else {
                  return "regular"; // use App.RegularController
                }
              }
            });
            ```

            @method lookupItemController
            @param {Object} object
            @return {String}
          */
          lookupItemController: function(object) {
            return ember$metal$property_get$$get(this, 'itemController');
          },

          objectAtContent: function(idx) {
            var length = ember$metal$property_get$$get(this, 'length');
            var arrangedContent = ember$metal$property_get$$get(this, 'arrangedContent');
            var object = arrangedContent && arrangedContent.objectAt(idx);
            var controllerClass;

            if (idx >= 0 && idx < length) {
              controllerClass = this.lookupItemController(object);
              if (controllerClass) {
                return this.controllerAt(idx, object, controllerClass);
              }
            }

            // When `controllerClass` is falsy, we have not opted in to using item
            // controllers, so return the object directly.

            // When the index is out of range, we want to return the "out of range"
            // value, whatever that might be.  Rather than make assumptions
            // (e.g. guessing `null` or `undefined`) we defer this to `arrangedContent`.
            return object;
          },

          arrangedContentDidChange: function() {
            this._super();
            this._resetSubControllers();
          },

          arrayContentDidChange: function(idx, removedCnt, addedCnt) {
            var subControllers = this._subControllers;

            if (subControllers.length) {
              var subControllersToRemove = subControllers.slice(idx, idx + removedCnt);

              forEach(subControllersToRemove, function(subController) {
                if (subController) {
                  subController.destroy();
                }
              });

              replace(subControllers, idx, removedCnt, new Array(addedCnt));
            }

            // The shadow array of subcontrollers must be updated before we trigger
            // observers, otherwise observers will get the wrong subcontainer when
            // calling `objectAt`
            this._super(idx, removedCnt, addedCnt);
          },

          init: function() {
            this._super();
            this._subControllers = [];
          },

          model: ember$metal$computed$$computed(function () {
            return ember$metal$core$$default.A();
          }),

          /**
           * Flag to mark as being "virtual". Used to keep this instance
           * from participating in the parentController hierarchy.
           *
           * @private
           * @property _isVirtual
           * @type Boolean
           */
          _isVirtual: false,

          controllerAt: function(idx, object, controllerClass) {
            var fullName, subController, parentController;

            var container = ember$metal$property_get$$get(this, 'container');
            var subControllers = this._subControllers;

            if (subControllers.length > idx) {
              subController = subControllers[idx];

              if (subController) {
                return subController;
              }
            }

            fullName = 'controller:' + controllerClass;

            if (!container.has(fullName)) {
              throw new ember$metal$error$$default('Could not resolve itemController: "' + controllerClass + '"');
            }

            if (this._isVirtual) {
              parentController = ember$metal$property_get$$get(this, 'parentController');
            } else {
              parentController = this;
            }

            subController = container.lookupFactory(fullName).create({
              target: parentController,
              parentController: parentController,
              model: object
            });

            subControllers[idx] = subController;

            return subController;
          },

          _subControllers: null,

          _resetSubControllers: function() {
            var controller;
            var subControllers = this._subControllers;

            if (subControllers.length) {
              for (var i = 0, length = subControllers.length; length > i; i++) {
                controller = subControllers[i];
                if (controller) {
                  controller.destroy();
                }
              }

              subControllers.length = 0;
            }
          },

          willDestroy: function() {
            this._resetSubControllers();
            this._super();
          }
        });
    }).call(this);

    (function() {
        // var emberAssert = Ember.assert,
        var K = ember$metal$core$$default.K;

        var helpers = ember$handlebars$compiler$$default.helpers;

        ember$handlebars$helpers$each$$EachView = ember$views$views$collection_view$$default.extend(ember$handlebars$views$metamorph_view$$_Metamorph, {

          init: function() {
            var itemController = ember$metal$property_get$$get(this, 'itemController');
            var binding;

            if (itemController) {
              var controller = ember$metal$property_get$$get(this, 'controller.container').lookupFactory('controller:array').create({
                _isVirtual: true,
                parentController: ember$metal$property_get$$get(this, 'controller'),
                itemController: itemController,
                target: ember$metal$property_get$$get(this, 'controller'),
                _eachView: this
              });

              this.disableContentObservers(function() {
                ember$metal$property_set$$set(this, 'content', controller);
                binding = new ember$metal$binding$$Binding('content', '_eachView.dataSource').oneWay();
                binding.connect(controller);
              });

              ember$metal$property_set$$set(this, '_arrayController', controller);
            } else {
              this.disableContentObservers(function() {
                binding = new ember$metal$binding$$Binding('content', 'dataSource').oneWay();
                binding.connect(this);
              });
            }

            return this._super();
          },

          _assertArrayLike: function(content) {
            ember$metal$core$$default.assert(ember$runtime$system$string$$fmt("The value that #each loops over must be an Array. You " +
                             "passed %@, but it should have been an ArrayController",
                             [content.constructor]),
                             !ember$runtime$controllers$controller$$ControllerMixin.detect(content) ||
                               (content && content.isGenerated) ||
                               content instanceof ember$runtime$controllers$array_controller$$default);
            ember$metal$core$$default.assert(ember$runtime$system$string$$fmt("The value that #each loops over must be an Array. You passed %@", [(ember$runtime$controllers$controller$$ControllerMixin.detect(content) && content.get('model') !== undefined) ? ember$runtime$system$string$$fmt("'%@' (wrapped in %@)", [content.get('model'), content]) : content]), ember$runtime$mixins$array$$default.detect(content));
          },

          disableContentObservers: function(callback) {
            ember$metal$observer$$removeBeforeObserver(this, 'content', null, '_contentWillChange');
            ember$metal$observer$$removeObserver(this, 'content', null, '_contentDidChange');

            callback.call(this);

            ember$metal$observer$$addBeforeObserver(this, 'content', null, '_contentWillChange');
            ember$metal$observer$$addObserver(this, 'content', null, '_contentDidChange');
          },

          itemViewClass: ember$handlebars$views$metamorph_view$$_MetamorphView,
          emptyViewClass: ember$handlebars$views$metamorph_view$$_MetamorphView,

          createChildView: function(view, attrs) {
            view = this._super(view, attrs);

            // At the moment, if a container view subclass wants
            // to insert keywords, it is responsible for cloning
            // the keywords hash. This will be fixed momentarily.
            var keyword = ember$metal$property_get$$get(this, 'keyword');
            var content = ember$metal$property_get$$get(view, 'content');

            if (keyword) {
              var data = ember$metal$property_get$$get(view, 'templateData');

              data = ember$runtime$copy$$default(data);
              data.keywords = view.cloneKeywords();
              ember$metal$property_set$$set(view, 'templateData', data);

              // In this case, we do not bind, because the `content` of
              // a #each item cannot change.
              data.keywords[keyword] = content;
            }

            // If {{#each}} is looping over an array of controllers,
            // point each child view at their respective controller.
            if (content && content.isController) {
              ember$metal$property_set$$set(view, 'controller', content);
            }

            return view;
          },

          destroy: function() {
            if (!this._super()) { return; }

            var arrayController = ember$metal$property_get$$get(this, '_arrayController');

            if (arrayController) {
              arrayController.destroy();
            }

            return this;
          }
        });

        // Defeatureify doesn't seem to like nested functions that need to be removed
        function _addMetamorphCheck() {
          ember$handlebars$helpers$each$$EachView.reopen({
            _checkMetamorph: ember$metal$events$$on('didInsertElement', function() {
              ember$metal$core$$default.assert("The metamorph tags, " +
                           this.morph.start + " and " + this.morph.end +
                           ", have different parents.\nThe browser has fixed your template to output valid HTML (for example, check that you have properly closed all tags and have used a TBODY tag when creating a table with '{{#each}}')",
                document.getElementById( this.morph.start ).parentNode ===
                document.getElementById( this.morph.end ).parentNode
              );
            })
          });
        }

        // until ember-debug is es6ed
        var runInDebug = function(f){ f(); };

        runInDebug( function() {
          _addMetamorphCheck();
        });

        ember$handlebars$helpers$each$$GroupedEach = ember$handlebars$compiler$$default.GroupedEach = function(context, path, options) {
          var self = this,
              normalized = ember$handlebars$compiler$$default.normalizePath(context, path, options.data);

          this.context = context;
          this.path = path;
          this.options = options;
          this.template = options.fn;
          this.containingView = options.data.view;
          this.normalizedRoot = normalized.root;
          this.normalizedPath = normalized.path;
          this.content = this.lookupContent();

          this.addContentObservers();
          this.addArrayObservers();

          this.containingView.on('willClearRender', function() {
            self.destroy();
          });
        };

        ember$handlebars$helpers$each$$GroupedEach.prototype = {
          contentWillChange: function() {
            this.removeArrayObservers();
          },

          contentDidChange: function() {
            this.content = this.lookupContent();
            this.addArrayObservers();
            this.rerenderContainingView();
          },

          contentArrayWillChange: K,

          contentArrayDidChange: function() {
            this.rerenderContainingView();
          },

          lookupContent: function() {
            return ember$handlebars$ext$$handlebarsGet(this.normalizedRoot, this.normalizedPath, this.options);
          },

          addArrayObservers: function() {
            if (!this.content) { return; }

            this.content.addArrayObserver(this, {
              willChange: 'contentArrayWillChange',
              didChange: 'contentArrayDidChange'
            });
          },

          removeArrayObservers: function() {
            if (!this.content) { return; }

            this.content.removeArrayObserver(this, {
              willChange: 'contentArrayWillChange',
              didChange: 'contentArrayDidChange'
            });
          },

          addContentObservers: function() {
            ember$metal$observer$$addBeforeObserver(this.normalizedRoot, this.normalizedPath, this, this.contentWillChange);
            ember$metal$observer$$addObserver(this.normalizedRoot, this.normalizedPath, this, this.contentDidChange);
          },

          removeContentObservers: function() {
            ember$metal$observer$$removeBeforeObserver(this.normalizedRoot, this.normalizedPath, this.contentWillChange);
            ember$metal$observer$$removeObserver(this.normalizedRoot, this.normalizedPath, this.contentDidChange);
          },

          render: function() {
            if (!this.content) { return; }

            var content = this.content,
                contentLength = ember$metal$property_get$$get(content, 'length'),
                options = this.options,
                data = options.data,
                template = this.template;

            data.insideEach = true;
            for (var i = 0; i < contentLength; i++) {
              var context = content.objectAt(i);
              options.data.keywords[options.hash.keyword] = context;
              template(context, { data: data });
            }
          },

          rerenderContainingView: function() {
            var self = this;
            ember$metal$run_loop$$default.scheduleOnce('render', this, function() {
              // It's possible it's been destroyed after we enqueued a re-render call.
              if (!self.destroyed) {
                self.containingView.rerender();
              }
            });
          },

          destroy: function() {
            this.removeContentObservers();
            if (this.content) {
              this.removeArrayObservers();
            }
            this.destroyed = true;
          }
        };

        /**
          The `{{#each}}` helper loops over elements in a collection, rendering its
          block once for each item. It is an extension of the base Handlebars `{{#each}}`
          helper:

          ```javascript
          Developers = [{name: 'Yehuda'},{name: 'Tom'}, {name: 'Paul'}];
          ```

          ```handlebars
          {{#each Developers}}
            {{name}}
          {{/each}}
          ```

          `{{each}}` supports an alternative syntax with element naming:

          ```handlebars
          {{#each person in Developers}}
            {{person.name}}
          {{/each}}
          ```

          When looping over objects that do not have properties, `{{this}}` can be used
          to render the object:

          ```javascript
          DeveloperNames = ['Yehuda', 'Tom', 'Paul']
          ```

          ```handlebars
          {{#each DeveloperNames}}
            {{this}}
          {{/each}}
          ```
          ### {{else}} condition
          `{{#each}}` can have a matching `{{else}}`. The contents of this block will render
          if the collection is empty.

          ```
          {{#each person in Developers}}
            {{person.name}}
          {{else}}
            <p>Sorry, nobody is available for this task.</p>
          {{/each}}
          ```
          ### Specifying a View class for items
          If you provide an `itemViewClass` option that references a view class
          with its own `template` you can omit the block.

          The following template:

          ```handlebars
          {{#view App.MyView }}
            {{each view.items itemViewClass="App.AnItemView"}}
          {{/view}}
          ```

          And application code

          ```javascript
          App = Ember.Application.create({
            MyView: Ember.View.extend({
              items: [
                Ember.Object.create({name: 'Dave'}),
                Ember.Object.create({name: 'Mary'}),
                Ember.Object.create({name: 'Sara'})
              ]
            })
          });

          App.AnItemView = Ember.View.extend({
            template: Ember.Handlebars.compile("Greetings {{name}}")
          });
          ```

          Will result in the HTML structure below

          ```html
          <div class="ember-view">
            <div class="ember-view">Greetings Dave</div>
            <div class="ember-view">Greetings Mary</div>
            <div class="ember-view">Greetings Sara</div>
          </div>
          ```

          If an `itemViewClass` is defined on the helper, and therefore the helper is not
          being used as a block, an `emptyViewClass` can also be provided optionally.
          The `emptyViewClass` will match the behavior of the `{{else}}` condition
          described above. That is, the `emptyViewClass` will render if the collection
          is empty.

          ### Representing each item with a Controller.
          By default the controller lookup within an `{{#each}}` block will be
          the controller of the template where the `{{#each}}` was used. If each
          item needs to be presented by a custom controller you can provide a
          `itemController` option which references a controller by lookup name.
          Each item in the loop will be wrapped in an instance of this controller
          and the item itself will be set to the `model` property of that controller.

          This is useful in cases where properties of model objects need transformation
          or synthesis for display:

          ```javascript
          App.DeveloperController = Ember.ObjectController.extend({
            isAvailableForHire: function() {
              return !this.get('model.isEmployed') && this.get('model.isSeekingWork');
            }.property('isEmployed', 'isSeekingWork')
          })
          ```

          ```handlebars
          {{#each person in developers itemController="developer"}}
            {{person.name}} {{#if person.isAvailableForHire}}Hire me!{{/if}}
          {{/each}}
          ```

          Each itemController will receive a reference to the current controller as
          a `parentController` property.

          ### (Experimental) Grouped Each

          When used in conjunction with the experimental [group helper](https://github.com/emberjs/group-helper),
          you can inform Handlebars to re-render an entire group of items instead of
          re-rendering them one at a time (in the event that they are changed en masse
          or an item is added/removed).

          ```handlebars
          {{#group}}
            {{#each people}}
              {{firstName}} {{lastName}}
            {{/each}}
          {{/group}}
          ```

          This can be faster than the normal way that Handlebars re-renders items
          in some cases.

          If for some reason you have a group with more than one `#each`, you can make
          one of the collections be updated in normal (non-grouped) fashion by setting
          the option `groupedRows=true` (counter-intuitive, I know).

          For example,

          ```handlebars
          {{dealershipName}}

          {{#group}}
            {{#each dealers}}
              {{firstName}} {{lastName}}
            {{/each}}

            {{#each car in cars groupedRows=true}}
              {{car.make}} {{car.model}} {{car.color}}
            {{/each}}
          {{/group}}
          ```
          Any change to `dealershipName` or the `dealers` collection will cause the
          entire group to be re-rendered. However, changes to the `cars` collection
          will be re-rendered individually (as normal).

          Note that `group` behavior is also disabled by specifying an `itemViewClass`.

          @method each
          @for Ember.Handlebars.helpers
          @param [name] {String} name for item (used with `in`)
          @param [path] {String} path
          @param [options] {Object} Handlebars key/value pairs of options
          @param [options.itemViewClass] {String} a path to a view class used for each item
          @param [options.itemController] {String} name of a controller to be created for each item
          @param [options.groupedRows] {boolean} enable normal item-by-item rendering when inside a `#group` helper
        */
        function eachHelper(path, options) {
          var ctx, helperName = 'each';

          if (arguments.length === 4) {
            ember$metal$core$$default.assert("If you pass more than one argument to the each helper, it must be in the form #each foo in bar", arguments[1] === "in");

            var keywordName = arguments[0];


            options = arguments[3];
            path = arguments[2];

            helperName += ' ' + keywordName + ' in ' + path;

            if (path === '') { path = "this"; }

            options.hash.keyword = keywordName;

          } else if (arguments.length === 1) {
            options = path;
            path = 'this';
          } else {
            helperName += ' ' + path;
          }

          options.hash.dataSourceBinding = path;
          // Set up emptyView as a metamorph with no tag
          //options.hash.emptyViewClass = Ember._MetamorphView;

          // can't rely on this default behavior when use strict
          ctx = this || window;

          options.helperName = options.helperName || helperName;

          if (options.data.insideGroup && !options.hash.groupedRows && !options.hash.itemViewClass) {
            new ember$handlebars$helpers$each$$GroupedEach(ctx, path, options).render();
          } else {
            // ES6TODO: figure out how to do this without global lookup.
            return helpers.collection.call(ctx, 'Ember.Handlebars.EachView', options);
          }
        }

        ember$handlebars$helpers$each$$eachHelper = eachHelper;
    }).call(this);

    (function() {
        var helpers = ember$handlebars$compiler$$default.helpers;

        ember$handlebars$helpers$template$$default = function templateHelper(name, options) {
          ember$metal$core$$default.deprecate("The `template` helper has been deprecated in favor of the `partial` helper. Please use `partial` instead, which will work the same way.");

          options.helperName = options.helperName || 'template';

          return helpers.partial.apply(this, arguments);
        };
    }).call(this);

    (function() {
        ember$handlebars$helpers$partial$$default = function partialHelper(name, options) {

          var context = (options.contexts && options.contexts.length) ? options.contexts[0] : this;

          options.helperName = options.helperName || 'partial';

          if (options.types[0] === "ID") {
            // Helper was passed a property path; we need to
            // create a binding that will re-render whenever
            // this property changes.
            options.fn = function(context, fnOptions) {
              var partialName = ember$handlebars$ext$$handlebarsGet(context, name, fnOptions);
              renderPartial(context, partialName, fnOptions);
            };

            return ember$handlebars$helpers$binding$$bind.call(context, name, options, true, exists);
          } else {
            // Render the partial right into parent template.
            renderPartial(context, name, options);
          }
        };

        function exists(value) {
          return !ember$metal$is_none$$isNone(value);
        }

        function renderPartial(context, name, options) {
          var nameParts = name.split("/"),
              lastPart = nameParts[nameParts.length - 1];

          nameParts[nameParts.length - 1] = "_" + lastPart;

          var view = options.data.view,
              underscoredName = nameParts.join("/"),
              template = view.templateForName(underscoredName),
              deprecatedTemplate = !template && view.templateForName(name);

          ember$metal$core$$default.assert("Unable to find partial with name '"+name+"'.", template || deprecatedTemplate);

          template = template || deprecatedTemplate;

          template(context, { data: options.data });
        }
    }).call(this);

    (function() {
        ember$handlebars$helpers$yield$$default = function yieldHelper(options) {
          var view = options.data.view;

          while (view && !ember$metal$property_get$$get(view, 'layout')) {
            if (view._contextView) {
              view = view._contextView;
            } else {
              view = ember$metal$property_get$$get(view, '_parentView');
            }
          }

          ember$metal$core$$default.assert("You called yield in a template that was not a layout", !!view);

          view._yield(this, options);
        };
    }).call(this);

    (function() {
        ember$handlebars$helpers$loc$$default = function locHelper(str) {
          return ember$runtime$system$string$$loc(str);
        };
    }).call(this);

    (function() {
        /**
        @module ember
        @submodule ember-handlebars
        */

        /**
          The internal class used to create text inputs when the `{{input}}`
          helper is used with `type` of `checkbox`.

          See [handlebars.helpers.input](/api/classes/Ember.Handlebars.helpers.html#method_input)  for usage details.

          ## Direct manipulation of `checked`

          The `checked` attribute of an `Ember.Checkbox` object should always be set
          through the Ember object or by interacting with its rendered element
          representation via the mouse, keyboard, or touch. Updating the value of the
          checkbox via jQuery will result in the checked value of the object and its
          element losing synchronization.

          ## Layout and LayoutName properties

          Because HTML `input` elements are self closing `layout` and `layoutName`
          properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s
          layout section for more information.

          @class Checkbox
          @namespace Ember
          @extends Ember.View
        */
        var Checkbox = ember$views$views$view$$View.extend({
          instrumentDisplay: '{{input type="checkbox"}}',

          classNames: ['ember-checkbox'],

          tagName: 'input',

          attributeBindings: ['type', 'checked', 'indeterminate', 'disabled', 'tabindex', 'name',
                              'autofocus', 'required', 'form'],

          type: "checkbox",
          checked: false,
          disabled: false,
          indeterminate: false,

          init: function() {
            this._super();
            this.on("change", this, this._updateElementValue);
          },

          didInsertElement: function() {
            this._super();
            ember$metal$property_get$$get(this, 'element').indeterminate = !!ember$metal$property_get$$get(this, 'indeterminate');
          },

          _updateElementValue: function() {
            ember$metal$property_set$$set(this, 'checked', this.$().prop('checked'));
          }
        });

        ember$handlebars$controls$checkbox$$default = Checkbox;
    }).call(this);

    (function() {
        var indexOf = ember$metal$enumerable_utils$$default.indexOf,
            indexesOf = ember$metal$enumerable_utils$$default.indexesOf,
            forEach = ember$metal$enumerable_utils$$default.forEach,
            replace = ember$metal$enumerable_utils$$default.replace,
            precompileTemplate = ember$handlebars$compiler$$default.compile;

        ember$handlebars$controls$select$$SelectOption = ember$views$views$view$$View.extend({
          instrumentDisplay: 'Ember.SelectOption',

          tagName: 'option',
          attributeBindings: ['value', 'selected'],

          defaultTemplate: function(context, options) {
            options = { data: options.data, hash: {} };
            ember$handlebars$compiler$$default.helpers.bind.call(context, "view.label", options);
          },

          init: function() {
            this.labelPathDidChange();
            this.valuePathDidChange();

            this._super();
          },

          selected: ember$metal$computed$$computed(function() {
            var content = ember$metal$property_get$$get(this, 'content'),
                selection = ember$metal$property_get$$get(this, 'parentView.selection');
            if (ember$metal$property_get$$get(this, 'parentView.multiple')) {
              return selection && indexOf(selection, content.valueOf()) > -1;
            } else {
              // Primitives get passed through bindings as objects... since
              // `new Number(4) !== 4`, we use `==` below
              return content == selection; // jshint ignore:line
            }
          }).property('content', 'parentView.selection'),

          labelPathDidChange: ember$metal$mixin$$observer('parentView.optionLabelPath', function() {
            var labelPath = ember$metal$property_get$$get(this, 'parentView.optionLabelPath');

            if (!labelPath) { return; }

            ember$metal$properties$$defineProperty(this, 'label', ember$metal$computed$$computed(function() {
              return ember$metal$property_get$$get(this, labelPath);
            }).property(labelPath));
          }),

          valuePathDidChange: ember$metal$mixin$$observer('parentView.optionValuePath', function() {
            var valuePath = ember$metal$property_get$$get(this, 'parentView.optionValuePath');

            if (!valuePath) { return; }

            ember$metal$properties$$defineProperty(this, 'value', ember$metal$computed$$computed(function() {
              return ember$metal$property_get$$get(this, valuePath);
            }).property(valuePath));
          })
        });

        ember$handlebars$controls$select$$SelectOptgroup = ember$views$views$collection_view$$default.extend({
          instrumentDisplay: 'Ember.SelectOptgroup',

          tagName: 'optgroup',
          attributeBindings: ['label'],

          selectionBinding: 'parentView.selection',
          multipleBinding: 'parentView.multiple',
          optionLabelPathBinding: 'parentView.optionLabelPath',
          optionValuePathBinding: 'parentView.optionValuePath',

          itemViewClassBinding: 'parentView.optionView'
        });

        ember$handlebars$controls$select$$Select = ember$views$views$view$$View.extend({
          instrumentDisplay: 'Ember.Select',

          tagName: 'select',
          classNames: ['ember-select'],
          defaultTemplate: precompileTemplate('{{#if view.prompt}}<option value="">{{view.prompt}}</option>{{/if}}{{#if view.optionGroupPath}}{{#each view.groupedContent}}{{view view.groupView content=content label=label}}{{/each}}{{else}}{{#each view.content}}{{view view.optionView content=this}}{{/each}}{{/if}}'),
          attributeBindings: ['multiple', 'disabled', 'tabindex', 'name', 'required', 'autofocus',
                              'form', 'size'],

          /**
            The `multiple` attribute of the select element. Indicates whether multiple
            options can be selected.

            @property multiple
            @type Boolean
            @default false
          */
          multiple: false,

          /**
            The `disabled` attribute of the select element. Indicates whether
            the element is disabled from interactions.

            @property disabled
            @type Boolean
            @default false
          */
          disabled: false,

          /**
            The `required` attribute of the select element. Indicates whether
            a selected option is required for form validation.

            @property required
            @type Boolean
            @default false
            @since 1.5.0
          */
          required: false,

          /**
            The list of options.

            If `optionLabelPath` and `optionValuePath` are not overridden, this should
            be a list of strings, which will serve simultaneously as labels and values.

            Otherwise, this should be a list of objects. For instance:

            ```javascript
            Ember.Select.create({
              content: Ember.A([
                  { id: 1, firstName: 'Yehuda' },
                  { id: 2, firstName: 'Tom' }
                ]),
              optionLabelPath: 'content.firstName',
              optionValuePath: 'content.id'
            });
            ```

            @property content
            @type Array
            @default null
          */
          content: null,

          /**
            When `multiple` is `false`, the element of `content` that is currently
            selected, if any.

            When `multiple` is `true`, an array of such elements.

            @property selection
            @type Object or Array
            @default null
          */
          selection: null,

          /**
            In single selection mode (when `multiple` is `false`), value can be used to
            get the current selection's value or set the selection by it's value.

            It is not currently supported in multiple selection mode.

            @property value
            @type String
            @default null
          */
          value: ember$metal$computed$$computed(function(key, value) {
            if (arguments.length === 2) { return value; }
            var valuePath = ember$metal$property_get$$get(this, 'optionValuePath').replace(/^content\.?/, '');
            return valuePath ? ember$metal$property_get$$get(this, 'selection.' + valuePath) : ember$metal$property_get$$get(this, 'selection');
          }).property('selection'),

          /**
            If given, a top-most dummy option will be rendered to serve as a user
            prompt.

            @property prompt
            @type String
            @default null
          */
          prompt: null,

          /**
            The path of the option labels. See [content](/api/classes/Ember.Select.html#property_content).

            @property optionLabelPath
            @type String
            @default 'content'
          */
          optionLabelPath: 'content',

          /**
            The path of the option values. See [content](/api/classes/Ember.Select.html#property_content).

            @property optionValuePath
            @type String
            @default 'content'
          */
          optionValuePath: 'content',

          /**
            The path of the option group.
            When this property is used, `content` should be sorted by `optionGroupPath`.

            @property optionGroupPath
            @type String
            @default null
          */
          optionGroupPath: null,

          /**
            The view class for optgroup.

            @property groupView
            @type Ember.View
            @default Ember.SelectOptgroup
          */
          groupView: ember$handlebars$controls$select$$SelectOptgroup,

          groupedContent: ember$metal$computed$$computed(function() {
            var groupPath = ember$metal$property_get$$get(this, 'optionGroupPath');
            var groupedContent = ember$runtime$system$native_array$$A();
            var content = ember$metal$property_get$$get(this, 'content') || [];

            forEach(content, function(item) {
              var label = ember$metal$property_get$$get(item, groupPath);

              if (ember$metal$property_get$$get(groupedContent, 'lastObject.label') !== label) {
                groupedContent.pushObject({
                  label: label,
                  content: ember$runtime$system$native_array$$A()
                });
              }

              ember$metal$property_get$$get(groupedContent, 'lastObject.content').push(item);
            });

            return groupedContent;
          }).property('optionGroupPath', 'content.@each'),

          /**
            The view class for option.

            @property optionView
            @type Ember.View
            @default Ember.SelectOption
          */
          optionView: ember$handlebars$controls$select$$SelectOption,

          _change: function() {
            if (ember$metal$property_get$$get(this, 'multiple')) {
              this._changeMultiple();
            } else {
              this._changeSingle();
            }
          },

          selectionDidChange: ember$metal$mixin$$observer('selection.@each', function() {
            var selection = ember$metal$property_get$$get(this, 'selection');
            if (ember$metal$property_get$$get(this, 'multiple')) {
              if (!ember$metal$utils$$isArray(selection)) {
                ember$metal$property_set$$set(this, 'selection', ember$runtime$system$native_array$$A([selection]));
                return;
              }
              this._selectionDidChangeMultiple();
            } else {
              this._selectionDidChangeSingle();
            }
          }),

          valueDidChange: ember$metal$mixin$$observer('value', function() {
            var content = ember$metal$property_get$$get(this, 'content'),
                value = ember$metal$property_get$$get(this, 'value'),
                valuePath = ember$metal$property_get$$get(this, 'optionValuePath').replace(/^content\.?/, ''),
                selectedValue = (valuePath ? ember$metal$property_get$$get(this, 'selection.' + valuePath) : ember$metal$property_get$$get(this, 'selection')),
                selection;

            if (value !== selectedValue) {
              selection = content ? content.find(function(obj) {
                return value === (valuePath ? ember$metal$property_get$$get(obj, valuePath) : obj);
              }) : null;

              this.set('selection', selection);
            }
          }),


          _triggerChange: function() {
            var selection = ember$metal$property_get$$get(this, 'selection');
            var value = ember$metal$property_get$$get(this, 'value');

            if (!ember$metal$is_none$$default(selection)) { this.selectionDidChange(); }
            if (!ember$metal$is_none$$default(value)) { this.valueDidChange(); }

            this._change();
          },

          _changeSingle: function() {
            var selectedIndex = this.$()[0].selectedIndex,
                content = ember$metal$property_get$$get(this, 'content'),
                prompt = ember$metal$property_get$$get(this, 'prompt');

            if (!content || !ember$metal$property_get$$get(content, 'length')) { return; }
            if (prompt && selectedIndex === 0) { ember$metal$property_set$$set(this, 'selection', null); return; }

            if (prompt) { selectedIndex -= 1; }
            ember$metal$property_set$$set(this, 'selection', content.objectAt(selectedIndex));
          },


          _changeMultiple: function() {
            var options = this.$('option:selected'),
                prompt = ember$metal$property_get$$get(this, 'prompt'),
                offset = prompt ? 1 : 0,
                content = ember$metal$property_get$$get(this, 'content'),
                selection = ember$metal$property_get$$get(this, 'selection');

            if (!content) { return; }
            if (options) {
              var selectedIndexes = options.map(function() {
                return this.index - offset;
              }).toArray();
              var newSelection = content.objectsAt(selectedIndexes);

              if (ember$metal$utils$$isArray(selection)) {
                replace(selection, 0, ember$metal$property_get$$get(selection, 'length'), newSelection);
              } else {
                ember$metal$property_set$$set(this, 'selection', newSelection);
              }
            }
          },

          _selectionDidChangeSingle: function() {
            var el = this.get('element');
            if (!el) { return; }

            var content = ember$metal$property_get$$get(this, 'content'),
                selection = ember$metal$property_get$$get(this, 'selection'),
                selectionIndex = content ? indexOf(content, selection) : -1,
                prompt = ember$metal$property_get$$get(this, 'prompt');

            if (prompt) { selectionIndex += 1; }
            if (el) { el.selectedIndex = selectionIndex; }
          },

          _selectionDidChangeMultiple: function() {
            var content = ember$metal$property_get$$get(this, 'content'),
                selection = ember$metal$property_get$$get(this, 'selection'),
                selectedIndexes = content ? indexesOf(content, selection) : [-1],
                prompt = ember$metal$property_get$$get(this, 'prompt'),
                offset = prompt ? 1 : 0,
                options = this.$('option'),
                adjusted;

            if (options) {
              options.each(function() {
                adjusted = this.index > -1 ? this.index - offset : -1;
                this.selected = indexOf(selectedIndexes, adjusted) > -1;
              });
            }
          },

          init: function() {
            this._super();
            this.on("didInsertElement", this, this._triggerChange);
            this.on("change", this, this._change);
          }
        });

        ember$handlebars$controls$select$$default = ember$handlebars$controls$select$$Select;
    }).call(this);

    (function() {
        /**
          Shared mixin used by `Ember.TextField` and `Ember.TextArea`.

          @class TextSupport
          @namespace Ember
          @uses Ember.TargetActionSupport
          @extends Ember.Mixin
          @private
        */
        var TextSupport = ember$metal$mixin$$Mixin.create(ember$runtime$mixins$target_action_support$$default, {
          value: "",

          attributeBindings: ['placeholder', 'disabled', 'maxlength', 'tabindex', 'readonly',
                              'autofocus', 'form', 'selectionDirection', 'spellcheck', 'required',
                              'title', 'autocapitalize', 'autocorrect'],
          placeholder: null,
          disabled: false,
          maxlength: null,

          init: function() {
            this._super();
            this.on("focusOut", this, this._elementValueDidChange);
            this.on("change", this, this._elementValueDidChange);
            this.on("paste", this, this._elementValueDidChange);
            this.on("cut", this, this._elementValueDidChange);
            this.on("input", this, this._elementValueDidChange);
            this.on("keyUp", this, this.interpretKeyEvents);
          },

          /**
            The action to be sent when the user presses the return key.

            This is similar to the `{{action}}` helper, but is fired when
            the user presses the return key when editing a text field, and sends
            the value of the field as the context.

            @property action
            @type String
            @default null
          */
          action: null,

          /**
            The event that should send the action.

            Options are:

            * `enter`: the user pressed enter
            * `keyPress`: the user pressed a key

            @property onEvent
            @type String
            @default enter
          */
          onEvent: 'enter',

          /**
            Whether they `keyUp` event that triggers an `action` to be sent continues
            propagating to other views.

            By default, when the user presses the return key on their keyboard and
            the text field has an `action` set, the action will be sent to the view's
            controller and the key event will stop propagating.

            If you would like parent views to receive the `keyUp` event even after an
            action has been dispatched, set `bubbles` to true.

            @property bubbles
            @type Boolean
            @default false
          */
          bubbles: false,

          interpretKeyEvents: function(event) {
            var map = TextSupport.KEY_EVENTS;
            var method = map[event.keyCode];

            this._elementValueDidChange();
            if (method) { return this[method](event); }
          },

          _elementValueDidChange: function() {
            ember$metal$property_set$$set(this, 'value', this.$().val());
          },

          /**
            The action to be sent when the user inserts a new line.

            Called by the `Ember.TextSupport` mixin on keyUp if keycode matches 13.
            Uses sendAction to send the `enter` action to the controller.

            @method insertNewline
            @param {Event} event
          */
          insertNewline: function(event) {
            sendAction('enter', this, event);
            sendAction('insert-newline', this, event);
          },

          /**
            Called when the user hits escape.

            Called by the `Ember.TextSupport` mixin on keyUp if keycode matches 27.
            Uses sendAction to send the `escape-press` action to the controller.

            @method cancel
            @param {Event} event
          */
          cancel: function(event) {
            sendAction('escape-press', this, event);
          },

          /**
            Called when the text area is focused.

            @method focusIn
            @param {Event} event
          */
          focusIn: function(event) {
            sendAction('focus-in', this, event);
          },

          /**
            Called when the text area is blurred.

            @method focusOut
            @param {Event} event
          */
          focusOut: function(event) {
            sendAction('focus-out', this, event);
          },

          /**
            The action to be sent when the user presses a key. Enabled by setting
            the `onEvent` property to `keyPress`.

            Uses sendAction to send the `keyPress` action to the controller.

            @method keyPress
            @param {Event} event
          */
          keyPress: function(event) {
            sendAction('key-press', this, event);
          }

        });

        TextSupport.KEY_EVENTS = {
          13: 'insertNewline',
          27: 'cancel'
        };

        // In principle, this shouldn't be necessary, but the legacy
        // sendAction semantics for TextField are different from
        // the component semantics so this method normalizes them.
        function sendAction(eventName, view, event) {
          var action = ember$metal$property_get$$get(view, eventName),
              on = ember$metal$property_get$$get(view, 'onEvent'),
              value = ember$metal$property_get$$get(view, 'value');

          // back-compat support for keyPress as an event name even though
          // it's also a method name that consumes the event (and therefore
          // incompatible with sendAction semantics).
          if (on === eventName || (on === 'keyPress' && eventName === 'key-press')) {
            view.sendAction('action', value);
          }

          view.sendAction(eventName, value);

          if (action || on === eventName) {
            if(!ember$metal$property_get$$get(view, 'bubbles')) {
              event.stopPropagation();
            }
          }
        }

        ember$handlebars$controls$text_support$$default = TextSupport;
    }).call(this);

    (function() {
        ember$handlebars$controls$text_area$$default = ember$views$views$component$$default.extend(ember$handlebars$controls$text_support$$default, {
          instrumentDisplay: '{{textarea}}',

          classNames: ['ember-text-area'],

          tagName: "textarea",
          attributeBindings: ['rows', 'cols', 'name', 'selectionEnd', 'selectionStart', 'wrap'],
          rows: null,
          cols: null,

          _updateElementValue: ember$metal$mixin$$observer('value', function() {
            // We do this check so cursor position doesn't get affected in IE
            var value = ember$metal$property_get$$get(this, 'value'),
                $el = this.$();
            if ($el && value !== $el.val()) {
              $el.val(value);
            }
          }),

          init: function() {
            this._super();
            this.on("didInsertElement", this, this._updateElementValue);
          }
        });
    }).call(this);

    (function() {
        ember$handlebars$controls$text_field$$default = ember$views$views$component$$default.extend(ember$handlebars$controls$text_support$$default, {
          instrumentDisplay: '{{input type="text"}}',

          classNames: ['ember-text-field'],
          tagName: "input",
          attributeBindings: ['type', 'value', 'size', 'pattern', 'name', 'min', 'max',
                              'accept', 'autocomplete', 'autosave', 'formaction',
                              'formenctype', 'formmethod', 'formnovalidate', 'formtarget',
                              'height', 'inputmode', 'list', 'multiple', 'step',
                              'width'],

          /**
            The `value` attribute of the input element. As the user inputs text, this
            property is updated live.

            @property value
            @type String
            @default ""
          */
          value: "",

          /**
            The `type` attribute of the input element.

            @property type
            @type String
            @default "text"
          */
          type: "text",

          /**
            The `size` of the text field in characters.

            @property size
            @type String
            @default null
          */
          size: null,

          /**
            The `pattern` attribute of input element.

            @property pattern
            @type String
            @default null
          */
          pattern: null,

          /**
            The `min` attribute of input element used with `type="number"` or `type="range"`.

            @property min
            @type String
            @default null
            @since 1.4.0
          */
          min: null,

          /**
            The `max` attribute of input element used with `type="number"` or `type="range"`.

            @property max
            @type String
            @default null
            @since 1.4.0
          */
          max: null
        });
    }).call(this);

    (function() {
        var helpers = ember$handlebars$compiler$$default.helpers;

        function inputHelper(options) {
          ember$metal$core$$default.assert('You can only pass attributes to the `input` helper, not arguments', arguments.length < 2);

          var hash = options.hash,
              types = options.hashTypes,
              inputType = hash.type,
              onEvent = hash.on;

          delete hash.type;
          delete hash.on;

          if (inputType === 'checkbox') {
            ember$metal$core$$default.assert("{{input type='checkbox'}} does not support setting `value=someBooleanValue`; you must use `checked=someBooleanValue` instead.", options.hashTypes.value !== 'ID');
            return helpers.view.call(this, ember$handlebars$controls$checkbox$$default, options);
          } else {
            if (inputType) { hash.type = inputType; }
            hash.onEvent = onEvent || 'enter';
            return helpers.view.call(this, ember$handlebars$controls$text_field$$default, options);
          }
        }

        ember$handlebars$controls$$inputHelper = inputHelper;

        function textareaHelper(options) {
          ember$metal$core$$default.assert('You can only pass attributes to the `textarea` helper, not arguments', arguments.length < 2);

          var hash = options.hash,
              types = options.hashTypes;

          return helpers.view.call(this, ember$handlebars$controls$text_area$$default, options);
        }

        ember$handlebars$controls$$textareaHelper = textareaHelper;
    }).call(this);

    (function() {
        /**
        Ember Handlebars

        @module ember
        @submodule ember-handlebars
        @requires ember-views
        */

        // Ember.Handlebars.Globals
        ember$handlebars$compiler$$default.bootstrap = ember$handlebars$loader$$default;

        ember$handlebars$compiler$$default.template = ember$handlebars$ext$$template;
        ember$handlebars$compiler$$default.makeBoundHelper = ember$handlebars$ext$$makeBoundHelper;
        ember$handlebars$compiler$$default.registerBoundHelper = ember$handlebars$ext$$registerBoundHelper;
        ember$handlebars$compiler$$default.resolveHash = ember$handlebars$ext$$resolveHash;
        ember$handlebars$compiler$$default.resolveParams = ember$handlebars$ext$$resolveParams;
        ember$handlebars$compiler$$default.resolveHelper = ember$handlebars$helpers$binding$$resolveHelper;
        ember$handlebars$compiler$$default.get = ember$handlebars$ext$$handlebarsGet;
        ember$handlebars$compiler$$default.getEscaped = ember$handlebars$ext$$getEscaped;
        ember$handlebars$compiler$$default.evaluateUnboundHelper = ember$handlebars$ext$$evaluateUnboundHelper;
        ember$handlebars$compiler$$default.bind = ember$handlebars$helpers$binding$$bind;
        ember$handlebars$compiler$$default.bindClasses = ember$handlebars$helpers$binding$$bindClasses;
        ember$handlebars$compiler$$default.EachView = ember$handlebars$helpers$each$$EachView;
        ember$handlebars$compiler$$default.GroupedEach = ember$handlebars$helpers$each$$GroupedEach;
        ember$handlebars$compiler$$default.resolvePaths = ember$handlebars$helpers$shared$$default;
        ember$handlebars$compiler$$default.ViewHelper = ember$handlebars$helpers$view$$ViewHelper;
        ember$handlebars$compiler$$default.normalizePath = ember$handlebars$ext$$normalizePath;

        // Ember Globals
        ember$metal$core$$default.Handlebars = ember$handlebars$compiler$$default;

        ember$metal$core$$default.ComponentLookup = ember$handlebars$component_lookup$$default;
        ember$metal$core$$default._SimpleHandlebarsView = ember$handlebars$views$handlebars_bound_view$$SimpleHandlebarsView;
        ember$metal$core$$default._HandlebarsBoundView = ember$handlebars$views$handlebars_bound_view$$_HandlebarsBoundView;
        ember$metal$core$$default._SimpleMetamorphView = ember$handlebars$views$metamorph_view$$_SimpleMetamorphView;
        ember$metal$core$$default._MetamorphView = ember$handlebars$views$metamorph_view$$_MetamorphView;
        ember$metal$core$$default._Metamorph = ember$handlebars$views$metamorph_view$$_Metamorph;
        ember$metal$core$$default.TextSupport = ember$handlebars$controls$text_support$$default;
        ember$metal$core$$default.Checkbox = ember$handlebars$controls$checkbox$$default;
        ember$metal$core$$default.Select = ember$handlebars$controls$select$$Select;
        ember$metal$core$$default.SelectOption = ember$handlebars$controls$select$$SelectOption;
        ember$metal$core$$default.SelectOptgroup = ember$handlebars$controls$select$$SelectOptgroup;
        ember$metal$core$$default.TextArea = ember$handlebars$controls$text_area$$default;
        ember$metal$core$$default.TextField = ember$handlebars$controls$text_field$$default;
        ember$metal$core$$default.TextSupport = ember$handlebars$controls$text_support$$default;

        // register helpers
        ember$handlebars$compiler$$default.registerHelper('helperMissing', ember$handlebars$ext$$helperMissingHelper);

        ember$handlebars$compiler$$default.registerHelper('blockHelperMissing', ember$handlebars$ext$$blockHelperMissingHelper);
        ember$handlebars$compiler$$default.registerHelper('bind', ember$handlebars$helpers$binding$$bindHelper);
        ember$handlebars$compiler$$default.registerHelper('boundIf', ember$handlebars$helpers$binding$$boundIfHelper);
        ember$handlebars$compiler$$default.registerHelper('_triageMustache', ember$handlebars$helpers$binding$$_triageMustacheHelper);
        ember$handlebars$compiler$$default.registerHelper('unboundIf', ember$handlebars$helpers$binding$$unboundIfHelper);
        ember$handlebars$compiler$$default.registerHelper('with', ember$handlebars$helpers$binding$$withHelper);
        ember$handlebars$compiler$$default.registerHelper('if', ember$handlebars$helpers$binding$$ifHelper);
        ember$handlebars$compiler$$default.registerHelper('unless', ember$handlebars$helpers$binding$$unlessHelper);
        ember$handlebars$compiler$$default.registerHelper('bind-attr', ember$handlebars$helpers$binding$$bindAttrHelper);
        ember$handlebars$compiler$$default.registerHelper('bindAttr', ember$handlebars$helpers$binding$$bindAttrHelperDeprecated);
        ember$handlebars$compiler$$default.registerHelper('collection', ember$handlebars$helpers$collection$$default);
        ember$handlebars$compiler$$default.registerHelper("log", ember$handlebars$helpers$debug$$logHelper);
        ember$handlebars$compiler$$default.registerHelper("debugger", ember$handlebars$helpers$debug$$debuggerHelper);
        ember$handlebars$compiler$$default.registerHelper("each", ember$handlebars$helpers$each$$eachHelper);
        ember$handlebars$compiler$$default.registerHelper("loc", ember$handlebars$helpers$loc$$default);
        ember$handlebars$compiler$$default.registerHelper("partial", ember$handlebars$helpers$partial$$default);
        ember$handlebars$compiler$$default.registerHelper("template", ember$handlebars$helpers$template$$default);
        ember$handlebars$compiler$$default.registerHelper("yield", ember$handlebars$helpers$yield$$default);
        ember$handlebars$compiler$$default.registerHelper("view", ember$handlebars$helpers$view$$viewHelper);
        ember$handlebars$compiler$$default.registerHelper("unbound", ember$handlebars$helpers$unbound$$default);
        ember$handlebars$compiler$$default.registerHelper("input", ember$handlebars$controls$$inputHelper);
        ember$handlebars$compiler$$default.registerHelper("textarea", ember$handlebars$controls$$textareaHelper);

        // run load hooks
        ember$runtime$system$lazy_load$$runLoadHooks('Ember.Handlebars', ember$handlebars$compiler$$default);

        ember$handlebars$$default = ember$handlebars$compiler$$default;
    }).call(this);

    (function() {
        /**
        @module ember
        @submodule ember-views
        */

        // Add a new named queue after the 'actions' queue (where RSVP promises
        // resolve), which is used in router transitions to prevent unnecessary
        // loading state entry if all context promises resolve on the
        // 'actions' queue first.

        var queues = ember$metal$run_loop$$default.queues;

        ember$metal$run_loop$$default._addQueue('routerTransitions', 'actions');
    }).call(this);

    (function() {
        var map = ember$metal$enumerable_utils$$default.map;

        /**
        @module ember
        @submodule ember-routing
        */


        ember$runtime$controllers$controller$$ControllerMixin.reopen({
          /**
            Transition the application into another route. The route may
            be either a single route or route path:

            ```javascript
            aController.transitionToRoute('blogPosts');
            aController.transitionToRoute('blogPosts.recentEntries');
            ```

            Optionally supply a model for the route in question. The model
            will be serialized into the URL using the `serialize` hook of
            the route:

            ```javascript
            aController.transitionToRoute('blogPost', aPost);
            ```

            If a literal is passed (such as a number or a string), it will
            be treated as an identifier instead. In this case, the `model`
            hook of the route will be triggered:

            ```javascript
            aController.transitionToRoute('blogPost', 1);
            ```

            Multiple models will be applied last to first recursively up the
            resource tree.

            ```javascript
            App.Router.map(function() {
              this.resource('blogPost', {path:':blogPostId'}, function(){
                this.resource('blogComment', {path: ':blogCommentId'});
              });
            });

            aController.transitionToRoute('blogComment', aPost, aComment);
            aController.transitionToRoute('blogComment', 1, 13);
            ```

            It is also possible to pass a URL (a string that starts with a
            `/`). This is intended for testing and debugging purposes and
            should rarely be used in production code.

            ```javascript
            aController.transitionToRoute('/');
            aController.transitionToRoute('/blog/post/1/comment/13');
            ```

            See also [replaceRoute](/api/classes/Ember.ControllerMixin.html#method_replaceRoute).

            @param {String} name the name of the route or a URL
            @param {...Object} models the model(s) or identifier(s) to be used
            while transitioning to the route.
            @for Ember.ControllerMixin
            @method transitionToRoute
          */
          transitionToRoute: function() {
            // target may be either another controller or a router
            var target = ember$metal$property_get$$get(this, 'target'),
                method = target.transitionToRoute || target.transitionTo;
            return method.apply(target, arguments);
          },

          /**
            @deprecated
            @for Ember.ControllerMixin
            @method transitionTo
          */
          transitionTo: function() {
            ember$metal$core$$default.deprecate("transitionTo is deprecated. Please use transitionToRoute.");
            return this.transitionToRoute.apply(this, arguments);
          },

          /**
            Transition into another route while replacing the current URL, if possible.
            This will replace the current history entry instead of adding a new one.
            Beside that, it is identical to `transitionToRoute` in all other respects.

            ```javascript
            aController.replaceRoute('blogPosts');
            aController.replaceRoute('blogPosts.recentEntries');
            ```

            Optionally supply a model for the route in question. The model
            will be serialized into the URL using the `serialize` hook of
            the route:

            ```javascript
            aController.replaceRoute('blogPost', aPost);
            ```

            If a literal is passed (such as a number or a string), it will
            be treated as an identifier instead. In this case, the `model`
            hook of the route will be triggered:

            ```javascript
            aController.replaceRoute('blogPost', 1);
            ```

            Multiple models will be applied last to first recursively up the
            resource tree.

            ```javascript
            App.Router.map(function() {
              this.resource('blogPost', {path:':blogPostId'}, function(){
                this.resource('blogComment', {path: ':blogCommentId'});
              });
            });

            aController.replaceRoute('blogComment', aPost, aComment);
            aController.replaceRoute('blogComment', 1, 13);
            ```

            It is also possible to pass a URL (a string that starts with a
            `/`). This is intended for testing and debugging purposes and
            should rarely be used in production code.

            ```javascript
            aController.replaceRoute('/');
            aController.replaceRoute('/blog/post/1/comment/13');
            ```

            @param {String} name the name of the route or a URL
            @param {...Object} models the model(s) or identifier(s) to be used
            while transitioning to the route.
            @for Ember.ControllerMixin
            @method replaceRoute
          */
          replaceRoute: function() {
            // target may be either another controller or a router
            var target = ember$metal$property_get$$get(this, 'target'),
                method = target.replaceRoute || target.replaceWith;
            return method.apply(target, arguments);
          },

          /**
            @deprecated
            @for Ember.ControllerMixin
            @method replaceWith
          */
          replaceWith: function() {
            ember$metal$core$$default.deprecate("replaceWith is deprecated. Please use replaceRoute.");
            return this.replaceRoute.apply(this, arguments);
          }
        });

        if (ember$metal$core$$default.FEATURES.isEnabled("query-params-new")) {
          ember$runtime$controllers$controller$$ControllerMixin.reopen({
            concatenatedProperties: ['queryParams'],
            queryParams: null,
            _finalizingQueryParams: false,
            _queryParamChangesDuringSuspension: null
          });
        }

        ember$routing$ext$controller$$default = ember$runtime$controllers$controller$$ControllerMixin;
    }).call(this);

    (function() {
        /**
        @module ember
        @submodule ember-routing
        */

        ember$views$views$view$$View.reopen({

          /**
            Sets the private `_outlets` object on the view.

            @method init
           */
          init: function() {
            ember$metal$property_set$$set(this, '_outlets', {});
            this._super();
          },

          /**
            Manually fill any of a view's `{{outlet}}` areas with the
            supplied view.

            Example

            ```javascript
            var MyView = Ember.View.extend({
              template: Ember.Handlebars.compile('Child view: {{outlet "main"}} ')
            });
            var myView = MyView.create();
            myView.appendTo('body');
            // The html for myView now looks like:
            // <div id="ember228" class="ember-view">Child view: </div>

            var FooView = Ember.View.extend({
              template: Ember.Handlebars.compile('<h1>Foo</h1> ')
            });
            var fooView = FooView.create();
            myView.connectOutlet('main', fooView);
            // The html for myView now looks like:
            // <div id="ember228" class="ember-view">Child view:
            //   <div id="ember234" class="ember-view"><h1>Foo</h1> </div>
            // </div>
            ```
            @method connectOutlet
            @param  {String} outletName A unique name for the outlet
            @param  {Object} view       An Ember.View
           */
          connectOutlet: function(outletName, view) {
            if (this._pendingDisconnections) {
              delete this._pendingDisconnections[outletName];
            }

            if (this._hasEquivalentView(outletName, view)) {
              view.destroy();
              return;
            }

            var outlets = ember$metal$property_get$$get(this, '_outlets'),
                container = ember$metal$property_get$$get(this, 'container'),
                router = container && container.lookup('router:main'),
                renderedName = ember$metal$property_get$$get(view, 'renderedName');

            ember$metal$property_set$$set(outlets, outletName, view);

            if (router && renderedName) {
              router._connectActiveView(renderedName, view);
            }
          },

          /**
            Determines if the view has already been created by checking if
            the view has the same constructor, template, and context as the
            view in the `_outlets` object.

            @private
            @method _hasEquivalentView
            @param  {String} outletName The name of the outlet we are checking
            @param  {Object} view       An Ember.View
            @return {Boolean}
           */
          _hasEquivalentView: function(outletName, view) {
            var existingView = ember$metal$property_get$$get(this, '_outlets.'+outletName);
            return existingView &&
              existingView.constructor === view.constructor &&
              existingView.get('template') === view.get('template') &&
              existingView.get('context') === view.get('context');
          },

          /**
            Removes an outlet from the view.

            Example

            ```javascript
            var MyView = Ember.View.extend({
              template: Ember.Handlebars.compile('Child view: {{outlet "main"}} ')
            });
            var myView = MyView.create();
            myView.appendTo('body');
            // myView's html:
            // <div id="ember228" class="ember-view">Child view: </div>

            var FooView = Ember.View.extend({
              template: Ember.Handlebars.compile('<h1>Foo</h1> ')
            });
            var fooView = FooView.create();
            myView.connectOutlet('main', fooView);
            // myView's html:
            // <div id="ember228" class="ember-view">Child view:
            //   <div id="ember234" class="ember-view"><h1>Foo</h1> </div>
            // </div>

            myView.disconnectOutlet('main');
            // myView's html:
            // <div id="ember228" class="ember-view">Child view: </div>
            ```

            @method disconnectOutlet
            @param  {String} outletName The name of the outlet to be removed
           */
          disconnectOutlet: function(outletName) {
            if (!this._pendingDisconnections) {
              this._pendingDisconnections = {};
            }
            this._pendingDisconnections[outletName] = true;
            ember$metal$run_loop$$default.once(this, '_finishDisconnections');
          },

          /**
            Gets an outlet that is pending disconnection and then
            nullifys the object on the `_outlet` object.

            @private
            @method _finishDisconnections
           */
          _finishDisconnections: function() {
            if (this.isDestroyed) return; // _outlets will be gone anyway
            var outlets = ember$metal$property_get$$get(this, '_outlets');
            var pendingDisconnections = this._pendingDisconnections;
            this._pendingDisconnections = null;

            for (var outletName in pendingDisconnections) {
              ember$metal$property_set$$set(outlets, outletName, null);
            }
          }
        });

        ember$routing$ext$view$$default = ember$views$views$view$$View;
    }).call(this);

    (function() {
        /**
        @module ember
        @submodule ember-routing
        */

        function DSL(name) {
          this.parent = name;
          this.matches = [];
        }

        ember$routing$system$dsl$$default = DSL;

        DSL.prototype = {
          resource: function(name, options, callback) {
            ember$metal$core$$default.assert("'basic' cannot be used as a resource name.", name !== 'basic');

            if (arguments.length === 2 && typeof options === 'function') {
              callback = options;
              options = {};
            }

            if (arguments.length === 1) {
              options = {};
            }

            if (typeof options.path !== 'string') {
              options.path = "/" + name;
            }

            var createSubRoutes = false;
            if (ember$metal$core$$default.FEATURES.isEnabled('ember-routing-consistent-resources')) {
              createSubRoutes = true;
            } else {
              if (callback) { createSubRoutes = true; }
            }

            if (createSubRoutes) {
              var dsl = new DSL(name);
              route(dsl, 'loading');
              route(dsl, 'error', { path: "/_unused_dummy_error_path_route_" + name + "/:error" });

              if (callback) { callback.call(dsl); }

              this.push(options.path, name, dsl.generate());
            } else {
              this.push(options.path, name, null);
            }


            if (ember$metal$core$$default.FEATURES.isEnabled("ember-routing-named-substates")) {
              // For namespace-preserving nested resource (e.g. resource('foo.bar') within
              // resource('foo')) we only want to use the last route name segment to determine
              // the names of the error/loading substates (e.g. 'bar_loading')
              name = name.split('.').pop();
              route(this, name + '_loading');
              route(this, name + '_error', { path: "/_unused_dummy_error_path_route_" + name + "/:error" });
            }
          },

          push: function(url, name, callback) {
            var parts = name.split('.');
            if (url === "" || url === "/" || parts[parts.length-1] === "index") { this.explicitIndex = true; }

            this.matches.push([url, name, callback]);
          },

          route: function(name, options) {
            ember$metal$core$$default.assert("'basic' cannot be used as a route name.", name !== 'basic');

            route(this, name, options);
            if (ember$metal$core$$default.FEATURES.isEnabled("ember-routing-named-substates")) {
              route(this, name + '_loading');
              route(this, name + '_error', { path: "/_unused_dummy_error_path_route_" + name + "/:error" });
            }
          },

          generate: function() {
            var dslMatches = this.matches;

            if (!this.explicitIndex) {
              this.route("index", { path: "/" });
            }

            return function(match) {
              for (var i=0, l=dslMatches.length; i<l; i++) {
                var dslMatch = dslMatches[i];
                var matchObj = match(dslMatch[0]).to(dslMatch[1], dslMatch[2]);
              }
            };
          }
        };

        function route(dsl, name, options) {
          ember$metal$core$$default.assert("You must use `this.resource` to nest", typeof options !== 'function');

          options = options || {};

          if (typeof options.path !== 'string') {
            options.path = "/" + name;
          }

          if (dsl.parent && dsl.parent !== 'application') {
            name = dsl.parent + "." + name;
          }

          dsl.push(options.path, name, null);
        }

        DSL.map = function(callback) {
          var dsl = new DSL();
          callback.call(dsl);
          return dsl;
        };
    }).call(this);

    (function() {
        ember$routing$location$api$$default = {
          /**
           This is deprecated in favor of using the container to lookup the location
           implementation as desired.

           For example:

           ```javascript
           // Given a location registered as follows:
           container.register('location:history-test', HistoryTestLocation);

           // You could create a new instance via:
           container.lookup('location:history-test');
           ```

            @method create
            @param {Object} options
            @return {Object} an instance of an implementation of the `location` API
            @deprecated Use the container to lookup the location implementation that you
            need.
          */
          create: function(options) {
            var implementation = options && options.implementation;
            ember$metal$core$$default.assert("Ember.Location.create: you must specify a 'implementation' option", !!implementation);

            var implementationClass = this.implementations[implementation];
            ember$metal$core$$default.assert("Ember.Location.create: " + implementation + " is not a valid implementation", !!implementationClass);

            return implementationClass.create.apply(implementationClass, arguments);
          },

          /**
           This is deprecated in favor of using the container to register the
           location implementation as desired.

           Example:

           ```javascript
           Application.initializer({
            name: "history-test-location",

            initialize: function(container, application) {
              application.register('location:history-test', HistoryTestLocation);
            }
           });
           ```

           @method registerImplementation
           @param {String} name
           @param {Object} implementation of the `location` API
           @deprecated Register your custom location implementation with the
           container directly.
          */
          registerImplementation: function(name, implementation) {
            ember$metal$core$$default.deprecate('Using the Ember.Location.registerImplementation is no longer supported. Register your custom location implementation with the container instead.', false);

            this.implementations[name] = implementation;
          },

          implementations: {},
          _location: window.location,

          /**
            Returns the current `location.hash` by parsing location.href since browsers
            inconsistently URL-decode `location.hash`.

            https://bugzilla.mozilla.org/show_bug.cgi?id=483304

            @private
            @method getHash
            @since 1.4.0
          */
          _getHash: function () {
            // AutoLocation has it at _location, HashLocation at .location.
            // Being nice and not changing
            var href = (this._location || this.location).href,
                hashIndex = href.indexOf('#');

            if (hashIndex === -1) {
              return '';
            } else {
              return href.substr(hashIndex);
            }
          }
        };
    }).call(this);

    (function() {
        "use strict";

        var specials = [
          '/', '.', '*', '+', '?', '|',
          '(', ')', '[', ']', '{', '}', '\\'
        ];

        var escapeRegex = new RegExp('(\\' + specials.join('|\\') + ')', 'g');

        function isArray(test) {
          return Object.prototype.toString.call(test) === "[object Array]";
        }

        // A Segment represents a segment in the original route description.
        // Each Segment type provides an `eachChar` and `regex` method.
        //
        // The `eachChar` method invokes the callback with one or more character
        // specifications. A character specification consumes one or more input
        // characters.
        //
        // The `regex` method returns a regex fragment for the segment. If the
        // segment is a dynamic of star segment, the regex fragment also includes
        // a capture.
        //
        // A character specification contains:
        //
        // * `validChars`: a String with a list of all valid characters, or
        // * `invalidChars`: a String with a list of all invalid characters
        // * `repeat`: true if the character specification can repeat

        function StaticSegment(string) { this.string = string; }

        StaticSegment.prototype = {
          eachChar: function(callback) {
            var string = this.string, ch;

            for (var i=0, l=string.length; i<l; i++) {
              ch = string.charAt(i);
              callback({ validChars: ch });
            }
          },

          regex: function() {
            return this.string.replace(escapeRegex, '\\$1');
          },

          generate: function() {
            return this.string;
          }
        };

        function DynamicSegment(name) { this.name = name; }

        DynamicSegment.prototype = {
          eachChar: function(callback) {
            callback({ invalidChars: "/", repeat: true });
          },

          regex: function() {
            return "([^/]+)";
          },

          generate: function(params) {
            return params[this.name];
          }
        };

        function StarSegment(name) { this.name = name; }

        StarSegment.prototype = {
          eachChar: function(callback) {
            callback({ invalidChars: "", repeat: true });
          },

          regex: function() {
            return "(.+)";
          },

          generate: function(params) {
            return params[this.name];
          }
        };

        function EpsilonSegment() {}

        EpsilonSegment.prototype = {
          eachChar: function() {},
          regex: function() { return ""; },
          generate: function() { return ""; }
        };

        function parse(route, names, types) {
          // normalize route as not starting with a "/". Recognition will
          // also normalize.
          if (route.charAt(0) === "/") { route = route.substr(1); }

          var segments = route.split("/"), results = [];

          for (var i=0, l=segments.length; i<l; i++) {
            var segment = segments[i], match;

            if (match = segment.match(/^:([^\/]+)$/)) {
              results.push(new DynamicSegment(match[1]));
              names.push(match[1]);
              types.dynamics++;
            } else if (match = segment.match(/^\*([^\/]+)$/)) {
              results.push(new StarSegment(match[1]));
              names.push(match[1]);
              types.stars++;
            } else if(segment === "") {
              results.push(new EpsilonSegment());
            } else {
              results.push(new StaticSegment(segment));
              types.statics++;
            }
          }

          return results;
        }

        // A State has a character specification and (`charSpec`) and a list of possible
        // subsequent states (`nextStates`).
        //
        // If a State is an accepting state, it will also have several additional
        // properties:
        //
        // * `regex`: A regular expression that is used to extract parameters from paths
        //   that reached this accepting state.
        // * `handlers`: Information on how to convert the list of captures into calls
        //   to registered handlers with the specified parameters
        // * `types`: How many static, dynamic or star segments in this route. Used to
        //   decide which route to use if multiple registered routes match a path.
        //
        // Currently, State is implemented naively by looping over `nextStates` and
        // comparing a character specification against a character. A more efficient
        // implementation would use a hash of keys pointing at one or more next states.

        function State(charSpec) {
          this.charSpec = charSpec;
          this.nextStates = [];
        }

        State.prototype = {
          get: function(charSpec) {
            var nextStates = this.nextStates;

            for (var i=0, l=nextStates.length; i<l; i++) {
              var child = nextStates[i];

              var isEqual = child.charSpec.validChars === charSpec.validChars;
              isEqual = isEqual && child.charSpec.invalidChars === charSpec.invalidChars;

              if (isEqual) { return child; }
            }
          },

          put: function(charSpec) {
            var state;

            // If the character specification already exists in a child of the current
            // state, just return that state.
            if (state = this.get(charSpec)) { return state; }

            // Make a new state for the character spec
            state = new State(charSpec);

            // Insert the new state as a child of the current state
            this.nextStates.push(state);

            // If this character specification repeats, insert the new state as a child
            // of itself. Note that this will not trigger an infinite loop because each
            // transition during recognition consumes a character.
            if (charSpec.repeat) {
              state.nextStates.push(state);
            }

            // Return the new state
            return state;
          },

          // Find a list of child states matching the next character
          match: function(ch) {
            // DEBUG "Processing `" + ch + "`:"
            var nextStates = this.nextStates,
                child, charSpec, chars;

            // DEBUG "  " + debugState(this)
            var returned = [];

            for (var i=0, l=nextStates.length; i<l; i++) {
              child = nextStates[i];

              charSpec = child.charSpec;

              if (typeof (chars = charSpec.validChars) !== 'undefined') {
                if (chars.indexOf(ch) !== -1) { returned.push(child); }
              } else if (typeof (chars = charSpec.invalidChars) !== 'undefined') {
                if (chars.indexOf(ch) === -1) { returned.push(child); }
              }
            }

            return returned;
          }

          /** IF DEBUG
          , debug: function() {
            var charSpec = this.charSpec,
                debug = "[",
                chars = charSpec.validChars || charSpec.invalidChars;

            if (charSpec.invalidChars) { debug += "^"; }
            debug += chars;
            debug += "]";

            if (charSpec.repeat) { debug += "+"; }

            return debug;
          }
          END IF **/
        };

        /** IF DEBUG
        function debug(log) {
          console.log(log);
        }

        function debugState(state) {
          return state.nextStates.map(function(n) {
            if (n.nextStates.length === 0) { return "( " + n.debug() + " [accepting] )"; }
            return "( " + n.debug() + " <then> " + n.nextStates.map(function(s) { return s.debug() }).join(" or ") + " )";
          }).join(", ")
        }
        END IF **/

        // This is a somewhat naive strategy, but should work in a lot of cases
        // A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.
        //
        // This strategy generally prefers more static and less dynamic matching.
        // Specifically, it
        //
        //  * prefers fewer stars to more, then
        //  * prefers using stars for less of the match to more, then
        //  * prefers fewer dynamic segments to more, then
        //  * prefers more static segments to more
        function sortSolutions(states) {
          return states.sort(function(a, b) {
            if (a.types.stars !== b.types.stars) { return a.types.stars - b.types.stars; }

            if (a.types.stars) {
              if (a.types.statics !== b.types.statics) { return b.types.statics - a.types.statics; }
              if (a.types.dynamics !== b.types.dynamics) { return b.types.dynamics - a.types.dynamics; }
            }

            if (a.types.dynamics !== b.types.dynamics) { return a.types.dynamics - b.types.dynamics; }
            if (a.types.statics !== b.types.statics) { return b.types.statics - a.types.statics; }

            return 0;
          });
        }

        function recognizeChar(states, ch) {
          var nextStates = [];

          for (var i=0, l=states.length; i<l; i++) {
            var state = states[i];

            nextStates = nextStates.concat(state.match(ch));
          }

          return nextStates;
        }

        var oCreate = Object.create || function(proto) {
          function F() {}
          F.prototype = proto;
          return new F();
        };

        function RecognizeResults(queryParams) {
          this.queryParams = queryParams || {};
        }

        RecognizeResults.prototype = oCreate({
          splice: Array.prototype.splice,
          slice:  Array.prototype.slice,
          push:   Array.prototype.push,
          length: 0,
          queryParams: null
        });

        function findHandler(state, path, queryParams) {
          var handlers = state.handlers, regex = state.regex;
          var captures = path.match(regex), currentCapture = 1;
          var result = new RecognizeResults(queryParams);

          for (var i=0, l=handlers.length; i<l; i++) {
            var handler = handlers[i], names = handler.names, params = {};

            for (var j=0, m=names.length; j<m; j++) {
              params[names[j]] = captures[currentCapture++];
            }

            result.push({ handler: handler.handler, params: params, isDynamic: !!names.length });
          }

          return result;
        }

        function addSegment(currentState, segment) {
          segment.eachChar(function(ch) {
            var state;

            currentState = currentState.put(ch);
          });

          return currentState;
        }

        // The main interface

        var RouteRecognizer = function() {
          this.rootState = new State();
          this.names = {};
        };

        RouteRecognizer.prototype = {
          add: function(routes, options) {
            var currentState = this.rootState, regex = "^",
                types = { statics: 0, dynamics: 0, stars: 0 },
                handlers = [], allSegments = [], name;

            var isEmpty = true;

            for (var i=0, l=routes.length; i<l; i++) {
              var route = routes[i], names = [];

              var segments = parse(route.path, names, types);

              allSegments = allSegments.concat(segments);

              for (var j=0, m=segments.length; j<m; j++) {
                var segment = segments[j];

                if (segment instanceof EpsilonSegment) { continue; }

                isEmpty = false;

                // Add a "/" for the new segment
                currentState = currentState.put({ validChars: "/" });
                regex += "/";

                // Add a representation of the segment to the NFA and regex
                currentState = addSegment(currentState, segment);
                regex += segment.regex();
              }

              var handler = { handler: route.handler, names: names };
              handlers.push(handler);
            }

            if (isEmpty) {
              currentState = currentState.put({ validChars: "/" });
              regex += "/";
            }

            currentState.handlers = handlers;
            currentState.regex = new RegExp(regex + "$");
            currentState.types = types;

            if (name = options && options.as) {
              this.names[name] = {
                segments: allSegments,
                handlers: handlers
              };
            }
          },

          handlersFor: function(name) {
            var route = this.names[name], result = [];
            if (!route) { throw new Error("There is no route named " + name); }

            for (var i=0, l=route.handlers.length; i<l; i++) {
              result.push(route.handlers[i]);
            }

            return result;
          },

          hasRoute: function(name) {
            return !!this.names[name];
          },

          generate: function(name, params) {
            var route = this.names[name], output = "";
            if (!route) { throw new Error("There is no route named " + name); }

            var segments = route.segments;

            for (var i=0, l=segments.length; i<l; i++) {
              var segment = segments[i];

              if (segment instanceof EpsilonSegment) { continue; }

              output += "/";
              output += segment.generate(params);
            }

            if (output.charAt(0) !== '/') { output = '/' + output; }

            if (params && params.queryParams) {
              output += this.generateQueryString(params.queryParams, route.handlers);
            }

            return output;
          },

          generateQueryString: function(params, handlers) {
            var pairs = [];
            var keys = [];
            for(var key in params) {
              if (params.hasOwnProperty(key)) {
                keys.push(key);
              }
            }
            keys.sort();
            for (var i = 0, len = keys.length; i < len; i++) {
              key = keys[i];
              var value = params[key];
              if (value == null) {
                continue;
              }
              var pair = key;
              if (isArray(value)) {
                for (var j = 0, l = value.length; j < l; j++) {
                  var arrayPair = key + '[]' + '=' + encodeURIComponent(value[j]);
                  pairs.push(arrayPair);
                }
              } else {
                pair += "=" + encodeURIComponent(value);
                pairs.push(pair);
              }
            }

            if (pairs.length === 0) { return ''; }

            return "?" + pairs.join("&");
          },

          parseQueryString: function(queryString) {
            var pairs = queryString.split("&"), queryParams = {};
            for(var i=0; i < pairs.length; i++) {
              var pair      = pairs[i].split('='),
                  key       = decodeURIComponent(pair[0]),
                  keyLength = key.length,
                  isArray = false,
                  value;
              if (pair.length === 1) {
                value = 'true';
              } else {
                //Handle arrays
                if (keyLength > 2 && key.slice(keyLength -2) === '[]') {
                  isArray = true;
                  key = key.slice(0, keyLength - 2);
                  if(!queryParams[key]) {
                    queryParams[key] = [];
                  }
                }
                value = pair[1] ? decodeURIComponent(pair[1]) : '';
              }
              if (isArray) {
                queryParams[key].push(value);
              } else {
                queryParams[key] = decodeURIComponent(value);
              }
            }
            return queryParams;
          },

          recognize: function(path) {
            var states = [ this.rootState ],
                pathLen, i, l, queryStart, queryParams = {},
                isSlashDropped = false;

            path = decodeURI(path);

            queryStart = path.indexOf('?');
            if (queryStart !== -1) {
              var queryString = path.substr(queryStart + 1, path.length);
              path = path.substr(0, queryStart);
              queryParams = this.parseQueryString(queryString);
            }

            // DEBUG GROUP path

            if (path.charAt(0) !== "/") { path = "/" + path; }

            pathLen = path.length;
            if (pathLen > 1 && path.charAt(pathLen - 1) === "/") {
              path = path.substr(0, pathLen - 1);
              isSlashDropped = true;
            }

            for (i=0, l=path.length; i<l; i++) {
              states = recognizeChar(states, path.charAt(i));
              if (!states.length) { break; }
            }

            // END DEBUG GROUP

            var solutions = [];
            for (i=0, l=states.length; i<l; i++) {
              if (states[i].handlers) { solutions.push(states[i]); }
            }

            states = sortSolutions(solutions);

            var state = solutions[0];

            if (state && state.handlers) {
              // if a trailing slash was dropped and a star segment is the last segment
              // specified, put the trailing slash back
              if (isSlashDropped && state.regex.source.slice(-5) === "(.+)$") {
                path = path + "/";
              }
              return findHandler(state, path, queryParams);
            }
          }
        };

        route$recognizer$$default = RouteRecognizer;

        function Target(path, matcher, delegate) {
          this.path = path;
          this.matcher = matcher;
          this.delegate = delegate;
        }

        Target.prototype = {
          to: function(target, callback) {
            var delegate = this.delegate;

            if (delegate && delegate.willAddRoute) {
              target = delegate.willAddRoute(this.matcher.target, target);
            }

            this.matcher.add(this.path, target);

            if (callback) {
              if (callback.length === 0) { throw new Error("You must have an argument in the function passed to `to`"); }
              this.matcher.addChild(this.path, target, callback, this.delegate);
            }
            return this;
          }
        };

        function Matcher(target) {
          this.routes = {};
          this.children = {};
          this.target = target;
        }

        Matcher.prototype = {
          add: function(path, handler) {
            this.routes[path] = handler;
          },

          addChild: function(path, target, callback, delegate) {
            var matcher = new Matcher(target);
            this.children[path] = matcher;

            var match = generateMatch(path, matcher, delegate);

            if (delegate && delegate.contextEntered) {
              delegate.contextEntered(target, match);
            }

            callback(match);
          }
        };

        function generateMatch(startingPath, matcher, delegate) {
          return function(path, nestedCallback) {
            var fullPath = startingPath + path;

            if (nestedCallback) {
              nestedCallback(generateMatch(fullPath, matcher, delegate));
            } else {
              return new Target(startingPath + path, matcher, delegate);
            }
          };
        }

        function addRoute(routeArray, path, handler) {
          var len = 0;
          for (var i=0, l=routeArray.length; i<l; i++) {
            len += routeArray[i].path.length;
          }

          path = path.substr(len);
          var route = { path: path, handler: handler };
          routeArray.push(route);
        }

        function eachRoute(baseRoute, matcher, callback, binding) {
          var routes = matcher.routes;

          for (var path in routes) {
            if (routes.hasOwnProperty(path)) {
              var routeArray = baseRoute.slice();
              addRoute(routeArray, path, routes[path]);

              if (matcher.children[path]) {
                eachRoute(routeArray, matcher.children[path], callback, binding);
              } else {
                callback.call(binding, routeArray);
              }
            }
          }
        }

        RouteRecognizer.prototype.map = function(callback, addRouteCallback) {
          var matcher = new Matcher();

          callback(generateMatch("", matcher, this.delegate));

          eachRoute([], matcher, function(route) {
            if (addRouteCallback) { addRouteCallback(this, route); }
            else { this.add(route); }
          }, this);
        };
    }).call(this);

    (function() {
        function indexOf(callbacks, callback) {
          for (var i=0, l=callbacks.length; i<l; i++) {
            if (callbacks[i] === callback) { return i; }
          }

          return -1;
        }

        function callbacksFor(object) {
          var callbacks = object._promiseCallbacks;

          if (!callbacks) {
            callbacks = object._promiseCallbacks = {};
          }

          return callbacks;
        }

        $$events$$default = {

          /**
            `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For
            Example:

            ```javascript
            var object = {};

            RSVP.EventTarget.mixin(object);

            object.on("finished", function(event) {
              // handle event
            });

            object.trigger("finished", { detail: value });
            ```

            `EventTarget.mixin` also works with prototypes:

            ```javascript
            var Person = function() {};
            RSVP.EventTarget.mixin(Person.prototype);

            var yehuda = new Person();
            var tom = new Person();

            yehuda.on("poke", function(event) {
              console.log("Yehuda says OW");
            });

            tom.on("poke", function(event) {
              console.log("Tom says OW");
            });

            yehuda.trigger("poke");
            tom.trigger("poke");
            ```

            @method mixin
            @for RSVP.EventTarget
            @private
            @param {Object} object object to extend with EventTarget methods
          */
          mixin: function(object) {
            object.on = this.on;
            object.off = this.off;
            object.trigger = this.trigger;
            object._promiseCallbacks = undefined;
            return object;
          },

          /**
            Registers a callback to be executed when `eventName` is triggered

            ```javascript
            object.on('event', function(eventInfo){
              // handle the event
            });

            object.trigger('event');
            ```

            @method on
            @for RSVP.EventTarget
            @private
            @param {String} eventName name of the event to listen for
            @param {Function} callback function to be called when the event is triggered.
          */
          on: function(eventName, callback) {
            var allCallbacks = callbacksFor(this), callbacks;

            callbacks = allCallbacks[eventName];

            if (!callbacks) {
              callbacks = allCallbacks[eventName] = [];
            }

            if (indexOf(callbacks, callback) === -1) {
              callbacks.push(callback);
            }
          },

          /**
            You can use `off` to stop firing a particular callback for an event:

            ```javascript
            function doStuff() { // do stuff! }
            object.on('stuff', doStuff);

            object.trigger('stuff'); // doStuff will be called

            // Unregister ONLY the doStuff callback
            object.off('stuff', doStuff);
            object.trigger('stuff'); // doStuff will NOT be called
            ```

            If you don't pass a `callback` argument to `off`, ALL callbacks for the
            event will not be executed when the event fires. For example:

            ```javascript
            var callback1 = function(){};
            var callback2 = function(){};

            object.on('stuff', callback1);
            object.on('stuff', callback2);

            object.trigger('stuff'); // callback1 and callback2 will be executed.

            object.off('stuff');
            object.trigger('stuff'); // callback1 and callback2 will not be executed!
            ```

            @method off
            @for RSVP.EventTarget
            @private
            @param {String} eventName event to stop listening to
            @param {Function} callback optional argument. If given, only the function
            given will be removed from the event's callback queue. If no `callback`
            argument is given, all callbacks will be removed from the event's callback
            queue.
          */
          off: function(eventName, callback) {
            var allCallbacks = callbacksFor(this), callbacks, index;

            if (!callback) {
              allCallbacks[eventName] = [];
              return;
            }

            callbacks = allCallbacks[eventName];

            index = indexOf(callbacks, callback);

            if (index !== -1) { callbacks.splice(index, 1); }
          },

          /**
            Use `trigger` to fire custom events. For example:

            ```javascript
            object.on('foo', function(){
              console.log('foo event happened!');
            });
            object.trigger('foo');
            // 'foo event happened!' logged to the console
            ```

            You can also pass a value as a second argument to `trigger` that will be
            passed as an argument to all event listeners for the event:

            ```javascript
            object.on('foo', function(value){
              console.log(value.name);
            });

            object.trigger('foo', { name: 'bar' });
            // 'bar' logged to the console
            ```

            @method trigger
            @for RSVP.EventTarget
            @private
            @param {String} eventName name of the event to be triggered
            @param {Any} options optional value to be passed to any event handlers for
            the given `eventName`
          */
          trigger: function(eventName, options) {
            var allCallbacks = callbacksFor(this),
                callbacks, callbackTuple, callback, binding;

            if (callbacks = allCallbacks[eventName]) {
              // Don't cache the callbacks.length since it may grow
              for (var i=0; i<callbacks.length; i++) {
                callback = callbacks[i];

                callback(options);
              }
            }
          }
        };
    }).call(this);

    (function() {
        $$config$$config = {
          instrument: false
        };

        $$events$$default.mixin($$config$$config);

        function configure(name, value) {
          if (name === 'onerror') {
            // handle for legacy users that expect the actual
            // error to be passed to their function added via
            // `RSVP.configure('onerror', someFunctionHere);`
            $$config$$config.on('error', value);
            return;
          }

          if (arguments.length === 2) {
            $$config$$config[name] = value;
          } else {
            return $$config$$config[name];
          }
        }

        $$config$$configure = configure;
    }).call(this);

    (function() {
        function objectOrFunction(x) {
          return typeof x === "function" || (typeof x === "object" && x !== null);
        }

        $$utils1$$objectOrFunction = objectOrFunction;

        function isFunction(x) {
          return typeof x === "function";
        }

        $$utils1$$isFunction = isFunction;

        function isMaybeThenable(x) {
          return typeof x === 'object' && x !== null;
        }

        $$utils1$$isMaybeThenable = isMaybeThenable;
        var _isArray;

        if (!Array.isArray) {
          _isArray = function (x) {
            return Object.prototype.toString.call(x) === "[object Array]";
          };
        } else {
          _isArray = Array.isArray;
        }

        $$utils1$$isArray = _isArray;
        $$utils1$$now = Date.now || function() { return new Date().getTime(); };

        $$utils1$$keysOf = Object.keys || function(object) {
          var result = [];

          for (var prop in object) {
            result.push(prop);
          }

          return result;
        };
    }).call(this);

    (function() {
        $$instrument$$default = function instrument(eventName, promise, child) {
          // instrumentation should not disrupt normal usage.
          try {
            $$config$$config.trigger(eventName, {
              guid: promise._guidKey + promise._id,
              eventName: eventName,
              detail: promise._detail,
              childGuid: child && promise._guidKey + child._id,
              label: promise._label,
              timeStamp: $$utils1$$now(),
              stack: new Error(promise._label).stack
            });
          } catch(error) {
            setTimeout(function(){
              throw error;
            }, 0);
          }
        };
    }).call(this);

    (function() {
        $$promise$cast$$default = function cast(object, label) {
          /*jshint validthis:true */
          var Constructor = this;

          if (object && typeof object === 'object' && object.constructor === Constructor) {
            return object;
          }

          return new Constructor(function(resolve) {
            resolve(object);
          }, label);
        };
    }).call(this);

    (function() {
        $$promise$all$$default = function all(entries, label) {

          /*jshint validthis:true */
          var Constructor = this;

          return new Constructor(function(resolve, reject) {
            if (!$$utils1$$isArray(entries)) {
              throw new TypeError('You must pass an array to all.');
            }

            var remaining = entries.length;
            var results = new Array(remaining);
            var entry, pending = true;

            if (remaining === 0) {
              resolve(results);
              return;
            }

            function fulfillmentAt(index) {
              return function(value) {
                results[index] = value;
                if (--remaining === 0) {
                  resolve(results);
                }
              };
            }

            function onRejection(reason) {
              remaining = 0;
              reject(reason);
            }

            for (var index = 0; index < entries.length; index++) {
              entry = entries[index];
              if ($$utils1$$isMaybeThenable(entry)) {
                Constructor.resolve(entry).then(fulfillmentAt(index), onRejection);
              } else {
                results[index] = entry;
                if (--remaining === 0) {
                  resolve(results);
                }
              }
            }
          }, label);
        };
    }).call(this);

    (function() {
        $$promise$race$$default = function race(entries, label) {
          /*jshint validthis:true */
          var Constructor = this, entry;

          return new Constructor(function(resolve, reject) {
            if (!$$utils1$$isArray(entries)) {
              throw new TypeError('You must pass an array to race.');
            }

            var pending = true;

            function onFulfillment(value) { if (pending) { pending = false; resolve(value); } }
            function onRejection(reason)  { if (pending) { pending = false; reject(reason); } }

            for (var i = 0; i < entries.length; i++) {
              entry = entries[i];
              if ($$utils1$$isMaybeThenable(entry)) {
                Constructor.resolve(entry).then(onFulfillment, onRejection);
              } else {
                pending = false;
                resolve(entry);
                return;
              }
            }
          }, label);
        };
    }).call(this);

    (function() {
        $$promise$resolve$$default = function resolve(object, label) {
          /*jshint validthis:true */
          var Constructor = this;

          if (object && typeof object === 'object' && object.constructor === Constructor) {
            return object;
          }

          return new Constructor(function(resolve) {
            resolve(object);
          }, label);
        };
    }).call(this);

    (function() {
        $$promise$reject$$default = function reject(reason, label) {
          /*jshint validthis:true */
          var Constructor = this;

          return new Constructor(function (resolve, reject) {
            reject(reason);
          }, label);
        };
    }).call(this);

    (function() {
        var guidKey = 'rsvp_' + $$utils1$$now() + '-';
        var counter = 0;
        function noop() {}
        rsvp$promise$$default = Promise;

        /**
          Promise objects represent the eventual result of an asynchronous operation. The
          primary way of interacting with a promise is through its `then` method, which
          registers callbacks to receive either a promise’s eventual value or the reason
          why the promise cannot be fulfilled.

          Terminology
          -----------

          - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
          - `thenable` is an object or function that defines a `then` method.
          - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
          - `exception` is a value that is thrown using the throw statement.
          - `reason` is a value that indicates why a promise was rejected.
          - `settled` the final resting state of a promise, fulfilled or rejected.

          A promise can be in one of three states: pending, fulfilled, or rejected.

          Promises that are fulfilled have a fulfillment value and are in the fulfilled
          state.  Promises that are rejected have a rejection reason and are in the
          rejected state.  A fulfillment value is never a thenable.

          Promises can also be said to *resolve* a value.  If this value is also a
          promise, then the original promise's settled state will match the value's
          settled state.  So a promise that *resolves* a promise that rejects will
          itself reject, and a promise that *resolves* a promise that fulfills will
          itself fulfill.


          Basic Usage:
          ------------

          ```js
          var promise = new Promise(function(resolve, reject) {
            // on success
            resolve(value);

            // on failure
            reject(reason);
          });

          promise.then(function(value) {
            // on fulfillment
          }, function(reason) {
            // on rejection
          });
          ```

          Advanced Usage:
          ---------------

          Promises shine when abstracting away asynchronous interactions such as
          `XMLHttpRequest`s.

          ```js
          function getJSON(url) {
            return new Promise(function(resolve, reject){
              var xhr = new XMLHttpRequest();

              xhr.open('GET', url);
              xhr.onreadystatechange = handler;
              xhr.responseType = 'json';
              xhr.setRequestHeader('Accept', 'application/json');
              xhr.send();

              function handler() {
                if (this.readyState === this.DONE) {
                  if (this.status === 200) {
                    resolve(this.response);
                  } else {
                    reject(new Error("getJSON: `" + url + "` failed with status: [" + this.status + "]"));
                  }
                }
              };
            });
          }

          getJSON('/posts.json').then(function(json) {
            // on fulfillment
          }, function(reason) {
            // on rejection
          });
          ```

          Unlike callbacks, promises are great composable primitives.

          ```js
          Promise.all([
            getJSON('/posts'),
            getJSON('/comments')
          ]).then(function(values){
            values[0] // => postsJSON
            values[1] // => commentsJSON

            return values;
          });
          ```

          @class RSVP.Promise
          @param {function} resolver
          @param {String} label optional string for labeling the promise.
          Useful for tooling.
          @constructor
        */
        function Promise(resolver, label) {
          if (!$$utils1$$isFunction(resolver)) {
            throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
          }

          if (!(this instanceof Promise)) {
            throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
          }

          this._id = counter++;
          this._label = label;
          this._subscribers = [];

          if ($$config$$config.instrument) {
            $$instrument$$default('created', this);
          }

          if (noop !== resolver) {
            invokeResolver(resolver, this);
          }
        }

        function invokeResolver(resolver, promise) {
          function resolvePromise(value) {
            resolve(promise, value);
          }

          function rejectPromise(reason) {
            reject(promise, reason);
          }

          try {
            resolver(resolvePromise, rejectPromise);
          } catch(e) {
            rejectPromise(e);
          }
        }

        Promise.cast = $$promise$cast$$default;
        Promise.all = $$promise$all$$default;
        Promise.race = $$promise$race$$default;
        Promise.resolve = $$promise$resolve$$default;
        Promise.reject = $$promise$reject$$default;
        var PENDING   = void 0;
        var SEALED    = 0;
        var FULFILLED = 1;
        var REJECTED  = 2;

        function subscribe(parent, child, onFulfillment, onRejection) {
          var subscribers = parent._subscribers;
          var length = subscribers.length;

          subscribers[length] = child;
          subscribers[length + FULFILLED] = onFulfillment;
          subscribers[length + REJECTED]  = onRejection;

          if (length === 0 && parent._state) {
            $$config$$config.async(parent._state === FULFILLED ? publishFulfillment : publishRejection, parent);
          }
        }

        function publish(promise, settled) {
          var child, callback, subscribers = promise._subscribers, detail = promise._detail;

          if ($$config$$config.instrument) {
            $$instrument$$default(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);
          }

          for (var i = 0; i < subscribers.length; i += 3) {
            child = subscribers[i];
            callback = subscribers[i + settled];

            invokeCallback(settled, child, callback, detail);
          }

          promise._subscribers.length = 0;
        }

        Promise.prototype = {
          constructor: Promise,

          _id: undefined,
          _guidKey: guidKey,
          _label: undefined,

          _state: undefined,
          _detail: undefined,
          _subscribers: undefined,

          _onerror: function (reason) {
            $$config$$config.trigger('error', reason);
          },

        /**
          The primary way of interacting with a promise is through its `then` method,
          which registers callbacks to receive either a promise's eventual value or the
          reason why the promise cannot be fulfilled.

          ```js
          findUser().then(function(user){
            // user is available
          }, function(reason){
            // user is unavailable, and you are given the reason why
          });
          ```

          Chaining
          --------

          The return value of `then` is itself a promise.  This second, "downstream"
          promise is resolved with the return value of the first promise's fulfillment
          or rejection handler, or rejected if the handler throws an exception.

          ```js
          findUser().then(function (user) {
            return user.name;
          }, function (reason) {
            return "default name";
          }).then(function (userName) {
            // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
            // will be `"default name"`
          });

          findUser().then(function (user) {
            throw new Error("Found user, but still unhappy");
          }, function (reason) {
            throw new Error("`findUser` rejected and we're unhappy");
          }).then(function (value) {
            // never reached
          }, function (reason) {
            // if `findUser` fulfilled, `reason` will be "Found user, but still unhappy".
            // If `findUser` rejected, `reason` will be "`findUser` rejected and we're unhappy".
          });
          ```
          If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

          ```js
          findUser().then(function (user) {
            throw new PedagogicalException("Upstream error");
          }).then(function (value) {
            // never reached
          }).then(function (value) {
            // never reached
          }, function (reason) {
            // The `PedgagocialException` is propagated all the way down to here
          });
          ```

          Assimilation
          ------------

          Sometimes the value you want to propagate to a downstream promise can only be
          retrieved asynchronously. This can be achieved by returning a promise in the
          fulfillment or rejection handler. The downstream promise will then be pending
          until the returned promise is settled. This is called *assimilation*.

          ```js
          findUser().then(function (user) {
            return findCommentsByAuthor(user);
          }).then(function (comments) {
            // The user's comments are now available
          });
          ```

          If the assimliated promise rejects, then the downstream promise will also reject.

          ```js
          findUser().then(function (user) {
            return findCommentsByAuthor(user);
          }).then(function (comments) {
            // If `findCommentsByAuthor` fulfills, we'll have the value here
          }, function (reason) {
            // If `findCommentsByAuthor` rejects, we'll have the reason here
          });
          ```

          Simple Example
          --------------

          Synchronous Example

          ```javascript
          var result;

          try {
            result = findResult();
            // success
          } catch(reason) {
            // failure
          }
          ```

          Errback Example

          ```js
          findResult(function(result, err){
            if (err) {
              // failure
            } else {
              // success
            }
          });
          ```

          Promise Example;

          ```javascript
          findResult().then(function(result){
            // success
          }, function(reason){
            // failure
          });
          ```

          Advanced Example
          --------------

          Synchronous Example

          ```javascript
          var author, books;

          try {
            author = findAuthor();
            books  = findBooksByAuthor(author);
            // success
          } catch(reason) {
            // failure
          }
          ```

          Errback Example

          ```js

          function foundBooks(books) {

          }

          function failure(reason) {

          }

          findAuthor(function(author, err){
            if (err) {
              failure(err);
              // failure
            } else {
              try {
                findBoooksByAuthor(author, function(books, err) {
                  if (err) {
                    failure(err);
                  } else {
                    try {
                      foundBooks(books);
                    } catch(reason) {
                      failure(reason);
                    }
                  }
                });
              } catch(error) {
                failure(err);
              }
              // success
            }
          });
          ```

          Promise Example;

          ```javascript
          findAuthor().
            then(findBooksByAuthor).
            then(function(books){
              // found books
          }).catch(function(reason){
            // something went wrong
          });
          ```

          @method then
          @param {Function} onFulfilled
          @param {Function} onRejected
          @param {String} label optional string for labeling the promise.
          Useful for tooling.
          @return {Promise}
        */
          then: function(onFulfillment, onRejection, label) {
            var promise = this;
            this._onerror = null;

            var thenPromise = new this.constructor(noop, label);

            subscribe(this, thenPromise, onFulfillment, onRejection);

            if ($$config$$config.instrument) {
              $$instrument$$default('chained', promise, thenPromise);
            }

            return thenPromise;
          },

        /**
          `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
          as the catch block of a try/catch statement.

          ```js
          function findAuthor(){
            throw new Error("couldn't find that author");
          }

          // synchronous
          try {
            findAuthor();
          } catch(reason) {
            // something went wrong
          }

          // async with promises
          findAuthor().catch(function(reason){
            // something went wrong
          });
          ```

          @method catch
          @param {Function} onRejection
          @param {String} label optional string for labeling the promise.
          Useful for tooling.
          @return {Promise}
        */
          'catch': function(onRejection, label) {
            return this.then(null, onRejection, label);
          },

        /**
          `finally` will be invoked regardless of the promise's fate just as native
          try/catch/finally behaves

          Synchronous example:

          ```js
          findAuthor() {
            if (Math.random() > 0.5) {
              throw new Error();
            }
            return new Author();
          }

          try {
            return findAuthor(); // succeed or fail
          } catch(error) {
            return findOtherAuther();
          } finally {
            // always runs
            // doesn't affect the return value
          }
          ```

          Asynchronous example:

          ```js
          findAuthor().catch(function(reason){
            return findOtherAuther();
          }).finally(function(){
            // author was either found, or not
          });
          ```

          @method finally
          @param {Function} callback
          @param {String} label optional string for labeling the promise.
          Useful for tooling.
          @return {Promise}
        */
          'finally': function(callback, label) {
            var constructor = this.constructor;

            return this.then(function(value) {
              return constructor.resolve(callback()).then(function(){
                return value;
              });
            }, function(reason) {
              return constructor.resolve(callback()).then(function(){
                throw reason;
              });
            }, label);
          }
        };

        function invokeCallback(settled, promise, callback, detail) {
          var hasCallback = $$utils1$$isFunction(callback),
              value, error, succeeded, failed;

          if (hasCallback) {
            try {
              value = callback(detail);
              succeeded = true;
            } catch(e) {
              failed = true;
              error = e;
            }
          } else {
            value = detail;
            succeeded = true;
          }

          if (handleThenable(promise, value)) {
            return;
          } else if (hasCallback && succeeded) {
            resolve(promise, value);
          } else if (failed) {
            reject(promise, error);
          } else if (settled === FULFILLED) {
            resolve(promise, value);
          } else if (settled === REJECTED) {
            reject(promise, value);
          }
        }

        function handleThenable(promise, value) {
          var then = null,
          resolved;

          try {
            if (promise === value) {
              throw new TypeError("A promises callback cannot return that same promise.");
            }

            if ($$utils1$$objectOrFunction(value)) {
              then = value.then;

              if ($$utils1$$isFunction(then)) {
                then.call(value, function(val) {
                  if (resolved) { return true; }
                  resolved = true;

                  if (value !== val) {
                    resolve(promise, val);
                  } else {
                    fulfill(promise, val);
                  }
                }, function(val) {
                  if (resolved) { return true; }
                  resolved = true;

                  reject(promise, val);
                }, 'Settle: ' + (promise._label || ' unknown promise'));

                return true;
              }
            }
          } catch (error) {
            if (resolved) { return true; }
            reject(promise, error);
            return true;
          }

          return false;
        }

        function resolve(promise, value) {
          if (promise === value) {
            fulfill(promise, value);
          } else if (!handleThenable(promise, value)) {
            fulfill(promise, value);
          }
        }

        function fulfill(promise, value) {
          if (promise._state !== PENDING) { return; }
          promise._state = SEALED;
          promise._detail = value;

          $$config$$config.async(publishFulfillment, promise);
        }

        function reject(promise, reason) {
          if (promise._state !== PENDING) { return; }
          promise._state = SEALED;
          promise._detail = reason;

          $$config$$config.async(publishRejection, promise);
        }

        function publishFulfillment(promise) {
          publish(promise, promise._state = FULFILLED);
        }

        function publishRejection(promise) {
          if (promise._onerror) {
            promise._onerror(promise._detail);
          }

          publish(promise, promise._state = REJECTED);
        }
    }).call(this);

    (function() {
        $$utils$$slice = Array.prototype.slice;
        var _isArray;

        if (!Array.isArray) {
          _isArray = function (x) {
            return Object.prototype.toString.call(x) === "[object Array]";
          };
        } else {
          _isArray = Array.isArray;
        }

        $$utils$$isArray = _isArray;

        function merge(hash, other) {
          for (var prop in other) {
            if (other.hasOwnProperty(prop)) { hash[prop] = other[prop]; }
          }
        }

        $$utils$$merge = merge;

        $$utils$$oCreate = Object.create || function(proto) {
          function F() {}
          F.prototype = proto;
          return new F();
        };

        function extractQueryParams(array) {
          var len = (array && array.length), head, queryParams;

          if(len && len > 0 && array[len - 1] && array[len - 1].hasOwnProperty('queryParams')) {
            queryParams = array[len - 1].queryParams;
            head = $$utils$$slice.call(array, 0, len - 1);
            return [head, queryParams];
          } else {
            return [array, null];
          }
        }

        $$utils$$extractQueryParams = extractQueryParams;

        /**
          @private

          Coerces query param properties and array elements into strings.
        **/
        function coerceQueryParamsToString(queryParams) {
          for (var key in queryParams) {
            if (typeof queryParams[key] === 'number') {
              queryParams[key] = '' + queryParams[key];
            } else if ($$utils$$isArray(queryParams[key])) {
              for (var i = 0, l = queryParams[key].length; i < l; i++) {
                queryParams[key][i] = '' + queryParams[key][i];
              }
            }
          }
        }

        $$utils$$coerceQueryParamsToString = coerceQueryParamsToString;

        function log(router, sequence, msg) {
          if (!router.log) { return; }

          if (arguments.length === 3) {
            router.log("Transition #" + sequence + ": " + msg);
          } else {
            msg = sequence;
            router.log(msg);
          }
        }

        $$utils$$log = log;

        function bind(context, fn) {
          var boundArgs = arguments;
          return function(value) {
            var args = $$utils$$slice.call(boundArgs, 2);
            args.push(value);
            return fn.apply(context, args);
          };
        }

        $$utils$$bind = bind;

        function isParam(object) {
          return (typeof object === "string" || object instanceof String || typeof object === "number" || object instanceof Number);
        }

        $$utils$$isParam = isParam;

        function forEach(array, callback) {
          for (var i=0, l=array.length; i<l && false !== callback(array[i]); i++) { }
        }

        $$utils$$forEach = forEach;

        function trigger(router, handlerInfos, ignoreFailure, args) {
          if (router.triggerEvent) {
            router.triggerEvent(handlerInfos, ignoreFailure, args);
            return;
          }

          var name = args.shift();

          if (!handlerInfos) {
            if (ignoreFailure) { return; }
            throw new Error("Could not trigger event '" + name + "'. There are no active handlers");
          }

          var eventWasHandled = false;

          for (var i=handlerInfos.length-1; i>=0; i--) {
            var handlerInfo = handlerInfos[i],
                handler = handlerInfo.handler;

            if (handler.events && handler.events[name]) {
              if (handler.events[name].apply(handler, args) === true) {
                eventWasHandled = true;
              } else {
                return;
              }
            }
          }

          if (!eventWasHandled && !ignoreFailure) {
            throw new Error("Nothing handled the event '" + name + "'.");
          }
        }

        $$utils$$trigger = trigger;

        function getChangelist(oldObject, newObject) {
          var key;
          var results = {
            all: {},
            changed: {},
            removed: {}
          };

          $$utils$$merge(results.all, newObject);

          var didChange = false;
          $$utils$$coerceQueryParamsToString(oldObject);
          $$utils$$coerceQueryParamsToString(newObject);

          // Calculate removals
          for (key in oldObject) {
            if (oldObject.hasOwnProperty(key)) {
              if (!newObject.hasOwnProperty(key)) {
                didChange = true;
                results.removed[key] = oldObject[key];
              }
            }
          }

          // Calculate changes
          for (key in newObject) {
            if (newObject.hasOwnProperty(key)) {
              if ($$utils$$isArray(oldObject[key]) && $$utils$$isArray(newObject[key])) {
                if (oldObject[key].length !== newObject[key].length) {
                  results.changed[key] = newObject[key];
                  didChange = true;
                } else {
                  for (var i = 0, l = oldObject[key].length; i < l; i++) {
                    if (oldObject[key][i] !== newObject[key][i]) {
                      results.changed[key] = newObject[key];
                      didChange = true;
                    }
                  }
                }
              }
              else {
                if (oldObject[key] !== newObject[key]) {
                  results.changed[key] = newObject[key];
                  didChange = true;
                }
              }
            }
          }

          return didChange && results;
        }

        $$utils$$getChangelist = getChangelist;

        function promiseLabel(label) {
          return 'Router: ' + label;
        }

        $$utils$$promiseLabel = promiseLabel;

        function subclass(parentConstructor, proto) {
          function C(props) {
            parentConstructor.call(this, props || {});
          }
          C.prototype = $$utils$$oCreate(parentConstructor.prototype);
          $$utils$$merge(C.prototype, proto);
          return C;
        }

        $$utils$$subclass = subclass;
    }).call(this);

    (function() {
        function HandlerInfo(_props) {
          var props = _props || {};
          $$utils$$merge(this, props);
          this.initialize(props);
        }

        HandlerInfo.prototype = {
          name: null,
          handler: null,
          params: null,
          context: null,

          // Injected by the handler info factory.
          factory: null,

          initialize: function() {},

          log: function(payload, message) {
            if (payload.log) {
              payload.log(this.name + ': ' + message);
            }
          },

          promiseLabel: function(label) {
            return $$utils$$promiseLabel("'" + this.name + "' " + label);
          },

          getUnresolved: function() {
            return this;
          },

          serialize: function() {
            return this.params || {};
          },

          resolve: function(shouldContinue, payload) {
            var checkForAbort  = $$utils$$bind(this, this.checkForAbort,      shouldContinue),
                beforeModel    = $$utils$$bind(this, this.runBeforeModelHook, payload),
                model          = $$utils$$bind(this, this.getModel,           payload),
                afterModel     = $$utils$$bind(this, this.runAfterModelHook,  payload),
                becomeResolved = $$utils$$bind(this, this.becomeResolved,     payload);

            return rsvp$promise$$default.resolve(undefined, this.promiseLabel("Start handler"))
                   .then(checkForAbort, null, this.promiseLabel("Check for abort"))
                   .then(beforeModel, null, this.promiseLabel("Before model"))
                   .then(checkForAbort, null, this.promiseLabel("Check if aborted during 'beforeModel' hook"))
                   .then(model, null, this.promiseLabel("Model"))
                   .then(checkForAbort, null, this.promiseLabel("Check if aborted in 'model' hook"))
                   .then(afterModel, null, this.promiseLabel("After model"))
                   .then(checkForAbort, null, this.promiseLabel("Check if aborted in 'afterModel' hook"))
                   .then(becomeResolved, null, this.promiseLabel("Become resolved"));
          },

          runBeforeModelHook: function(payload) {
            if (payload.trigger) {
              payload.trigger(true, 'willResolveModel', payload, this.handler);
            }
            return this.runSharedModelHook(payload, 'beforeModel', []);
          },

          runAfterModelHook: function(payload, resolvedModel) {
            // Stash the resolved model on the payload.
            // This makes it possible for users to swap out
            // the resolved model in afterModel.
            var name = this.name;
            this.stashResolvedModel(payload, resolvedModel);

            return this.runSharedModelHook(payload, 'afterModel', [resolvedModel])
                       .then(function() {
                         // Ignore the fulfilled value returned from afterModel.
                         // Return the value stashed in resolvedModels, which
                         // might have been swapped out in afterModel.
                         return payload.resolvedModels[name];
                       }, null, this.promiseLabel("Ignore fulfillment value and return model value"));
          },

          runSharedModelHook: function(payload, hookName, args) {
            this.log(payload, "calling " + hookName + " hook");

            if (this.queryParams) {
              args.push(this.queryParams);
            }
            args.push(payload);

            var handler = this.handler;
            var result = handler[hookName] && handler[hookName].apply(handler, args);

            if (result && result.isTransition) {
              result = null;
            }

            return rsvp$promise$$default.resolve(result, null, this.promiseLabel("Resolve value returned from one of the model hooks"));
          },

          // overridden by subclasses
          getModel: null,

          checkForAbort: function(shouldContinue, promiseValue) {
            return rsvp$promise$$default.resolve(shouldContinue(), this.promiseLabel("Check for abort")).then(function() {
              // We don't care about shouldContinue's resolve value;
              // pass along the original value passed to this fn.
              return promiseValue;
            }, null, this.promiseLabel("Ignore fulfillment value and continue"));
          },

          stashResolvedModel: function(payload, resolvedModel) {
            payload.resolvedModels = payload.resolvedModels || {};
            payload.resolvedModels[this.name] = resolvedModel;
          },

          becomeResolved: function(payload, resolvedContext) {
            var params = this.serialize(resolvedContext);

            if (payload) {
              this.stashResolvedModel(payload, resolvedContext);
              payload.params = payload.params || {};
              payload.params[this.name] = params;
            }

            return this.factory('resolved', {
              context: resolvedContext,
              name: this.name,
              handler: this.handler,
              params: params
            });
          },

          shouldSupercede: function(other) {
            // Prefer this newer handlerInfo over `other` if:
            // 1) The other one doesn't exist
            // 2) The names don't match
            // 3) This handler has a context that doesn't match
            //    the other one (or the other one doesn't have one).
            // 4) This handler has parameters that don't match the other.
            if (!other) { return true; }

            var contextsMatch = (other.context === this.context);
            return other.name !== this.name ||
                   (this.hasOwnProperty('context') && !contextsMatch) ||
                   (this.hasOwnProperty('params') && !paramsMatch(this.params, other.params));
          }
        };

        function paramsMatch(a, b) {
          if ((!a) ^ (!b)) {
            // Only one is null.
            return false;
          }

          if (!a) {
            // Both must be null.
            return true;
          }

          // Note: this assumes that both params have the same
          // number of keys, but since we're comparing the
          // same handlers, they should.
          for (var k in a) {
            if (a.hasOwnProperty(k) && a[k] !== b[k]) {
              return false;
            }
          }
          return true;
        }

        $$handler$info$$default = HandlerInfo;
    }).call(this);

    (function() {
        function TransitionState(other) {
          this.handlerInfos = [];
          this.queryParams = {};
          this.params = {};
        }

        TransitionState.prototype = {
          handlerInfos: null,
          queryParams: null,
          params: null,

          promiseLabel: function(label) {
            var targetName = '';
            $$utils$$forEach(this.handlerInfos, function(handlerInfo) {
              if (targetName !== '') {
                targetName += '.';
              }
              targetName += handlerInfo.name;
            });
            return $$utils$$promiseLabel("'" + targetName + "': " + label);
          },

          resolve: function(shouldContinue, payload) {
            var self = this;
            // First, calculate params for this state. This is useful
            // information to provide to the various route hooks.
            var params = this.params;
            $$utils$$forEach(this.handlerInfos, function(handlerInfo) {
              params[handlerInfo.name] = handlerInfo.params || {};
            });

            payload = payload || {};
            payload.resolveIndex = 0;

            var currentState = this;
            var wasAborted = false;

            // The prelude RSVP.resolve() asyncs us into the promise land.
            return rsvp$promise$$default.resolve(null, this.promiseLabel("Start transition"))
            .then(resolveOneHandlerInfo, null, this.promiseLabel('Resolve handler'))['catch'](handleError, this.promiseLabel('Handle error'));

            function innerShouldContinue() {
              return rsvp$promise$$default.resolve(shouldContinue(), $$utils$$promiseLabel("Check if should continue"))['catch'](function(reason) {
                // We distinguish between errors that occurred
                // during resolution (e.g. beforeModel/model/afterModel),
                // and aborts due to a rejecting promise from shouldContinue().
                wasAborted = true;
                return rsvp$promise$$default.reject(reason);
              }, $$utils$$promiseLabel("Handle abort"));
            }

            function handleError(error) {
              // This is the only possible
              // reject value of TransitionState#resolve
              var handlerInfos = currentState.handlerInfos;
              var errorHandlerIndex = payload.resolveIndex >= handlerInfos.length ?
                                      handlerInfos.length - 1 : payload.resolveIndex;
              return rsvp$promise$$default.reject({
                error: error,
                handlerWithError: currentState.handlerInfos[errorHandlerIndex].handler,
                wasAborted: wasAborted,
                state: currentState
              });
            }

            function proceed(resolvedHandlerInfo) {
              var wasAlreadyResolved = currentState.handlerInfos[payload.resolveIndex].isResolved;

              // Swap the previously unresolved handlerInfo with
              // the resolved handlerInfo
              currentState.handlerInfos[payload.resolveIndex++] = resolvedHandlerInfo;

              if (!wasAlreadyResolved) {
                // Call the redirect hook. The reason we call it here
                // vs. afterModel is so that redirects into child
                // routes don't re-run the model hooks for this
                // already-resolved route.
                var handler = resolvedHandlerInfo.handler;
                if (handler && handler.redirect) {
                  handler.redirect(resolvedHandlerInfo.context, payload);
                }
              }

              // Proceed after ensuring that the redirect hook
              // didn't abort this transition by transitioning elsewhere.
              return innerShouldContinue().then(resolveOneHandlerInfo, null, $$utils$$promiseLabel('Resolve handler'));
            }

            function resolveOneHandlerInfo() {
              if (payload.resolveIndex === currentState.handlerInfos.length) {
                // This is is the only possible
                // fulfill value of TransitionState#resolve
                return {
                  error: null,
                  state: currentState
                };
              }

              var handlerInfo = currentState.handlerInfos[payload.resolveIndex];

              return handlerInfo.resolve(innerShouldContinue, payload)
                                .then(proceed, null, $$utils$$promiseLabel('Proceed'));
            }
          }
        };

        $$transition$state$$default = TransitionState;
    }).call(this);

    (function() {
        /**
          @private

          A Transition is a thennable (a promise-like object) that represents
          an attempt to transition to another route. It can be aborted, either
          explicitly via `abort` or by attempting another transition while a
          previous one is still underway. An aborted transition can also
          be `retry()`d later.
         */
        function Transition(router, intent, state, error) {
          var transition = this;
          this.state = state || router.state;
          this.intent = intent;
          this.router = router;
          this.data = this.intent && this.intent.data || {};
          this.resolvedModels = {};
          this.queryParams = {};

          if (error) {
            this.promise = rsvp$promise$$default.reject(error);
            return;
          }

          if (state) {
            this.params = state.params;
            this.queryParams = state.queryParams;

            var len = state.handlerInfos.length;
            if (len) {
              this.targetName = state.handlerInfos[state.handlerInfos.length-1].name;
            }

            for (var i = 0; i < len; ++i) {
              var handlerInfo = state.handlerInfos[i];

              // TODO: this all seems hacky
              if (!handlerInfo.isResolved) { break; }
              this.pivotHandler = handlerInfo.handler;
            }

            this.sequence = router$transition$$Transition.currentSequence++;
            this.promise = state.resolve(checkForAbort, this)['catch'](function(result) {
              if (result.wasAborted || transition.isAborted) {
                return rsvp$promise$$default.reject(router$transition$$logAbort(transition));
              } else {
                transition.trigger('error', result.error, transition, result.handlerWithError);
                transition.abort();
                return rsvp$promise$$default.reject(result.error);
              }
            }, $$utils$$promiseLabel('Handle Abort'));
          } else {
            this.promise = rsvp$promise$$default.resolve(this.state);
            this.params = {};
          }

          function checkForAbort() {
            if (transition.isAborted) {
              return rsvp$promise$$default.reject(undefined, $$utils$$promiseLabel("Transition aborted - reject"));
            }
          }
        }

        router$transition$$Transition = Transition;
        router$transition$$Transition.currentSequence = 0;

        router$transition$$Transition.prototype = {
          targetName: null,
          urlMethod: 'update',
          intent: null,
          params: null,
          pivotHandler: null,
          resolveIndex: 0,
          handlerInfos: null,
          resolvedModels: null,
          isActive: true,
          state: null,
          queryParamsOnly: false,

          isTransition: true,

          /**
            @public

            The Transition's internal promise. Calling `.then` on this property
            is that same as calling `.then` on the Transition object itself, but
            this property is exposed for when you want to pass around a
            Transition's promise, but not the Transition object itself, since
            Transition object can be externally `abort`ed, while the promise
            cannot.
           */
          promise: null,

          /**
            @public

            Custom state can be stored on a Transition's `data` object.
            This can be useful for decorating a Transition within an earlier
            hook and shared with a later hook. Properties set on `data` will
            be copied to new transitions generated by calling `retry` on this
            transition.
           */
          data: null,

          /**
            @public

            A standard promise hook that resolves if the transition
            succeeds and rejects if it fails/redirects/aborts.

            Forwards to the internal `promise` property which you can
            use in situations where you want to pass around a thennable,
            but not the Transition itself.

            @param {Function} success
            @param {Function} failure
           */
          then: function(success, failure) {
            return this.promise.then(success, failure);
          },

          /**
            @public

            Aborts the Transition. Note you can also implicitly abort a transition
            by initiating another transition while a previous one is underway.
           */
          abort: function() {
            if (this.isAborted) { return this; }
            $$utils$$log(this.router, this.sequence, this.targetName + ": transition was aborted");
            this.intent.preTransitionState = this.router.state;
            this.isAborted = true;
            this.isActive = false;
            this.router.activeTransition = null;
            return this;
          },

          /**
            @public

            Retries a previously-aborted transition (making sure to abort the
            transition if it's still active). Returns a new transition that
            represents the new attempt to transition.
           */
          retry: function() {
            // TODO: add tests for merged state retry()s
            this.abort();
            return this.router.transitionByIntent(this.intent, false);
          },

          /**
            @public

            Sets the URL-changing method to be employed at the end of a
            successful transition. By default, a new Transition will just
            use `updateURL`, but passing 'replace' to this method will
            cause the URL to update using 'replaceWith' instead. Omitting
            a parameter will disable the URL change, allowing for transitions
            that don't update the URL at completion (this is also used for
            handleURL, since the URL has already changed before the
            transition took place).

            @param {String} method the type of URL-changing method to use
              at the end of a transition. Accepted values are 'replace',
              falsy values, or any other non-falsy value (which is
              interpreted as an updateURL transition).

            @return {Transition} this transition
           */
          method: function(method) {
            this.urlMethod = method;
            return this;
          },

          /**
            @public

            Fires an event on the current list of resolved/resolving
            handlers within this transition. Useful for firing events
            on route hierarchies that haven't fully been entered yet.

            Note: This method is also aliased as `send`

            @param {Boolean} [ignoreFailure=false] a boolean specifying whether unhandled events throw an error
            @param {String} name the name of the event to fire
           */
          trigger: function (ignoreFailure) {
            var args = $$utils$$slice.call(arguments);
            if (typeof ignoreFailure === 'boolean') {
              args.shift();
            } else {
              // Throw errors on unhandled trigger events by default
              ignoreFailure = false;
            }
            $$utils$$trigger(this.router, this.state.handlerInfos.slice(0, this.resolveIndex + 1), ignoreFailure, args);
          },

          /**
            @public

            Transitions are aborted and their promises rejected
            when redirects occur; this method returns a promise
            that will follow any redirects that occur and fulfill
            with the value fulfilled by any redirecting transitions
            that occur.

            @return {Promise} a promise that fulfills with the same
              value that the final redirecting transition fulfills with
           */
          followRedirects: function() {
            var router = this.router;
            return this.promise['catch'](function(reason) {
              if (router.activeTransition) {
                return router.activeTransition.followRedirects();
              }
              return rsvp$promise$$default.reject(reason);
            });
          },

          toString: function() {
            return "Transition (sequence " + this.sequence + ")";
          },

          /**
            @private
           */
          log: function(message) {
            $$utils$$log(this.router, this.sequence, message);
          }
        };

        // Alias 'trigger' as 'send'
        router$transition$$Transition.prototype.send = router$transition$$Transition.prototype.trigger;

        /**
          @private

          Logs and returns a TransitionAborted error.
         */
        function logAbort(transition) {
          $$utils$$log(transition.router, transition.sequence, "detected abort.");
          return new router$transition$$TransitionAborted();
        }

        router$transition$$logAbort = logAbort;

        function TransitionAborted(message) {
          this.message = (message || "TransitionAborted");
          this.name = "TransitionAborted";
        }

        router$transition$$TransitionAborted = TransitionAborted;
    }).call(this);

    (function() {
        function TransitionIntent(props) {
          this.initialize(props);

          // TODO: wat
          this.data = this.data || {};
        }

        TransitionIntent.prototype = {
          initialize: null,
          applyToState: null
        };

        $$$transition$intent$$default = TransitionIntent;
    }).call(this);

    (function() {
        var ResolvedHandlerInfo = $$utils$$subclass($$handler$info$$default, {
          resolve: function(shouldContinue, payload) {
            // A ResolvedHandlerInfo just resolved with itself.
            if (payload && payload.resolvedModels) {
              payload.resolvedModels[this.name] = this.context;
            }
            return rsvp$promise$$default.resolve(this, this.promiseLabel("Resolve"));
          },

          getUnresolved: function() {
            return this.factory('param', {
              name: this.name,
              handler: this.handler,
              params: this.params
            });
          },

          isResolved: true
        });

        router$handler$info$resolved$handler$info$$default = ResolvedHandlerInfo;
    }).call(this);

    (function() {
        var UnresolvedHandlerInfoByObject = $$utils$$subclass($$handler$info$$default, {
          getModel: function(payload) {
            this.log(payload, this.name + ": resolving provided model");
            return rsvp$promise$$default.resolve(this.context);
          },

          initialize: function(props) {
            this.names = props.names || [];
            this.context = props.context;
          },

          /**
            @private

            Serializes a handler using its custom `serialize` method or
            by a default that looks up the expected property name from
            the dynamic segment.

            @param {Object} model the model to be serialized for this handler
          */
          serialize: function(_model) {
            var model = _model || this.context,
                names = this.names,
                handler = this.handler;

            var object = {};
            if ($$utils$$isParam(model)) {
              object[names[0]] = model;
              return object;
            }

            // Use custom serialize if it exists.
            if (handler.serialize) {
              return handler.serialize(model, names);
            }

            if (names.length !== 1) { return; }

            var name = names[0];

            if (/_id$/.test(name)) {
              object[name] = model.id;
            } else {
              object[name] = model;
            }
            return object;
          }
        });

        router$handler$info$unresolved$handler$info$by$object$$default = UnresolvedHandlerInfoByObject;
    }).call(this);

    (function() {
        // Generated by URL transitions and non-dynamic route segments in named Transitions.
        var UnresolvedHandlerInfoByParam = $$utils$$subclass ($$handler$info$$default, {
          initialize: function(props) {
            this.params = props.params || {};
          },

          getModel: function(payload) {
            var fullParams = this.params;
            if (payload && payload.queryParams) {
              fullParams = {};
              $$utils$$merge(fullParams, this.params);
              fullParams.queryParams = payload.queryParams;
            }

            var hookName = typeof this.handler.deserialize === 'function' ?
                           'deserialize' : 'model';

            return this.runSharedModelHook(payload, hookName, [fullParams]);
          }
        });

        router$handler$info$unresolved$handler$info$by$param$$default = UnresolvedHandlerInfoByParam;
    }).call(this);

    (function() {
        handlerInfoFactory.klasses = {
          resolved: router$handler$info$resolved$handler$info$$default,
          param: router$handler$info$unresolved$handler$info$by$param$$default,
          object: router$handler$info$unresolved$handler$info$by$object$$default
        };

        function handlerInfoFactory(name, props) {
          var Ctor = handlerInfoFactory.klasses[name],
              handlerInfo = new Ctor(props || {});
          handlerInfo.factory = handlerInfoFactory;
          return handlerInfo;
        }

        $$$handler$info$factory$$default = handlerInfoFactory;
    }).call(this);

    (function() {
        $$transition$intent$named$transition$intent$$default = $$utils$$subclass($$$transition$intent$$default, {
          name: null,
          pivotHandler: null,
          contexts: null,
          queryParams: null,

          initialize: function(props) {
            this.name = props.name;
            this.pivotHandler = props.pivotHandler;
            this.contexts = props.contexts || [];
            this.queryParams = props.queryParams;
          },

          applyToState: function(oldState, recognizer, getHandler, isIntermediate) {

            var partitionedArgs     = $$utils$$extractQueryParams([this.name].concat(this.contexts)),
              pureArgs              = partitionedArgs[0],
              queryParams           = partitionedArgs[1],
              handlers              = recognizer.handlersFor(pureArgs[0]);

            var targetRouteName = handlers[handlers.length-1].handler;

            return this.applyToHandlers(oldState, handlers, getHandler, targetRouteName, isIntermediate);
          },

          applyToHandlers: function(oldState, handlers, getHandler, targetRouteName, isIntermediate, checkingIfActive) {

            var i;
            var newState = new $$transition$state$$default();
            var objects = this.contexts.slice(0);

            var invalidateIndex = handlers.length;

            // Pivot handlers are provided for refresh transitions
            if (this.pivotHandler) {
              for (i = 0; i < handlers.length; ++i) {
                if (getHandler(handlers[i].handler) === this.pivotHandler) {
                  invalidateIndex = i;
                  break;
                }
              }
            }

            var pivotHandlerFound = !this.pivotHandler;

            for (i = handlers.length - 1; i >= 0; --i) {
              var result = handlers[i];
              var name = result.handler;
              var handler = getHandler(name);

              var oldHandlerInfo = oldState.handlerInfos[i];
              var newHandlerInfo = null;

              if (result.names.length > 0) {
                if (i >= invalidateIndex) {
                  newHandlerInfo = this.createParamHandlerInfo(name, handler, result.names, objects, oldHandlerInfo);
                } else {
                  newHandlerInfo = this.getHandlerInfoForDynamicSegment(name, handler, result.names, objects, oldHandlerInfo, targetRouteName, i);
                }
              } else {
                // This route has no dynamic segment.
                // Therefore treat as a param-based handlerInfo
                // with empty params. This will cause the `model`
                // hook to be called with empty params, which is desirable.
                newHandlerInfo = this.createParamHandlerInfo(name, handler, result.names, objects, oldHandlerInfo);
              }

              if (checkingIfActive) {
                // If we're performing an isActive check, we want to
                // serialize URL params with the provided context, but
                // ignore mismatches between old and new context.
                newHandlerInfo = newHandlerInfo.becomeResolved(null, newHandlerInfo.context);
                var oldContext = oldHandlerInfo && oldHandlerInfo.context;
                if (result.names.length > 0 && newHandlerInfo.context === oldContext) {
                  // If contexts match in isActive test, assume params also match.
                  // This allows for flexibility in not requiring that every last
                  // handler provide a `serialize` method
                  newHandlerInfo.params = oldHandlerInfo && oldHandlerInfo.params;
                }
                newHandlerInfo.context = oldContext;
              }

              var handlerToUse = oldHandlerInfo;
              if (i >= invalidateIndex || newHandlerInfo.shouldSupercede(oldHandlerInfo)) {
                invalidateIndex = Math.min(i, invalidateIndex);
                handlerToUse = newHandlerInfo;
              }

              if (isIntermediate && !checkingIfActive) {
                handlerToUse = handlerToUse.becomeResolved(null, handlerToUse.context);
              }

              newState.handlerInfos.unshift(handlerToUse);
            }

            if (objects.length > 0) {
              throw new Error("More context objects were passed than there are dynamic segments for the route: " + targetRouteName);
            }

            if (!isIntermediate) {
              this.invalidateChildren(newState.handlerInfos, invalidateIndex);
            }

            $$utils$$merge(newState.queryParams, this.queryParams || {});

            return newState;
          },

          invalidateChildren: function(handlerInfos, invalidateIndex) {
            for (var i = invalidateIndex, l = handlerInfos.length; i < l; ++i) {
              var handlerInfo = handlerInfos[i];
              handlerInfos[i] = handlerInfos[i].getUnresolved();
            }
          },

          getHandlerInfoForDynamicSegment: function(name, handler, names, objects, oldHandlerInfo, targetRouteName, i) {

            var numNames = names.length;
            var objectToUse;
            if (objects.length > 0) {

              // Use the objects provided for this transition.
              objectToUse = objects[objects.length - 1];
              if ($$utils$$isParam(objectToUse)) {
                return this.createParamHandlerInfo(name, handler, names, objects, oldHandlerInfo);
              } else {
                objects.pop();
              }
            } else if (oldHandlerInfo && oldHandlerInfo.name === name) {
              // Reuse the matching oldHandlerInfo
              return oldHandlerInfo;
            } else {
              if (this.preTransitionState) {
                var preTransitionHandlerInfo = this.preTransitionState.handlerInfos[i];
                objectToUse = preTransitionHandlerInfo && preTransitionHandlerInfo.context;
              } else {
                // Ideally we should throw this error to provide maximal
                // information to the user that not enough context objects
                // were provided, but this proves too cumbersome in Ember
                // in cases where inner template helpers are evaluated
                // before parent helpers un-render, in which cases this
                // error somewhat prematurely fires.
                //throw new Error("Not enough context objects were provided to complete a transition to " + targetRouteName + ". Specifically, the " + name + " route needs an object that can be serialized into its dynamic URL segments [" + names.join(', ') + "]");
                return oldHandlerInfo;
              }
            }

            return $$$handler$info$factory$$default('object', {
              name: name,
              handler: handler,
              context: objectToUse,
              names: names
            });
          },

          createParamHandlerInfo: function(name, handler, names, objects, oldHandlerInfo) {
            var params = {};

            // Soak up all the provided string/numbers
            var numNames = names.length;
            while (numNames--) {

              // Only use old params if the names match with the new handler
              var oldParams = (oldHandlerInfo && name === oldHandlerInfo.name && oldHandlerInfo.params) || {};

              var peek = objects[objects.length - 1];
              var paramName = names[numNames];
              if ($$utils$$isParam(peek)) {
                params[paramName] = "" + objects.pop();
              } else {
                // If we're here, this means only some of the params
                // were string/number params, so try and use a param
                // value from a previous handler.
                if (oldParams.hasOwnProperty(paramName)) {
                  params[paramName] = oldParams[paramName];
                } else {
                  throw new Error("You didn't provide enough string/numeric parameters to satisfy all of the dynamic segments for route " + name);
                }
              }
            }

            return $$$handler$info$factory$$default('param', {
              name: name,
              handler: handler,
              params: params
            });
          }
        });
    }).call(this);

    (function() {
        $$transition$intent$url$transition$intent$$default = $$utils$$subclass($$$transition$intent$$default, {
          url: null,

          initialize: function(props) {
            this.url = props.url;
          },

          applyToState: function(oldState, recognizer, getHandler) {
            var newState = new $$transition$state$$default();

            var results = recognizer.recognize(this.url),
                queryParams = {},
                i, len;

            if (!results) {
              throw new UnrecognizedURLError(this.url);
            }

            var statesDiffer = false;

            for (i = 0, len = results.length; i < len; ++i) {
              var result = results[i];
              var name = result.handler;
              var handler = getHandler(name);

              if (handler.inaccessibleByURL) {
                throw new UnrecognizedURLError(this.url);
              }

              var newHandlerInfo = $$$handler$info$factory$$default('param', {
                name: name,
                handler: handler,
                params: result.params
              });

              var oldHandlerInfo = oldState.handlerInfos[i];
              if (statesDiffer || newHandlerInfo.shouldSupercede(oldHandlerInfo)) {
                statesDiffer = true;
                newState.handlerInfos[i] = newHandlerInfo;
              } else {
                newState.handlerInfos[i] = oldHandlerInfo;
              }
            }

            $$utils$$merge(newState.queryParams, results.queryParams);

            return newState;
          }
        });

        /**
          Promise reject reasons passed to promise rejection
          handlers for failed transitions.
         */
        function UnrecognizedURLError(message) {
          this.message = (message || "UnrecognizedURLError");
          this.name = "UnrecognizedURLError";
        }
    }).call(this);

    (function() {
        var pop = Array.prototype.pop;

        function Router() {
          this.recognizer = new route$recognizer$$default();
          this.reset();
        }

        Router.prototype = {

          /**
            The main entry point into the router. The API is essentially
            the same as the `map` method in `route-recognizer`.

            This method extracts the String handler at the last `.to()`
            call and uses it as the name of the whole route.

            @param {Function} callback
          */
          map: function(callback) {
            this.recognizer.delegate = this.delegate;

            this.recognizer.map(callback, function(recognizer, routes) {
              for (var i = routes.length - 1, proceed = true; i >= 0 && proceed; --i) {
                var route = routes[i];
                recognizer.add(routes, { as: route.handler });
                proceed = route.path === '/' || route.path === '' || route.handler.slice(-6) === '.index';
              }
            });
          },

          hasRoute: function(route) {
            return this.recognizer.hasRoute(route);
          },

          queryParamsTransition: function(changelist, wasTransitioning, oldState, newState) {
            var router = this;

            // This is a little hacky but we need some way of storing
            // changed query params given that no activeTransition
            // is guaranteed to have occurred.
            this._changedQueryParams = changelist.changed;
            for (var k in changelist.removed) {
              if (changelist.removed.hasOwnProperty(k)) {
                this._changedQueryParams[k] = null;
              }
            }
            fireQueryParamDidChange(this, newState, changelist);
            this._changedQueryParams = null;

            if (!wasTransitioning && this.activeTransition) {
              // One of the handlers in queryParamsDidChange
              // caused a transition. Just return that transition.
              return this.activeTransition;
            } else {
              // Running queryParamsDidChange didn't change anything.
              // Just update query params and be on our way.

              // We have to return a noop transition that will
              // perform a URL update at the end. This gives
              // the user the ability to set the url update
              // method (default is replaceState).
              var newTransition = new router$transition$$Transition(this);
              newTransition.queryParamsOnly = true;

              oldState.queryParams = finalizeQueryParamChange(this, newState.handlerInfos, newState.queryParams, newTransition);

              newTransition.promise = newTransition.promise.then(function(result) {
                updateURL(newTransition, oldState, true);
                if (router.didTransition) {
                  router.didTransition(router.currentHandlerInfos);
                }
                return result;
              }, null, $$utils$$promiseLabel("Transition complete"));
              return newTransition;
            }
          },

          // NOTE: this doesn't really belong here, but here
          // it shall remain until our ES6 transpiler can
          // handle cyclical deps.
          transitionByIntent: function(intent, isIntermediate) {

            var wasTransitioning = !!this.activeTransition;
            var oldState = wasTransitioning ? this.activeTransition.state : this.state;
            var newTransition;
            var router = this;

            try {
              var newState = intent.applyToState(oldState, this.recognizer, this.getHandler, isIntermediate);
              var queryParamChangelist = $$utils$$getChangelist(oldState.queryParams, newState.queryParams);

              if (handlerInfosEqual(newState.handlerInfos, oldState.handlerInfos)) {

                // This is a no-op transition. See if query params changed.
                if (queryParamChangelist) {
                  newTransition = this.queryParamsTransition(queryParamChangelist, wasTransitioning, oldState, newState);
                  if (newTransition) {
                    return newTransition;
                  }
                }

                // No-op. No need to create a new transition.
                return new router$transition$$Transition(this);
              }

              if (isIntermediate) {
                setupContexts(this, newState);
                return;
              }

              // Create a new transition to the destination route.
              newTransition = new router$transition$$Transition(this, intent, newState);

              // Abort and usurp any previously active transition.
              if (this.activeTransition) {
                this.activeTransition.abort();
              }
              this.activeTransition = newTransition;

              // Transition promises by default resolve with resolved state.
              // For our purposes, swap out the promise to resolve
              // after the transition has been finalized.
              newTransition.promise = newTransition.promise.then(function(result) {
                return finalizeTransition(newTransition, result.state);
              }, null, $$utils$$promiseLabel("Settle transition promise when transition is finalized"));

              if (!wasTransitioning) {
                notifyExistingHandlers(this, newState, newTransition);
              }

              fireQueryParamDidChange(this, newState, queryParamChangelist);

              return newTransition;
            } catch(e) {
              return new router$transition$$Transition(this, intent, null, e);
            }
          },

          /**
            Clears the current and target route handlers and triggers exit
            on each of them starting at the leaf and traversing up through
            its ancestors.
          */
          reset: function() {
            if (this.state) {
              $$utils$$forEach(this.state.handlerInfos, function(handlerInfo) {
                var handler = handlerInfo.handler;
                if (handler.exit) {
                  handler.exit();
                }
              });
            }

            this.state = new $$transition$state$$default();
            this.currentHandlerInfos = null;
          },

          activeTransition: null,

          /**
            var handler = handlerInfo.handler;
            The entry point for handling a change to the URL (usually
            via the back and forward button).

            Returns an Array of handlers and the parameters associated
            with those parameters.

            @param {String} url a URL to process

            @return {Array} an Array of `[handler, parameter]` tuples
          */
          handleURL: function(url) {
            // Perform a URL-based transition, but don't change
            // the URL afterward, since it already happened.
            var args = $$utils$$slice.call(arguments);
            if (url.charAt(0) !== '/') { args[0] = '/' + url; }

            return doTransition(this, args).method(null);
          },

          /**
            Hook point for updating the URL.

            @param {String} url a URL to update to
          */
          updateURL: function() {
            throw new Error("updateURL is not implemented");
          },

          /**
            Hook point for replacing the current URL, i.e. with replaceState

            By default this behaves the same as `updateURL`

            @param {String} url a URL to update to
          */
          replaceURL: function(url) {
            this.updateURL(url);
          },

          /**
            Transition into the specified named route.

            If necessary, trigger the exit callback on any handlers
            that are no longer represented by the target route.

            @param {String} name the name of the route
          */
          transitionTo: function(name) {
            return doTransition(this, arguments);
          },

          intermediateTransitionTo: function(name) {
            doTransition(this, arguments, true);
          },

          refresh: function(pivotHandler) {


            var state = this.activeTransition ? this.activeTransition.state : this.state;
            var handlerInfos = state.handlerInfos;
            var params = {};
            for (var i = 0, len = handlerInfos.length; i < len; ++i) {
              var handlerInfo = handlerInfos[i];
              params[handlerInfo.name] = handlerInfo.params || {};
            }

            $$utils$$log(this, "Starting a refresh transition");
            var intent = new $$transition$intent$named$transition$intent$$default({
              name: handlerInfos[handlerInfos.length - 1].name,
              pivotHandler: pivotHandler || handlerInfos[0].handler,
              contexts: [], // TODO collect contexts...?
              queryParams: this._changedQueryParams || state.queryParams || {}
            });

            return this.transitionByIntent(intent, false);
          },

          /**
            Identical to `transitionTo` except that the current URL will be replaced
            if possible.

            This method is intended primarily for use with `replaceState`.

            @param {String} name the name of the route
          */
          replaceWith: function(name) {
            return doTransition(this, arguments).method('replace');
          },

          /**
            Take a named route and context objects and generate a
            URL.

            @param {String} name the name of the route to generate
              a URL for
            @param {...Object} objects a list of objects to serialize

            @return {String} a URL
          */
          generate: function(handlerName) {

            var partitionedArgs = $$utils$$extractQueryParams($$utils$$slice.call(arguments, 1)),
              suppliedParams = partitionedArgs[0],
              queryParams = partitionedArgs[1];

            // Construct a TransitionIntent with the provided params
            // and apply it to the present state of the router.
            var intent = new $$transition$intent$named$transition$intent$$default({ name: handlerName, contexts: suppliedParams });
            var state = intent.applyToState(this.state, this.recognizer, this.getHandler);
            var params = {};

            for (var i = 0, len = state.handlerInfos.length; i < len; ++i) {
              var handlerInfo = state.handlerInfos[i];
              var handlerParams = handlerInfo.serialize();
              $$utils$$merge(params, handlerParams);
            }
            params.queryParams = queryParams;

            return this.recognizer.generate(handlerName, params);
          },

          applyIntent: function(handlerName, contexts) {
            var intent = new $$transition$intent$named$transition$intent$$default({
              name: handlerName,
              contexts: contexts
            });

            var state = this.activeTransition && this.activeTransition.state || this.state;
            return intent.applyToState(state, this.recognizer, this.getHandler);
          },

          isActiveIntent: function(handlerName, contexts, queryParams) {
            var targetHandlerInfos = this.state.handlerInfos,
                found = false, names, object, handlerInfo, handlerObj, i, len;

            if (!targetHandlerInfos.length) { return false; }

            var targetHandler = targetHandlerInfos[targetHandlerInfos.length - 1].name;
            var recogHandlers = this.recognizer.handlersFor(targetHandler);

            var index = 0;
            for (len = recogHandlers.length; index < len; ++index) {
              handlerInfo = targetHandlerInfos[index];
              if (handlerInfo.name === handlerName) { break; }
            }

            if (index === recogHandlers.length) {
              // The provided route name isn't even in the route hierarchy.
              return false;
            }

            var state = new $$transition$state$$default();
            state.handlerInfos = targetHandlerInfos.slice(0, index + 1);
            recogHandlers = recogHandlers.slice(0, index + 1);

            var intent = new $$transition$intent$named$transition$intent$$default({
              name: targetHandler,
              contexts: contexts
            });

            var newState = intent.applyToHandlers(state, recogHandlers, this.getHandler, targetHandler, true, true);

            var handlersEqual = handlerInfosEqual(newState.handlerInfos, state.handlerInfos);
            if (!queryParams || !handlersEqual) {
              return handlersEqual;
            }

            // Get a hash of QPs that will still be active on new route
            var activeQPsOnNewHandler = {};
            $$utils$$merge(activeQPsOnNewHandler, queryParams);

            var activeQueryParams  = this.state.queryParams;
            for (var key in activeQueryParams) {
              if (activeQueryParams.hasOwnProperty(key) &&
                  activeQPsOnNewHandler.hasOwnProperty(key)) {
                activeQPsOnNewHandler[key] = activeQueryParams[key];
              }
            }

            return handlersEqual && !$$utils$$getChangelist(activeQPsOnNewHandler, queryParams);
          },

          isActive: function(handlerName) {
            var partitionedArgs = $$utils$$extractQueryParams($$utils$$slice.call(arguments, 1));
            return this.isActiveIntent(handlerName, partitionedArgs[0], partitionedArgs[1]);
          },

          trigger: function(name) {
            var args = $$utils$$slice.call(arguments);
            $$utils$$trigger(this, this.currentHandlerInfos, false, args);
          },

          /**
            Hook point for logging transition status updates.

            @param {String} message The message to log.
          */
          log: null,

          _willChangeContextEvent: 'willChangeContext',
          _triggerWillChangeContext: function(handlerInfos, newTransition) {
            $$utils$$trigger(this, handlerInfos, true, [this._willChangeContextEvent, newTransition]);
          },

          _triggerWillLeave: function(handlerInfos, newTransition, leavingChecker) {
            $$utils$$trigger(this, handlerInfos, true, ['willLeave', newTransition, leavingChecker]);
          }
        };

        /**
          @private

          Fires queryParamsDidChange event
        */
        function fireQueryParamDidChange(router, newState, queryParamChangelist) {
          // If queryParams changed trigger event
          if (queryParamChangelist) {

            // This is a little hacky but we need some way of storing
            // changed query params given that no activeTransition
            // is guaranteed to have occurred.
            router._changedQueryParams = queryParamChangelist.changed;
            for (var i in queryParamChangelist.removed) {
              if (queryParamChangelist.removed.hasOwnProperty(i)) {
                router._changedQueryParams[i] = null;
              }
            }
            $$utils$$trigger(router, newState.handlerInfos, true, ['queryParamsDidChange', queryParamChangelist.changed, queryParamChangelist.all, queryParamChangelist.removed]);
            router._changedQueryParams = null;
          }
        }

        /**
          @private

          Takes an Array of `HandlerInfo`s, figures out which ones are
          exiting, entering, or changing contexts, and calls the
          proper handler hooks.

          For example, consider the following tree of handlers. Each handler is
          followed by the URL segment it handles.

          ```
          |~index ("/")
          | |~posts ("/posts")
          | | |-showPost ("/:id")
          | | |-newPost ("/new")
          | | |-editPost ("/edit")
          | |~about ("/about/:id")
          ```

          Consider the following transitions:

          1. A URL transition to `/posts/1`.
             1. Triggers the `*model` callbacks on the
                `index`, `posts`, and `showPost` handlers
             2. Triggers the `enter` callback on the same
             3. Triggers the `setup` callback on the same
          2. A direct transition to `newPost`
             1. Triggers the `exit` callback on `showPost`
             2. Triggers the `enter` callback on `newPost`
             3. Triggers the `setup` callback on `newPost`
          3. A direct transition to `about` with a specified
             context object
             1. Triggers the `exit` callback on `newPost`
                and `posts`
             2. Triggers the `serialize` callback on `about`
             3. Triggers the `enter` callback on `about`
             4. Triggers the `setup` callback on `about`

          @param {Router} transition
          @param {TransitionState} newState
        */
        function setupContexts(router, newState, transition) {
          var partition = partitionHandlers(router.state, newState);

          $$utils$$forEach(partition.exited, function(handlerInfo) {
            var handler = handlerInfo.handler;
            delete handler.context;
            if (handler.exit) { handler.exit(); }
          });

          var oldState = router.oldState = router.state;
          router.state = newState;
          var currentHandlerInfos = router.currentHandlerInfos = partition.unchanged.slice();

          try {
            $$utils$$forEach(partition.updatedContext, function(handlerInfo) {
              return handlerEnteredOrUpdated(currentHandlerInfos, handlerInfo, false, transition);
            });

            $$utils$$forEach(partition.entered, function(handlerInfo) {
              return handlerEnteredOrUpdated(currentHandlerInfos, handlerInfo, true, transition);
            });
          } catch(e) {
            router.state = oldState;
            router.currentHandlerInfos = oldState.handlerInfos;
            throw e;
          }

          router.state.queryParams = finalizeQueryParamChange(router, currentHandlerInfos, newState.queryParams, transition);
        }

        /**
          @private

          Helper method used by setupContexts. Handles errors or redirects
          that may happen in enter/setup.
        */
        function handlerEnteredOrUpdated(currentHandlerInfos, handlerInfo, enter, transition) {

          var handler = handlerInfo.handler,
              context = handlerInfo.context;

          if (enter && handler.enter) { handler.enter(transition); }
          if (transition && transition.isAborted) {
            throw new router$transition$$TransitionAborted();
          }

          handler.context = context;
          if (handler.contextDidChange) { handler.contextDidChange(); }

          if (handler.setup) { handler.setup(context, transition); }
          if (transition && transition.isAborted) {
            throw new router$transition$$TransitionAborted();
          }

          currentHandlerInfos.push(handlerInfo);

          return true;
        }

        /**
          @private

          This function is called when transitioning from one URL to
          another to determine which handlers are no longer active,
          which handlers are newly active, and which handlers remain
          active but have their context changed.

          Take a list of old handlers and new handlers and partition
          them into four buckets:

          * unchanged: the handler was active in both the old and
            new URL, and its context remains the same
          * updated context: the handler was active in both the
            old and new URL, but its context changed. The handler's
            `setup` method, if any, will be called with the new
            context.
          * exited: the handler was active in the old URL, but is
            no longer active.
          * entered: the handler was not active in the old URL, but
            is now active.

          The PartitionedHandlers structure has four fields:

          * `updatedContext`: a list of `HandlerInfo` objects that
            represent handlers that remain active but have a changed
            context
          * `entered`: a list of `HandlerInfo` objects that represent
            handlers that are newly active
          * `exited`: a list of `HandlerInfo` objects that are no
            longer active.
          * `unchanged`: a list of `HanderInfo` objects that remain active.

          @param {Array[HandlerInfo]} oldHandlers a list of the handler
            information for the previous URL (or `[]` if this is the
            first handled transition)
          @param {Array[HandlerInfo]} newHandlers a list of the handler
            information for the new URL

          @return {Partition}
        */
        function partitionHandlers(oldState, newState) {
          var oldHandlers = oldState.handlerInfos;
          var newHandlers = newState.handlerInfos;

          var handlers = {
                updatedContext: [],
                exited: [],
                entered: [],
                unchanged: []
              };

          var handlerChanged, contextChanged, queryParamsChanged, i, l;

          for (i=0, l=newHandlers.length; i<l; i++) {
            var oldHandler = oldHandlers[i], newHandler = newHandlers[i];

            if (!oldHandler || oldHandler.handler !== newHandler.handler) {
              handlerChanged = true;
            }

            if (handlerChanged) {
              handlers.entered.push(newHandler);
              if (oldHandler) { handlers.exited.unshift(oldHandler); }
            } else if (contextChanged || oldHandler.context !== newHandler.context || queryParamsChanged) {
              contextChanged = true;
              handlers.updatedContext.push(newHandler);
            } else {
              handlers.unchanged.push(oldHandler);
            }
          }

          for (i=newHandlers.length, l=oldHandlers.length; i<l; i++) {
            handlers.exited.unshift(oldHandlers[i]);
          }

          return handlers;
        }

        function updateURL(transition, state, inputUrl) {
          var urlMethod = transition.urlMethod;

          if (!urlMethod) {
            return;
          }

          var router = transition.router,
              handlerInfos = state.handlerInfos,
              handlerName = handlerInfos[handlerInfos.length - 1].name,
              params = {};

          for (var i = handlerInfos.length - 1; i >= 0; --i) {
            var handlerInfo = handlerInfos[i];
            $$utils$$merge(params, handlerInfo.params);
            if (handlerInfo.handler.inaccessibleByURL) {
              urlMethod = null;
            }
          }

          if (urlMethod) {
            params.queryParams = transition._visibleQueryParams || state.queryParams;
            var url = router.recognizer.generate(handlerName, params);

            if (urlMethod === 'replace') {
              router.replaceURL(url);
            } else {
              router.updateURL(url);
            }
          }
        }

        /**
          @private

          Updates the URL (if necessary) and calls `setupContexts`
          to update the router's array of `currentHandlerInfos`.
         */
        function finalizeTransition(transition, newState) {

          try {
            $$utils$$log(transition.router, transition.sequence, "Resolved all models on destination route; finalizing transition.");

            var router = transition.router,
                handlerInfos = newState.handlerInfos,
                seq = transition.sequence;

            // Run all the necessary enter/setup/exit hooks
            setupContexts(router, newState, transition);

            // Check if a redirect occurred in enter/setup
            if (transition.isAborted) {
              // TODO: cleaner way? distinguish b/w targetHandlerInfos?
              router.state.handlerInfos = router.currentHandlerInfos;
              return rsvp$promise$$default.reject(router$transition$$logAbort(transition));
            }

            updateURL(transition, newState, transition.intent.url);

            transition.isActive = false;
            router.activeTransition = null;

            $$utils$$trigger(router, router.currentHandlerInfos, true, ['didTransition']);

            if (router.didTransition) {
              router.didTransition(router.currentHandlerInfos);
            }

            $$utils$$log(router, transition.sequence, "TRANSITION COMPLETE.");

            // Resolve with the final handler.
            return handlerInfos[handlerInfos.length - 1].handler;
          } catch(e) {
            if (!(e instanceof router$transition$$TransitionAborted)) {
              //var erroneousHandler = handlerInfos.pop();
              var infos = transition.state.handlerInfos;
              transition.trigger(true, 'error', e, transition, infos[infos.length-1].handler);
              transition.abort();
            }

            throw e;
          }
        }

        /**
          @private

          Begins and returns a Transition based on the provided
          arguments. Accepts arguments in the form of both URL
          transitions and named transitions.

          @param {Router} router
          @param {Array[Object]} args arguments passed to transitionTo,
            replaceWith, or handleURL
        */
        function doTransition(router, args, isIntermediate) {
          // Normalize blank transitions to root URL transitions.
          var name = args[0] || '/';

          var lastArg = args[args.length-1];
          var queryParams = {};
          if (lastArg && lastArg.hasOwnProperty('queryParams')) {
            queryParams = pop.call(args).queryParams;
          }

          var intent;
          if (args.length === 0) {

            $$utils$$log(router, "Updating query params");

            // A query param update is really just a transition
            // into the route you're already on.
            var handlerInfos = router.state.handlerInfos;
            intent = new $$transition$intent$named$transition$intent$$default({
              name: handlerInfos[handlerInfos.length - 1].name,
              contexts: [],
              queryParams: queryParams
            });

          } else if (name.charAt(0) === '/') {

            $$utils$$log(router, "Attempting URL transition to " + name);
            intent = new $$transition$intent$url$transition$intent$$default({ url: name });

          } else {

            $$utils$$log(router, "Attempting transition to " + name);
            intent = new $$transition$intent$named$transition$intent$$default({
              name: args[0],
              contexts: $$utils$$slice.call(args, 1),
              queryParams: queryParams
            });
          }

          return router.transitionByIntent(intent, isIntermediate);
        }

        function handlerInfosEqual(handlerInfos, otherHandlerInfos) {
          if (handlerInfos.length !== otherHandlerInfos.length) {
            return false;
          }

          for (var i = 0, len = handlerInfos.length; i < len; ++i) {
            if (handlerInfos[i] !== otherHandlerInfos[i]) {
              return false;
            }
          }
          return true;
        }

        function finalizeQueryParamChange(router, resolvedHandlers, newQueryParams, transition) {
          // We fire a finalizeQueryParamChange event which
          // gives the new route hierarchy a chance to tell
          // us which query params it's consuming and what
          // their final values are. If a query param is
          // no longer consumed in the final route hierarchy,
          // its serialized segment will be removed
          // from the URL.

          for (var k in newQueryParams) {
            if (newQueryParams.hasOwnProperty(k) &&
                newQueryParams[k] === null) {
              delete newQueryParams[k];
            }
          }

          var finalQueryParamsArray = [];
          $$utils$$trigger(router, resolvedHandlers, true, ['finalizeQueryParamChange', newQueryParams, finalQueryParamsArray, transition]);

          if (transition) {
            transition._visibleQueryParams = {};
          }

          var finalQueryParams = {};
          for (var i = 0, len = finalQueryParamsArray.length; i < len; ++i) {
            var qp = finalQueryParamsArray[i];
            finalQueryParams[qp.key] = qp.value;
            if (transition && qp.visible !== false) {
              transition._visibleQueryParams[qp.key] = qp.value;
            }
          }
          return finalQueryParams;
        }

        function notifyExistingHandlers(router, newState, newTransition) {
          var oldHandlers = router.state.handlerInfos,
              changing = [],
              leavingIndex = null,
              leaving, leavingChecker, i, oldHandler, newHandler;

          for (i = 0; i < oldHandlers.length; i++) {
            oldHandler = oldHandlers[i];
            newHandler = newState.handlerInfos[i];

            if (!newHandler || oldHandler.name !== newHandler.name) {
              leavingIndex = i;
              break;
            }

            if (!newHandler.isResolved) {
              changing.push(oldHandler);
            }
          }

          if (leavingIndex !== null) {
            leaving = oldHandlers.slice(leavingIndex, oldHandlers.length);
            leavingChecker = function(name) {
              for (var h = 0; h < leaving.length; h++) {
                if (leaving[h].name === name) {
                  return true;
                }
              }
              return false;
            };

            router._triggerWillLeave(leaving, newTransition, leavingChecker);
          }

          if (changing.length > 0) {
            router._triggerWillChangeContext(changing, newTransition);
          }

          $$utils$$trigger(router, oldHandlers, true, ['willTransition', newTransition]);
        }

        $$router$$default = Router;
    }).call(this);

    (function() {
        router$$default = $$router$$default;
    }).call(this);

    (function() {
        var slice = [].slice;
        var forEach = ember$metal$enumerable_utils$$default.forEach;
        var DefaultView = ember$handlebars$views$metamorph_view$$_MetamorphView;

        /**
          The `Ember.Router` class manages the application state and URLs. Refer to
          the [routing guide](http://emberjs.com/guides/routing/) for documentation.

          @class Router
          @namespace Ember
          @extends Ember.Object
        */
        var EmberRouter = ember$runtime$system$object$$default.extend(ember$runtime$mixins$evented$$default, {
          /**
            The `location` property determines the type of URL's that your
            application will use.

            The following location types are currently available:

            * `hash`
            * `history`
            * `none`

            @property location
            @default 'hash'
            @see {Ember.Location}
          */
          location: 'hash',

          /**
           Represents the URL of the root of the application, often '/'. This prefix is
           assumed on all routes defined on this router.

           @property rootURL
           @default '/'
          */
          rootURL: '/',

          init: function() {
            this.router = this.constructor.router || this.constructor.map(ember$metal$core$$default.K);
            this._activeViews = {};
            this._setupLocation();
            this._qpCache = {};
            this._queuedQPChanges = {};

            if (ember$metal$property_get$$get(this, 'namespace.LOG_TRANSITIONS_INTERNAL')) {
              this.router.log = ember$metal$core$$default.Logger.debug;
            }
          },

          /**
            Represents the current URL.

            @method url
            @return {String} The current URL.
          */
          url: ember$metal$computed$$computed(function() {
            return ember$metal$property_get$$get(this, 'location').getURL();
          }),

          /**
            Initializes the current router instance and sets up the change handling
            event listeners used by the instances `location` implementation.

            A property named `initialURL` will be used to determine the initial URL.
            If no value is found `/` will be used.

            @method startRouting
            @private
          */
          startRouting: function() {
            this.router = this.router || this.constructor.map(ember$metal$core$$default.K);

            var router = this.router,
                location = ember$metal$property_get$$get(this, 'location'),
                container = this.container,
                self = this,
                initialURL = ember$metal$property_get$$get(this, 'initialURL');

            // Allow the Location class to cancel the router setup while it refreshes
            // the page
            if (ember$metal$property_get$$get(location, 'cancelRouterSetup')) {
              return;
            }

            this._setupRouter(router, location);

            container.register('view:default', DefaultView);
            container.register('view:toplevel', ember$views$views$view$$View.extend());

            location.onUpdateURL(function(url) {
              self.handleURL(url);
            });

            if (typeof initialURL === "undefined") {
              initialURL = location.getURL();
            }

            this.handleURL(initialURL);
          },

          /**
            Handles updating the paths and notifying any listeners of the URL
            change.

            Triggers the router level `didTransition` hook.

            @method didTransition
            @private
            @since 1.2.0
          */
          didTransition: function(infos) {
            updatePaths(this);

            this._cancelLoadingEvent();

            this.notifyPropertyChange('url');

            // Put this in the runloop so url will be accurate. Seems
            // less surprising than didTransition being out of sync.
            ember$metal$run_loop$$default.once(this, this.trigger, 'didTransition');

            if (ember$metal$property_get$$get(this, 'namespace').LOG_TRANSITIONS) {
              ember$metal$core$$default.Logger.log("Transitioned into '" + EmberRouter._routePath(infos) + "'");
            }
          },

          handleURL: function(url) {
            return this._doTransition('handleURL', [url]);
          },

          transitionTo: function() {
            return this._doTransition('transitionTo', arguments);
          },

          intermediateTransitionTo: function() {
            this.router.intermediateTransitionTo.apply(this.router, arguments);

            updatePaths(this);

            var infos = this.router.currentHandlerInfos;
            if (ember$metal$property_get$$get(this, 'namespace').LOG_TRANSITIONS) {
              ember$metal$core$$default.Logger.log("Intermediate-transitioned into '" + EmberRouter._routePath(infos) + "'");
            }
          },

          replaceWith: function() {
            return this._doTransition('replaceWith', arguments);
          },

          generate: function() {
            var url = this.router.generate.apply(this.router, arguments);
            return this.location.formatURL(url);
          },

          /**
            Determines if the supplied route is currently active.

            @method isActive
            @param routeName
            @return {Boolean}
            @private
          */
          isActive: function(routeName) {
            var router = this.router;
            return router.isActive.apply(router, arguments);
          },

          send: function(name, context) {
            this.router.trigger.apply(this.router, arguments);
          },

          /**
            Does this router instance have the given route.

            @method hasRoute
            @return {Boolean}
            @private
          */
          hasRoute: function(route) {
            return this.router.hasRoute(route);
          },

          /**
            Resets the state of the router by clearing the current route
            handlers and deactivating them.

            @private
            @method reset
           */
          reset: function() {
            this.router.reset();
          },

          _lookupActiveView: function(templateName) {
            var active = this._activeViews[templateName];
            return active && active[0];
          },

          _connectActiveView: function(templateName, view) {
            var existing = this._activeViews[templateName];

            if (existing) {
              existing[0].off('willDestroyElement', this, existing[1]);
            }

            function disconnectActiveView() {
              delete this._activeViews[templateName];
            }

            this._activeViews[templateName] = [view, disconnectActiveView];
            view.one('willDestroyElement', this, disconnectActiveView);
          },

          _setupLocation: function() {
            var location = ember$metal$property_get$$get(this, 'location'),
                rootURL = ember$metal$property_get$$get(this, 'rootURL');

            if (rootURL && !this.container.has('-location-setting:root-url')) {
              this.container.register('-location-setting:root-url', rootURL, { instantiate: false });
            }

            if ('string' === typeof location && this.container) {
              var resolvedLocation = this.container.lookup('location:' + location);

              if ('undefined' !== typeof resolvedLocation) {
                location = ember$metal$property_set$$set(this, 'location', resolvedLocation);
              } else {
                // Allow for deprecated registration of custom location API's
                var options = {implementation: location};

                location = ember$metal$property_set$$set(this, 'location', ember$routing$location$api$$default.create(options));
              }
            }

            if (rootURL && typeof rootURL === 'string') {
              location.rootURL = rootURL;
            }

            // ensure that initState is called AFTER the rootURL is set on
            // the location instance
            if (typeof location.initState === 'function') { location.initState(); }
          },

          _getHandlerFunction: function() {
            var seen = {}, container = this.container,
                DefaultRoute = container.lookupFactory('route:basic'),
                self = this;

            return function(name) {
              var routeName = 'route:' + name,
                  handler = container.lookup(routeName);

              if (seen[name]) { return handler; }

              seen[name] = true;

              if (!handler) {
                container.register(routeName, DefaultRoute.extend());
                handler = container.lookup(routeName);

                if (ember$metal$property_get$$get(self, 'namespace.LOG_ACTIVE_GENERATION')) {
                  ember$metal$core$$default.Logger.info("generated -> " + routeName, { fullName: routeName });
                }
              }

              handler.routeName = name;
              return handler;
            };
          },

          _setupRouter: function(router, location) {
            var lastURL, emberRouter = this;

            router.getHandler = this._getHandlerFunction();

            var doUpdateURL = function() {
              location.setURL(lastURL);
            };

            router.updateURL = function(path) {
              lastURL = path;
              ember$metal$run_loop$$default.once(doUpdateURL);
            };

            if (location.replaceURL) {
              var doReplaceURL = function() {
                location.replaceURL(lastURL);
              };

              router.replaceURL = function(path) {
                lastURL = path;
                ember$metal$run_loop$$default.once(doReplaceURL);
              };
            }

            router.didTransition = function(infos) {
              emberRouter.didTransition(infos);
            };
          },

          _doTransition: function(method, args) {
            // Normalize blank route to root URL.
            args = slice.call(args);
            args[0] = args[0] || '/';

            var name = args[0], self = this,
              isQueryParamsOnly = false, queryParams;

            if (ember$metal$core$$default.FEATURES.isEnabled("query-params-new")) {

              var possibleQueryParamArg = args[args.length - 1];
              if (possibleQueryParamArg && possibleQueryParamArg.hasOwnProperty('queryParams')) {
                if (args.length === 1) {
                  isQueryParamsOnly = true;
                  name = null;
                }
                queryParams = args[args.length - 1].queryParams;
              }
            }

            if (!isQueryParamsOnly && name.charAt(0) !== '/') {
              ember$metal$core$$default.assert("The route " + name + " was not found", this.router.hasRoute(name));
            }

            if (queryParams) {
              // router.js expects queryParams to be passed in in
              // their final serialized form, so we need to translate.

              if (!name) {
                // Need to determine destination route name.
                var handlerInfos = this.router.activeTransition ?
                                   this.router.activeTransition.state.handlerInfos :
                                   this.router.state.handlerInfos;
                name = handlerInfos[handlerInfos.length - 1].name;
                args.unshift(name);
              }

              var qpCache = this._queryParamsFor(name), qps = qpCache.qps;

              var finalParams = {};
              for (var key in queryParams) {
                if (!queryParams.hasOwnProperty(key)) { continue; }
                var inputValue = queryParams[key],
                    qp = qpCache.map[key];

                if (!qp) {
                  throw new ember$metal$error$$default("Unrecognized query param " + key + " provided as transition argument");
                }
                finalParams[qp.urlKey] = qp.route.serializeQueryParam(inputValue, qp.urlKey, qp.type);
              }

              // Perform any necessary serialization.
              args[args.length-1].queryParams = finalParams;
            }

            var transitionPromise = this.router[method].apply(this.router, args);

            transitionPromise.then(null, function(error) {
              if (!error || !error.name) { return; }

              if (error.name === "UnrecognizedURLError") {
                ember$metal$core$$default.assert("The URL '" + error.message + "' did not match any routes in your application");
              } else if (error.name === 'TransitionAborted') {
                // just ignore TransitionAborted here
              } else {
                throw error;
              }

              return error;
            }, 'Ember: Process errors from Router');

            // We want to return the configurable promise object
            // so that callers of this function can use `.method()` on it,
            // which obviously doesn't exist for normal RSVP promises.
            return transitionPromise;
          },

          _queryParamsFor: function(leafRouteName) {
            if (this._qpCache[leafRouteName]) {
              return this._qpCache[leafRouteName];
            }

            var map = {}, qps = [], qpCache = this._qpCache[leafRouteName] = {
              map: map,
              qps: qps
            };

            var routerjs = this.router,
                recogHandlerInfos = routerjs.recognizer.handlersFor(leafRouteName);

            for (var i = 0, len = recogHandlerInfos.length; i < len; ++i) {
              var recogHandler = recogHandlerInfos[i],
                  route = routerjs.getHandler(recogHandler.handler),
                  qpMeta = ember$metal$property_get$$get(route, '_qp');

              if (!qpMeta) { continue; }

              ember$metal$merge$$default(map, qpMeta.map);
              qps.push.apply(qps, qpMeta.qps);
            }

            return {
              qps: qps,
              map: map
            };
          },

          _scheduleLoadingEvent: function(transition, originRoute) {
            this._cancelLoadingEvent();
            this._loadingStateTimer = ember$metal$run_loop$$default.scheduleOnce('routerTransitions', this, '_fireLoadingEvent', transition, originRoute);
          },

          _fireLoadingEvent: function(transition, originRoute) {
            if (!this.router.activeTransition) {
              // Don't fire an event if we've since moved on from
              // the transition that put us in a loading state.
              return;
            }

            transition.trigger(true, 'loading', transition, originRoute);
          },

          _cancelLoadingEvent: function () {
            if (this._loadingStateTimer) {
              ember$metal$run_loop$$default.cancel(this._loadingStateTimer);
            }
            this._loadingStateTimer = null;
          }
        });

        function controllerOrProtoFor(controllerName, container, getProto) {
          var fullName = container.normalize('controller:' + controllerName);
          if (!getProto && container.cache.has(fullName)) {
            return container.lookup(fullName);
          } else {
            // Controller hasn't been instantiated yet; just return its proto.
            var controllerClass = container.lookupFactory(fullName);
            if (controllerClass && typeof controllerClass.proto === 'function') {
              return controllerClass.proto();
            } else {
              return {};
            }
          }
        }

        /*
          Helper function for iterating root-ward, starting
          from (but not including) the provided `originRoute`.

          Returns true if the last callback fired requested
          to bubble upward.

          @private
         */
        function forEachRouteAbove(originRoute, transition, callback) {
          var handlerInfos = transition.state.handlerInfos,
              originRouteFound = false;

          for (var i = handlerInfos.length - 1; i >= 0; --i) {
            var handlerInfo = handlerInfos[i],
                route = handlerInfo.handler;

            if (!originRouteFound) {
              if (originRoute === route) {
                originRouteFound = true;
              }
              continue;
            }

            if (callback(route, handlerInfos[i + 1].handler) !== true) {
              return false;
            }
          }
          return true;
        }

        // These get invoked when an action bubbles above ApplicationRoute
        // and are not meant to be overridable.
        var defaultActionHandlers = {

          willResolveModel: function(transition, originRoute) {
            originRoute.router._scheduleLoadingEvent(transition, originRoute);
          },

          error: function(error, transition, originRoute) {
            // Attempt to find an appropriate error substate to enter.
            var router = originRoute.router;

            var tryTopLevel = forEachRouteAbove(originRoute, transition, function(route, childRoute) {
              var childErrorRouteName = findChildRouteName(route, childRoute, 'error');
              if (childErrorRouteName) {
                router.intermediateTransitionTo(childErrorRouteName, error);
                return;
              }
              return true;
            });

            if (tryTopLevel) {
              // Check for top-level error state to enter.
              if (routeHasBeenDefined(originRoute.router, 'application_error')) {
                router.intermediateTransitionTo('application_error', error);
                return;
              }
            } else {
              // Don't fire an assertion if we found an error substate.
              return;
            }

            var errorArgs = ['Error while processing route: ' + transition.targetName];

            if (error) {
              if (error.message) { errorArgs.push(error.message); }
              if (error.stack)   { errorArgs.push(error.stack); }

              if (typeof error === "string") { errorArgs.push(error); }
            }

            ember$metal$core$$default.Logger.error.apply(this, errorArgs);
          },

          loading: function(transition, originRoute) {
            // Attempt to find an appropriate loading substate to enter.
            var router = originRoute.router;

            var tryTopLevel = forEachRouteAbove(originRoute, transition, function(route, childRoute) {
              var childLoadingRouteName = findChildRouteName(route, childRoute, 'loading');

              if (childLoadingRouteName) {
                router.intermediateTransitionTo(childLoadingRouteName);
                return;
              }

              // Don't bubble above pivot route.
              if (transition.pivotHandler !== route) {
                return true;
              }
            });

            if (tryTopLevel) {
              // Check for top-level loading state to enter.
              if (routeHasBeenDefined(originRoute.router, 'application_loading')) {
                router.intermediateTransitionTo('application_loading');
                return;
              }
            }
          }
        };

        function findChildRouteName(parentRoute, originatingChildRoute, name) {
          var router = parentRoute.router,
              childName,
              targetChildRouteName = originatingChildRoute.routeName.split('.').pop(),
              namespace = parentRoute.routeName === 'application' ? '' : parentRoute.routeName + '.';

          if (ember$metal$core$$default.FEATURES.isEnabled("ember-routing-named-substates")) {
            // First, try a named loading state, e.g. 'foo_loading'
            childName = namespace + targetChildRouteName + '_' + name;
            if (routeHasBeenDefined(router, childName)) {
              return childName;
            }
          }

          // Second, try general loading state, e.g. 'loading'
          childName = namespace + name;
          if (routeHasBeenDefined(router, childName)) {
            return childName;
          }
        }

        function routeHasBeenDefined(router, name) {
          var container = router.container;
          return router.hasRoute(name) &&
                 (container.has('template:' + name) || container.has('route:' + name));
        }

        function triggerEvent(handlerInfos, ignoreFailure, args) {
          var name = args.shift();

          if (!handlerInfos) {
            if (ignoreFailure) { return; }
            throw new ember$metal$error$$default("Can't trigger action '" + name + "' because your app hasn't finished transitioning into its first route. To trigger an action on destination routes during a transition, you can call `.send()` on the `Transition` object passed to the `model/beforeModel/afterModel` hooks.");
          }

          var eventWasHandled = false;

          for (var i = handlerInfos.length - 1; i >= 0; i--) {
            var handlerInfo = handlerInfos[i],
                handler = handlerInfo.handler;

            if (handler._actions && handler._actions[name]) {
              if (handler._actions[name].apply(handler, args) === true) {
                eventWasHandled = true;
              } else {
                return;
              }
            }
          }

          if (defaultActionHandlers[name]) {
            defaultActionHandlers[name].apply(null, args);
            return;
          }

          if (!eventWasHandled && !ignoreFailure) {
            throw new ember$metal$error$$default("Nothing handled the action '" + name + "'. If you did handle the action, this error can be caused by returning true from an action handler in a controller, causing the action to bubble.");
          }
        }

        function updatePaths(router) {
          var appController = router.container.lookup('controller:application');

          if (!appController) {
            // appController might not exist when top-level loading/error
            // substates have been entered since ApplicationRoute hasn't
            // actually been entered at that point.
            return;
          }

          var infos = router.router.currentHandlerInfos,
              path = EmberRouter._routePath(infos);

          if (!('currentPath' in appController)) {
            ember$metal$properties$$defineProperty(appController, 'currentPath');
          }

          ember$metal$property_set$$set(appController, 'currentPath', path);

          if (!('currentRouteName' in appController)) {
            ember$metal$properties$$defineProperty(appController, 'currentRouteName');
          }

          ember$metal$property_set$$set(appController, 'currentRouteName', infos[infos.length - 1].name);
        }

        EmberRouter.reopenClass({
          router: null,
          map: function(callback) {
            var router = this.router;
            if (!router) {
              router = new router$$default();

              if (ember$metal$core$$default.FEATURES.isEnabled("ember-routing-will-change-hooks")) {
                router._willChangeContextEvent = 'willChangeModel';
              } else {
                router._triggerWillChangeContext = ember$metal$core$$default.K;
                router._triggerWillLeave = ember$metal$core$$default.K;
              }

              router.callbacks = [];
              router.triggerEvent = triggerEvent;
              this.reopenClass({ router: router });
            }

            var dsl = ember$routing$system$dsl$$default.map(function() {
              this.resource('application', { path: "/" }, function() {
                for (var i=0; i < router.callbacks.length; i++) {
                  router.callbacks[i].call(this);
                }
                callback.call(this);
              });
            });

            router.callbacks.push(callback);
            router.map(dsl.generate());
            return router;
          },

          _routePath: function(handlerInfos) {
            var path = [];

            // We have to handle coalescing resource names that
            // are prefixed with their parent's names, e.g.
            // ['foo', 'foo.bar.baz'] => 'foo.bar.baz', not 'foo.foo.bar.baz'

            function intersectionMatches(a1, a2) {
              for (var i = 0, len = a1.length; i < len; ++i) {
                if (a1[i] !== a2[i]) {
                  return false;
                }
              }
              return true;
            }

            for (var i=1, l=handlerInfos.length; i<l; i++) {
              var name = handlerInfos[i].name,
                  nameParts = name.split("."),
                  oldNameParts = slice.call(path);

              while (oldNameParts.length) {
                if (intersectionMatches(oldNameParts, nameParts)) {
                  break;
                }
                oldNameParts.shift();
              }

              path.push.apply(path, nameParts.slice(oldNameParts.length));
            }

            return path.join(".");
          }
        });

        ember$routing$system$router$$default = EmberRouter;
    }).call(this);

    (function() {
        function resolveParams(context, params, options) {
          return ember$metal$array$$map.call(ember$routing$helpers$shared$$resolvePaths(context, params, options), function(path, i) {
            if (null === path) {
              // Param was string/number, not a path, so just return raw string/number.
              return params[i];
            } else {
              return ember$handlebars$ext$$handlebarsGet(context, path, options);
            }
          });
        }

        ember$routing$helpers$shared$$resolveParams = resolveParams;

        function resolvePaths(context, params, options) {
          var resolved = ember$handlebars$ext$$resolveParams(context, params, options),
              types = options.types;

          return ember$metal$array$$map.call(resolved, function(object, i) {
            if (types[i] === 'ID') {
              return unwrap(object, params[i]);
            } else {
              return null;
            }
          });

          function unwrap(object, path) {
            if (path === 'controller') { return path; }

            if (ember$runtime$controllers$controller$$ControllerMixin.detect(object)) {
              return unwrap(ember$metal$property_get$$get(object, 'model'), path ? path + '.model' : 'model');
            } else {
              return path;
            }
          }
        }

        ember$routing$helpers$shared$$resolvePaths = resolvePaths;
    }).call(this);

    (function() {
        // requireModule('ember-handlebars');

        /**
        @module ember
        @submodule ember-routing
        */

        var slice = [].slice;

        var numberOfContextsAcceptedByHandler = function(handler, handlerInfos) {
          var req = 0;
          for (var i = 0, l = handlerInfos.length; i < l; i++) {
            req = req + handlerInfos[i].names.length;
            if (handlerInfos[i].handler === handler)
              break;
          }

          // query params adds an additional context
          if (ember$metal$core$$default.FEATURES.isEnabled("query-params-new")) {
            req = req + 1;
          }
          return req;
        };

        var QueryParams = ember$runtime$system$object$$default.extend({
          values: null
        });

        function computeQueryParams(linkView, stripDefaultValues) {
          var helperParameters = linkView.parameters,
              queryParamsObject = ember$metal$property_get$$get(linkView, 'queryParamsObject'),
              suppliedParams = {};

          if (queryParamsObject) {
            ember$metal$merge$$default(suppliedParams, queryParamsObject.values);
          }

          var resolvedParams = ember$metal$property_get$$get(linkView, 'resolvedParams'),
              router = ember$metal$property_get$$get(linkView, 'router'),
              routeName = resolvedParams[0],
              paramsForRoute = router._queryParamsFor(routeName),
              qps = paramsForRoute.qps,
              paramsForRecognizer = {};

          // We need to collect all non-default query params for this route.
          for (var i = 0, len = qps.length; i < len; ++i) {
            var qp = qps[i];

            // Check if the link-to provides a value for this qp.
            var providedType = null, value;
            if (qp.prop in suppliedParams) {
              value = suppliedParams[qp.prop];
              providedType = queryParamsObject.types[qp.prop];
              delete suppliedParams[qp.prop];
            } else if (qp.urlKey in suppliedParams) {
              value = suppliedParams[qp.urlKey];
              providedType = queryParamsObject.types[qp.urlKey];
              delete suppliedParams[qp.urlKey];
            }

            if (providedType) {
              if (providedType === 'ID') {
                var normalizedPath = ember$handlebars$$default.normalizePath(helperParameters.context, value, helperParameters.options.data);
                value = ember$handlebars$$default.get(normalizedPath.root, normalizedPath.path, helperParameters.options);
              }

              value = qp.route.serializeQueryParam(value, qp.urlKey, qp.type);
            } else {
              value = qp.svalue;
            }

            if (stripDefaultValues && value === qp.sdef) {
              continue;
            }

            paramsForRecognizer[qp.urlKey] = value;
          }

          return paramsForRecognizer;
        }

        function routeArgsWithoutDefaultQueryParams(linkView) {
          var routeArgs = linkView.get('routeArgs');

          if (!routeArgs[routeArgs.length-1].queryParams) {
            return routeArgs;
          }

          routeArgs = routeArgs.slice();
          routeArgs[routeArgs.length-1] = {
            queryParams: computeQueryParams(linkView, true)
          };
          return routeArgs;
        }

        function getResolvedPaths(options) {

          var types = options.options.types,
              data = options.options.data;

          return ember$routing$helpers$shared$$resolvePaths(options.context, options.params, { types: types, data: data });
        }

        ember$routing$helpers$link_to$$LinkView = ember$metal$core$$default.LinkView = ember$views$views$component$$default.extend({
          tagName: 'a',
          currentWhen: null,

          /**
            Sets the `title` attribute of the `LinkView`'s HTML element.

            @property title
            @default null
          **/
          title: null,

          /**
            Sets the `rel` attribute of the `LinkView`'s HTML element.

            @property rel
            @default null
          **/
          rel: null,

          /**
            The CSS class to apply to `LinkView`'s element when its `active`
            property is `true`.

            @property activeClass
            @type String
            @default active
          **/
          activeClass: 'active',

          /**
            The CSS class to apply to `LinkView`'s element when its `loading`
            property is `true`.

            @property loadingClass
            @type String
            @default loading
          **/
          loadingClass: 'loading',

          /**
            The CSS class to apply to a `LinkView`'s element when its `disabled`
            property is `true`.

            @property disabledClass
            @type String
            @default disabled
          **/
          disabledClass: 'disabled',
          _isDisabled: false,

          /**
            Determines whether the `LinkView` will trigger routing via
            the `replaceWith` routing strategy.

            @property replace
            @type Boolean
            @default false
          **/
          replace: false,

          /**
            By default the `{{link-to}}` helper will bind to the `href` and
            `title` attributes. It's discourage that you override these defaults,
            however you can push onto the array if needed.

            @property attributeBindings
            @type Array | String
            @default ['href', 'title', 'rel']
           **/
          attributeBindings: ['href', 'title', 'rel'],

          /**
            By default the `{{link-to}}` helper will bind to the `active`, `loading`, and
            `disabled` classes. It is discouraged to override these directly.

            @property classNameBindings
            @type Array
            @default ['active', 'loading', 'disabled']
           **/
          classNameBindings: ['active', 'loading', 'disabled'],

          /**
            By default the `{{link-to}}` helper responds to the `click` event. You
            can override this globally by setting this property to your custom
            event name.

            This is particularly useful on mobile when one wants to avoid the 300ms
            click delay using some sort of custom `tap` event.

            @property eventName
            @type String
            @default click
          */
          eventName: 'click',

          // this is doc'ed here so it shows up in the events
          // section of the API documentation, which is where
          // people will likely go looking for it.
          /**
            Triggers the `LinkView`'s routing behavior. If
            `eventName` is changed to a value other than `click`
            the routing behavior will trigger on that custom event
            instead.

            @event click
          **/

          /**
            An overridable method called when LinkView objects are instantiated.

            Example:

            ```javascript
            App.MyLinkView = Ember.LinkView.extend({
              init: function() {
                this._super();
                Ember.Logger.log('Event is ' + this.get('eventName'));
              }
            });
            ```

            NOTE: If you do override `init` for a framework class like `Ember.View` or
            `Ember.ArrayController`, be sure to call `this._super()` in your
            `init` declaration! If you don't, Ember may not have an opportunity to
            do important setup work, and you'll see strange behavior in your
            application.

            @method init
          */
          init: function() {
            this._super.apply(this, arguments);

            // Map desired event name to invoke function
            var eventName = ember$metal$property_get$$get(this, 'eventName');
            this.on(eventName, this, this._invoke);
          },

          /**
            This method is invoked by observers installed during `init` that fire
            whenever the params change

            @private
            @method _paramsChanged
            @since 1.3.0
           */
          _paramsChanged: function() {
            this.notifyPropertyChange('resolvedParams');
          },

          /**
           This is called to setup observers that will trigger a rerender.

           @private
           @method _setupPathObservers
           @since 1.3.0
          **/
          _setupPathObservers: function(){
            var helperParameters = this.parameters,
                linkTextPath     = helperParameters.options.linkTextPath,
                paths = getResolvedPaths(helperParameters),
                length = paths.length,
                path, i, normalizedPath;

            if (linkTextPath) {
              normalizedPath = ember$handlebars$$default.normalizePath(helperParameters.context, linkTextPath, helperParameters.options.data);
              this.registerObserver(normalizedPath.root, normalizedPath.path, this, this.rerender);
            }

            for(i=0; i < length; i++) {
              path = paths[i];
              if (null === path) {
                // A literal value was provided, not a path, so nothing to observe.
                continue;
              }

              normalizedPath = ember$handlebars$$default.normalizePath(helperParameters.context, path, helperParameters.options.data);
              this.registerObserver(normalizedPath.root, normalizedPath.path, this, this._paramsChanged);
            }

            var queryParamsObject = this.queryParamsObject;
            if (queryParamsObject) {
              var values = queryParamsObject.values;

              // Install observers for all of the hash options
              // provided in the (query-params) subexpression.
              for (var k in values) {
                if (!values.hasOwnProperty(k)) { continue; }

                if (queryParamsObject.types[k] === 'ID') {
                  normalizedPath = ember$handlebars$$default.normalizePath(helperParameters.context, values[k], helperParameters.options.data);
                  this.registerObserver(normalizedPath.root, normalizedPath.path, this, this._paramsChanged);
                }
              }
            }
          },

          afterRender: function(){
            this._super.apply(this, arguments);
            this._setupPathObservers();
          },

          /**

            Accessed as a classname binding to apply the `LinkView`'s `disabledClass`
            CSS `class` to the element when the link is disabled.

            When `true` interactions with the element will not trigger route changes.
            @property disabled
          */
          disabled: ember$metal$computed$$computed(function computeLinkViewDisabled(key, value) {
            if (value !== undefined) { this.set('_isDisabled', value); }

            return value ? ember$metal$property_get$$get(this, 'disabledClass') : false;
          }),

          /**
            Accessed as a classname binding to apply the `LinkView`'s `activeClass`
            CSS `class` to the element when the link is active.

            A `LinkView` is considered active when its `currentWhen` property is `true`
            or the application's current route is the route the `LinkView` would trigger
            transitions into.

            @property active
          **/
          active: ember$metal$computed$$computed(function computeLinkViewActive() {
            if (ember$metal$property_get$$get(this, 'loading')) { return false; }

            var router = ember$metal$property_get$$get(this, 'router'),
                routeArgs = ember$metal$property_get$$get(this, 'routeArgs'),
                contexts = routeArgs.slice(1),
                resolvedParams = ember$metal$property_get$$get(this, 'resolvedParams'),
                currentWhen = this.currentWhen || routeArgs[0],
                maximumContexts = numberOfContextsAcceptedByHandler(currentWhen, router.router.recognizer.handlersFor(currentWhen));

            // if we don't have enough contexts revert back to full route name
            // this is because the leaf route will use one of the contexts
            if (contexts.length > maximumContexts)
              currentWhen = routeArgs[0];

            var isActive = router.isActive.apply(router, [currentWhen].concat(contexts));

            if (isActive) { return ember$metal$property_get$$get(this, 'activeClass'); }
          }).property('resolvedParams', 'routeArgs'),

          /**
            Accessed as a classname binding to apply the `LinkView`'s `loadingClass`
            CSS `class` to the element when the link is loading.

            A `LinkView` is considered loading when it has at least one
            parameter whose value is currently null or undefined. During
            this time, clicking the link will perform no transition and
            emit a warning that the link is still in a loading state.

            @property loading
          **/
          loading: ember$metal$computed$$computed(function computeLinkViewLoading() {
            if (!ember$metal$property_get$$get(this, 'routeArgs')) { return ember$metal$property_get$$get(this, 'loadingClass'); }
          }).property('routeArgs'),

          /**
            Returns the application's main router from the container.

            @private
            @property router
          **/
          router: ember$metal$computed$$computed(function() {
            return ember$metal$property_get$$get(this, 'controller').container.lookup('router:main');
          }),

          /**
            Event handler that invokes the link, activating the associated route.

            @private
            @method _invoke
            @param {Event} event
          */
          _invoke: function(event) {
            if (!ember$views$system$utils$$isSimpleClick(event)) { return true; }

            if (this.preventDefault !== false) {
              if (ember$metal$core$$default.FEATURES.isEnabled("ember-routing-linkto-target-attribute")) {
                var targetAttribute = ember$metal$property_get$$get(this, 'target');
                if (!targetAttribute || targetAttribute === '_self') {
                  event.preventDefault();
                }
              } else {
                event.preventDefault();
              }
            }

            if (this.bubbles === false) { event.stopPropagation(); }

            if (ember$metal$property_get$$get(this, '_isDisabled')) { return false; }

            if (ember$metal$property_get$$get(this, 'loading')) {
              ember$metal$core$$default.Logger.warn("This link-to is in an inactive loading state because at least one of its parameters presently has a null/undefined value, or the provided route name is invalid.");
              return false;
            }

            var router = ember$metal$property_get$$get(this, 'router'),
                routeArgs = ember$metal$property_get$$get(this, 'routeArgs');

            var transition;
            if (ember$metal$property_get$$get(this, 'replace')) {
              transition = router.replaceWith.apply(router, routeArgs);
            } else {
              transition = router.transitionTo.apply(router, routeArgs);
            }

            // Schedule eager URL update, but after we've given the transition
            // a chance to synchronously redirect.
            // We need to always generate the URL instead of using the href because
            // the href will include any rootURL set, but the router expects a URL
            // without it! Note that we don't use the first level router because it
            // calls location.formatURL(), which also would add the rootURL!
            var url = router.router.generate.apply(router.router, routeArgsWithoutDefaultQueryParams(this));
            ember$metal$run_loop$$default.scheduleOnce('routerTransitions', this, this._eagerUpdateUrl, transition, url);
          },

          /**
            @private
            @method _eagerUpdateUrl
            @param transition
            @param href
           */
          _eagerUpdateUrl: function(transition, href) {
            if (!transition.isActive || !transition.urlMethod) {
              // transition was aborted, already ran to completion,
              // or it has a null url-updated method.
              return;
            }

            if (href.indexOf('#') === 0) {
              href = href.slice(1);
            }

            // Re-use the routerjs hooks set up by the Ember router.
            var routerjs = ember$metal$property_get$$get(this, 'router.router');
            if (transition.urlMethod === 'update') {
              routerjs.updateURL(href);
            } else if (transition.urlMethod === 'replace') {
              routerjs.replaceURL(href);
            }

            // Prevent later update url refire.
            transition.method(null);
          },

          /**
            Computed property that returns an array of the
            resolved parameters passed to the `link-to` helper,
            e.g.:

            ```hbs
            {{link-to a b '123' c}}
            ```

            will generate a `resolvedParams` of:

            ```js
            [aObject, bObject, '123', cObject]
            ```

            @private
            @property
            @return {Array}
           */
          resolvedParams: ember$metal$computed$$computed(function() {
            var parameters = this.parameters,
                options = parameters.options,
                types = options.types,
                data = options.data;

            if (parameters.params.length === 0) {
              var appController = this.container.lookup('controller:application');
              return [ember$metal$property_get$$get(appController, 'currentRouteName')];
            } else {
              return ember$routing$helpers$shared$$resolveParams(parameters.context, parameters.params, { types: types, data: data });
            }
          }).property('router.url'),

          /**
            Computed property that returns the current route name and
            any dynamic segments.

            @private
            @property
            @return {Array} An array with the route name and any dynamic segments
           */
          routeArgs: ember$metal$computed$$computed(function computeLinkViewRouteArgs() {
            var resolvedParams = ember$metal$property_get$$get(this, 'resolvedParams').slice(0),
                router = ember$metal$property_get$$get(this, 'router'),
                namedRoute = resolvedParams[0];

            if (!namedRoute) { return; }

            ember$metal$core$$default.assert(ember$runtime$system$string$$fmt("The attempt to link-to route '%@' failed. " +
                             "The router did not find '%@' in its possible routes: '%@'",
                             [namedRoute, namedRoute, ember$runtime$keys$$default(router.router.recognizer.names).join("', '")]),
                             router.hasRoute(namedRoute));

            //normalize route name
            var handlers = router.router.recognizer.handlersFor(namedRoute);
            var normalizedPath = handlers[handlers.length - 1].handler;
            if (namedRoute !== normalizedPath) {
              //set namedRoute as currentWhen only when currentWhen is not given explicitly
              if (!this.currentWhen) {
                this.set('currentWhen', namedRoute);
              }
              namedRoute = handlers[handlers.length - 1].handler;
              resolvedParams[0] = namedRoute;
            }

            for (var i = 1, len = resolvedParams.length; i < len; ++i) {
              var param = resolvedParams[i];
              if (param === null || typeof param === 'undefined') {
                // If contexts aren't present, consider the linkView unloaded.
                return;
              }
            }

            if (ember$metal$core$$default.FEATURES.isEnabled("query-params-new")) {
              resolvedParams.push({ queryParams: ember$metal$property_get$$get(this, 'queryParams') });
            }

            return resolvedParams;
          }).property('resolvedParams', 'queryParams'),

          queryParamsObject: null,
          queryParams: ember$metal$computed$$computed(function computeLinkViewQueryParams() {
            return computeQueryParams(this, false);
          }).property('resolvedParams.[]'),

          /**
            Sets the element's `href` attribute to the url for
            the `LinkView`'s targeted route.

            If the `LinkView`'s `tagName` is changed to a value other
            than `a`, this property will be ignored.

            @property href
          **/
          href: ember$metal$computed$$computed(function computeLinkViewHref() {
            if (ember$metal$property_get$$get(this, 'tagName') !== 'a') { return; }

            var router = ember$metal$property_get$$get(this, 'router'),
                routeArgs = ember$metal$property_get$$get(this, 'routeArgs');

            if (!routeArgs) {
              return ember$metal$property_get$$get(this, 'loadingHref');
            }

            if (ember$metal$core$$default.FEATURES.isEnabled("query-params-new")) {
              routeArgs = routeArgsWithoutDefaultQueryParams(this);
            }

            return router.generate.apply(router, routeArgs);
          }).property('routeArgs'),

          /**
            The default href value to use while a link-to is loading.
            Only applies when tagName is 'a'

            @property loadingHref
            @type String
            @default #
          */
          loadingHref: '#'
        });

        ember$routing$helpers$link_to$$LinkView.toString = function() { return "LinkView"; };

        if (ember$metal$core$$default.FEATURES.isEnabled("ember-routing-linkto-target-attribute")) {
          ember$routing$helpers$link_to$$LinkView.reopen({
            attributeBindings: ['target'],

            /**
              Sets the `target` attribute of the `LinkView`'s anchor element.

              @property target
              @default null
            **/
            target: null
          });
        }

        /**
          The `{{link-to}}` helper renders a link to the supplied
          `routeName` passing an optionally supplied model to the
          route as its `model` context of the route. The block
          for `{{link-to}}` becomes the innerHTML of the rendered
          element:

          ```handlebars
          {{#link-to 'photoGallery'}}
            Great Hamster Photos
          {{/link-to}}
          ```

          ```html
          <a href="/hamster-photos">
            Great Hamster Photos
          </a>
          ```

          ### Supplying a tagName
          By default `{{link-to}}` renders an `<a>` element. This can
          be overridden for a single use of `{{link-to}}` by supplying
          a `tagName` option:

          ```handlebars
          {{#link-to 'photoGallery' tagName="li"}}
            Great Hamster Photos
          {{/link-to}}
          ```

          ```html
          <li>
            Great Hamster Photos
          </li>
          ```

          To override this option for your entire application, see
          "Overriding Application-wide Defaults".

          ### Disabling the `link-to` helper
          By default `{{link-to}}` is enabled.
          any passed value to `disabled` helper property will disable the `link-to` helper.

          static use: the `disabled` option:

          ```handlebars
          {{#link-to 'photoGallery' disabled=true}}
            Great Hamster Photos
          {{/link-to}}
          ```

          dynamic use: the `disabledWhen` option:

          ```handlebars
          {{#link-to 'photoGallery' disabledWhen=controller.someProperty}}
            Great Hamster Photos
          {{/link-to}}
          ```

          any passed value to `disabled` will disable it except `undefined`.
          to ensure that only `true` disable the `link-to` helper you can
          override the global behaviour of `Ember.LinkView`.

          ```javascript
          Ember.LinkView.reopen({
            disabled: Ember.computed(function(key, value) {
              if (value !== undefined) {
                this.set('_isDisabled', value === true);
              }
              return value === true ? get(this, 'disabledClass') : false;
            })
          });
          ```

          see "Overriding Application-wide Defaults" for more.

          ### Handling `href`
          `{{link-to}}` will use your application's Router to
          fill the element's `href` property with a url that
          matches the path to the supplied `routeName` for your
          routers's configured `Location` scheme, which defaults
          to Ember.HashLocation.

          ### Handling current route
          `{{link-to}}` will apply a CSS class name of 'active'
          when the application's current route matches
          the supplied routeName. For example, if the application's
          current route is 'photoGallery.recent' the following
          use of `{{link-to}}`:

          ```handlebars
          {{#link-to 'photoGallery.recent'}}
            Great Hamster Photos from the last week
          {{/link-to}}
          ```

          will result in

          ```html
          <a href="/hamster-photos/this-week" class="active">
            Great Hamster Photos
          </a>
          ```

          The CSS class name used for active classes can be customized
          for a single use of `{{link-to}}` by passing an `activeClass`
          option:

          ```handlebars
          {{#link-to 'photoGallery.recent' activeClass="current-url"}}
            Great Hamster Photos from the last week
          {{/link-to}}
          ```

          ```html
          <a href="/hamster-photos/this-week" class="current-url">
            Great Hamster Photos
          </a>
          ```

          To override this option for your entire application, see
          "Overriding Application-wide Defaults".

          ### Supplying a model
          An optional model argument can be used for routes whose
          paths contain dynamic segments. This argument will become
          the model context of the linked route:

          ```javascript
          App.Router.map(function() {
            this.resource("photoGallery", {path: "hamster-photos/:photo_id"});
          });
          ```

          ```handlebars
          {{#link-to 'photoGallery' aPhoto}}
            {{aPhoto.title}}
          {{/link-to}}
          ```

          ```html
          <a href="/hamster-photos/42">
            Tomster
          </a>
          ```

          ### Supplying multiple models
          For deep-linking to route paths that contain multiple
          dynamic segments, multiple model arguments can be used.
          As the router transitions through the route path, each
          supplied model argument will become the context for the
          route with the dynamic segments:

          ```javascript
          App.Router.map(function() {
            this.resource("photoGallery", {path: "hamster-photos/:photo_id"}, function() {
              this.route("comment", {path: "comments/:comment_id"});
            });
          });
          ```
          This argument will become the model context of the linked route:

          ```handlebars
          {{#link-to 'photoGallery.comment' aPhoto comment}}
            {{comment.body}}
          {{/link-to}}
          ```

          ```html
          <a href="/hamster-photos/42/comment/718">
            A+++ would snuggle again.
          </a>
          ```

          ### Supplying an explicit dynamic segment value
          If you don't have a model object available to pass to `{{link-to}}`,
          an optional string or integer argument can be passed for routes whose
          paths contain dynamic segments. This argument will become the value
          of the dynamic segment:

          ```javascript
          App.Router.map(function() {
            this.resource("photoGallery", {path: "hamster-photos/:photo_id"});
          });
          ```

          ```handlebars
          {{#link-to 'photoGallery' aPhotoId}}
            {{aPhoto.title}}
          {{/link-to}}
          ```

          ```html
          <a href="/hamster-photos/42">
            Tomster
          </a>
          ```

          When transitioning into the linked route, the `model` hook will
          be triggered with parameters including this passed identifier.

          ### Allowing Default Action

         By default the `{{link-to}}` helper prevents the default browser action
         by calling `preventDefault()` as this sort of action bubbling is normally
         handled internally and we do not want to take the browser to a new URL (for
         example).

         If you need to override this behavior specify `preventDefault=false` in
         your template:

          ```handlebars
          {{#link-to 'photoGallery' aPhotoId preventDefault=false}}
            {{aPhotoId.title}}
          {{/link-to}}
          ```

          ### Overriding attributes
          You can override any given property of the Ember.LinkView
          that is generated by the `{{link-to}}` helper by passing
          key/value pairs, like so:

          ```handlebars
          {{#link-to  aPhoto tagName='li' title='Following this link will change your life' classNames='pic sweet'}}
            Uh-mazing!
          {{/link-to}}
          ```

          See [Ember.LinkView](/api/classes/Ember.LinkView.html) for a
          complete list of overrideable properties. Be sure to also
          check out inherited properties of `LinkView`.

          ### Overriding Application-wide Defaults
          ``{{link-to}}`` creates an instance of Ember.LinkView
          for rendering. To override options for your entire
          application, reopen Ember.LinkView and supply the
          desired values:

          ``` javascript
          Ember.LinkView.reopen({
            activeClass: "is-active",
            tagName: 'li'
          })
          ```

          It is also possible to override the default event in
          this manner:

          ``` javascript
          Ember.LinkView.reopen({
            eventName: 'customEventName'
          });
          ```

          @method link-to
          @for Ember.Handlebars.helpers
          @param {String} routeName
          @param {Object} [context]*
          @param [options] {Object} Handlebars key/value pairs of options, you can override any property of Ember.LinkView
          @return {String} HTML string
          @see {Ember.LinkView}
        */
        function linkToHelper(name) {
          var options = slice.call(arguments, -1)[0],
              params = slice.call(arguments, 0, -1),
              hash = options.hash;

          if (params[params.length - 1] instanceof QueryParams) {
            hash.queryParamsObject = params.pop();
          }

          hash.disabledBinding = hash.disabledWhen;

          if (!options.fn) {
            var linkTitle = params.shift();
            var linkType = options.types.shift();
            var context = this;
            if (linkType === 'ID') {
              options.linkTextPath = linkTitle;
              options.fn = function() {
                return ember$handlebars$$default.getEscaped(context, linkTitle, options);
              };
            } else {
              options.fn = function() {
                return linkTitle;
              };
            }
          }

          hash.parameters = {
            context: this,
            options: options,
            params: params
          };

          options.helperName = options.helperName || 'link-to';

          return ember$handlebars$helpers$view$$viewHelper.call(this, ember$routing$helpers$link_to$$LinkView, options);
        }

        ember$routing$helpers$link_to$$linkToHelper = linkToHelper;

        if (ember$metal$core$$default.FEATURES.isEnabled("query-params-new")) {
          ember$handlebars$$default.registerHelper('query-params', function queryParamsHelper(options) {
            ember$metal$core$$default.assert(ember$runtime$system$string$$fmt("The `query-params` helper only accepts hash parameters, e.g. (query-params queryParamPropertyName='%@') as opposed to just (query-params '%@')", [options, options]), arguments.length === 1);

            return QueryParams.create({
              values: options.hash,
              types: options.hashTypes
            });
          });
        }

        /**
          See [link-to](/api/classes/Ember.Handlebars.helpers.html#method_link-to)

          @method linkTo
          @for Ember.Handlebars.helpers
          @deprecated
          @param {String} routeName
          @param {Object} [context]*
          @return {String} HTML string
        */
        function deprecatedLinkToHelper() {
          ember$metal$core$$default.warn("The 'linkTo' view helper is deprecated in favor of 'link-to'");
          return ember$routing$helpers$link_to$$linkToHelper.apply(this, arguments);
        }

        ember$routing$helpers$link_to$$deprecatedLinkToHelper = deprecatedLinkToHelper;
    }).call(this);

    (function() {
        ember$routing$location$none_location$$default = ember$runtime$system$object$$default.extend({
          implementation: 'none',
          path: '',

          /**
            Returns the current path.

            @private
            @method getURL
            @return {String} path
          */
          getURL: function() {
            return ember$metal$property_get$$get(this, 'path');
          },

          /**
            Set the path and remembers what was set. Using this method
            to change the path will not invoke the `updateURL` callback.

            @private
            @method setURL
            @param path {String}
          */
          setURL: function(path) {
            ember$metal$property_set$$set(this, 'path', path);
          },

          /**
            Register a callback to be invoked when the path changes. These
            callbacks will execute when the user presses the back or forward
            button, but not after `setURL` is invoked.

            @private
            @method onUpdateURL
            @param callback {Function}
          */
          onUpdateURL: function(callback) {
            this.updateCallback = callback;
          },

          /**
            Sets the path and calls the `updateURL` callback.

            @private
            @method handleURL
            @param callback {Function}
          */
          handleURL: function(url) {
            ember$metal$property_set$$set(this, 'path', url);
            this.updateCallback(url);
          },

          /**
            Given a URL, formats it to be placed into the page as part
            of an element's `href` attribute.

            This is used, for example, when using the {{action}} helper
            to generate a URL based on an event.

            @private
            @method formatURL
            @param url {String}
            @return {String} url
          */
          formatURL: function(url) {
            // The return value is not overly meaningful, but we do not want to throw
            // errors when test code renders templates containing {{action href=true}}
            // helpers.
            return url;
          }
        });
    }).call(this);

    (function() {
        ember$routing$location$hash_location$$default = ember$runtime$system$object$$default.extend({
          implementation: 'hash',

          init: function() {
            ember$metal$property_set$$set(this, 'location', ember$metal$property_get$$get(this, '_location') || window.location);
          },

          /**
            @private

            Returns normalized location.hash

            @since 1.5.1
            @method getHash
          */
          getHash: ember$routing$location$api$$default._getHash,

          /**
            Returns the current `location.hash`, minus the '#' at the front.

            @private
            @method getURL
          */
          getURL: function() {
            return this.getHash().substr(1);
          },

          /**
            Set the `location.hash` and remembers what was set. This prevents
            `onUpdateURL` callbacks from triggering when the hash was set by
            `HashLocation`.

            @private
            @method setURL
            @param path {String}
          */
          setURL: function(path) {
            ember$metal$property_get$$get(this, 'location').hash = path;
            ember$metal$property_set$$set(this, 'lastSetURL', path);
          },

          /**
            Uses location.replace to update the url without a page reload
            or history modification.

            @private
            @method replaceURL
            @param path {String}
          */
          replaceURL: function(path) {
            ember$metal$property_get$$get(this, 'location').replace('#' + path);
            ember$metal$property_set$$set(this, 'lastSetURL', path);
          },

          /**
            Register a callback to be invoked when the hash changes. These
            callbacks will execute when the user presses the back or forward
            button, but not after `setURL` is invoked.

            @private
            @method onUpdateURL
            @param callback {Function}
          */
          onUpdateURL: function(callback) {
            var self = this;
            var guid = ember$metal$utils$$guidFor(this);

            ember$views$system$jquery$$default(window).on('hashchange.ember-location-'+guid, function() {
              ember$metal$run_loop$$default(function() {
                var path = self.getURL();
                if (ember$metal$property_get$$get(self, 'lastSetURL') === path) { return; }

                ember$metal$property_set$$set(self, 'lastSetURL', null);

                callback(path);
              });
            });
          },

          /**
            Given a URL, formats it to be placed into the page as part
            of an element's `href` attribute.

            This is used, for example, when using the {{action}} helper
            to generate a URL based on an event.

            @private
            @method formatURL
            @param url {String}
          */
          formatURL: function(url) {
            return '#'+url;
          },

          /**
            Cleans up the HashLocation event listener.

            @private
            @method willDestroy
          */
          willDestroy: function() {
            var guid = ember$metal$utils$$guidFor(this);

            ember$views$system$jquery$$default(window).off('hashchange.ember-location-'+guid);
          }
        });
    }).call(this);

    (function() {
        /**
        @module ember
        @submodule ember-routing
        */

        var popstateFired = false;

        var supportsHistoryState = window.history && 'state' in window.history;

        ember$routing$location$history_location$$default = ember$runtime$system$object$$default.extend({
          implementation: 'history',

          init: function() {
            ember$metal$property_set$$set(this, 'location', ember$metal$property_get$$get(this, 'location') || window.location);
            ember$metal$property_set$$set(this, 'baseURL', ember$views$system$jquery$$default('base').attr('href') || '');
          },

          /**
            Used to set state on first call to setURL

            @private
            @method initState
          */
          initState: function() {
            ember$metal$property_set$$set(this, 'history', ember$metal$property_get$$get(this, 'history') || window.history);
            this.replaceState(this.formatURL(this.getURL()));
          },

          /**
            Will be pre-pended to path upon state change

            @property rootURL
            @default '/'
          */
          rootURL: '/',

          /**
            Returns the current `location.pathname` without `rootURL` or `baseURL`

            @private
            @method getURL
            @return url {String}
          */
          getURL: function() {
            var rootURL = ember$metal$property_get$$get(this, 'rootURL'),
                location = ember$metal$property_get$$get(this, 'location'),
                path = location.pathname,
                baseURL = ember$metal$property_get$$get(this, 'baseURL');

            rootURL = rootURL.replace(/\/$/, '');
            baseURL = baseURL.replace(/\/$/, '');
            var url = path.replace(baseURL, '').replace(rootURL, '');

            if (ember$metal$core$$default.FEATURES.isEnabled("query-params-new")) {
              var search = location.search || '';
              url += search;
            }

            return url;
          },

          /**
            Uses `history.pushState` to update the url without a page reload.

            @private
            @method setURL
            @param path {String}
          */
          setURL: function(path) {
            var state = this.getState();
            path = this.formatURL(path);

            if (!state || state.path !== path) {
              this.pushState(path);
            }
          },

          /**
            Uses `history.replaceState` to update the url without a page reload
            or history modification.

            @private
            @method replaceURL
            @param path {String}
          */
          replaceURL: function(path) {
            var state = this.getState();
            path = this.formatURL(path);

            if (!state || state.path !== path) {
              this.replaceState(path);
            }
          },

          /**
           Get the current `history.state`. Checks for if a polyfill is
           required and if so fetches this._historyState. The state returned
           from getState may be null if an iframe has changed a window's
           history.

           @private
           @method getState
           @return state {Object}
          */
          getState: function() {
            return supportsHistoryState ? ember$metal$property_get$$get(this, 'history').state : this._historyState;
          },

          /**
           Pushes a new state.

           @private
           @method pushState
           @param path {String}
          */
          pushState: function(path) {
            var state = { path: path };

            ember$metal$property_get$$get(this, 'history').pushState(state, null, path);

            // store state if browser doesn't support `history.state`
            if (!supportsHistoryState) {
              this._historyState = state;
            }

            // used for webkit workaround
            this._previousURL = this.getURL();
          },

          /**
           Replaces the current state.

           @private
           @method replaceState
           @param path {String}
          */
          replaceState: function(path) {
            var state = { path: path };

            ember$metal$property_get$$get(this, 'history').replaceState(state, null, path);

            // store state if browser doesn't support `history.state`
            if (!supportsHistoryState) {
              this._historyState = state;
            }

            // used for webkit workaround
            this._previousURL = this.getURL();
          },

          /**
            Register a callback to be invoked whenever the browser
            history changes, including using forward and back buttons.

            @private
            @method onUpdateURL
            @param callback {Function}
          */
          onUpdateURL: function(callback) {
            var guid = ember$metal$utils$$guidFor(this),
                self = this;

            ember$views$system$jquery$$default(window).on('popstate.ember-location-'+guid, function(e) {
              // Ignore initial page load popstate event in Chrome
              if (!popstateFired) {
                popstateFired = true;
                if (self.getURL() === self._previousURL) { return; }
              }
              callback(self.getURL());
            });
          },

          /**
            Used when using `{{action}}` helper.  The url is always appended to the rootURL.

            @private
            @method formatURL
            @param url {String}
            @return formatted url {String}
          */
          formatURL: function(url) {
            var rootURL = ember$metal$property_get$$get(this, 'rootURL'),
                baseURL = ember$metal$property_get$$get(this, 'baseURL');

            if (url !== '') {
              rootURL = rootURL.replace(/\/$/, '');
              baseURL = baseURL.replace(/\/$/, '');
            } else if(baseURL.match(/^\//) && rootURL.match(/^\//)) {
              baseURL = baseURL.replace(/\/$/, '');
            }

            return baseURL + rootURL + url;
          },

          /**
            Cleans up the HistoryLocation event listener.

            @private
            @method willDestroy
          */
          willDestroy: function() {
            var guid = ember$metal$utils$$guidFor(this);

            ember$views$system$jquery$$default(window).off('popstate.ember-location-'+guid);
          }
        });
    }).call(this);

    (function() {
        ember$routing$location$auto_location$$default = {

          /**
            @private

            This property is used by router:main to know whether to cancel the routing
            setup process, which is needed while we redirect the browser.

            @since 1.5.1
            @property cancelRouterSetup
            @default false
          */
          cancelRouterSetup: false,

          /**
            @private

            Will be pre-pended to path upon state change.

            @since 1.5.1
            @property rootURL
            @default '/'
          */
          rootURL: '/',

          /**
            @private

            Attached for mocking in tests

            @since 1.5.1
            @property _window
            @default window
          */
          _window: window,

          /**
            @private

            Attached for mocking in tests

            @property location
            @default window.location
          */
          _location: window.location,

          /**
            @private

            Attached for mocking in tests

            @since 1.5.1
            @property _history
            @default window.history
          */
          _history: window.history,

          /**
            @private

            Attached for mocking in tests

            @since 1.5.1
            @property _HistoryLocation
            @default Ember.HistoryLocation
          */
          _HistoryLocation: ember$routing$location$history_location$$default,

          /**
            @private

            Attached for mocking in tests

            @since 1.5.1
            @property _HashLocation
            @default Ember.HashLocation
          */
          _HashLocation: ember$routing$location$hash_location$$default,

          /**
            @private

            Attached for mocking in tests

            @since 1.5.1
            @property _NoneLocation
            @default Ember.NoneLocation
          */
          _NoneLocation: ember$routing$location$none_location$$default,

          /**
            @private

            Returns location.origin or builds it if device doesn't support it.

            @method _getOrigin
          */
          _getOrigin: function () {
            var location = this._location,
                origin = location.origin;

            // Older browsers, especially IE, don't have origin
            if (!origin) {
              origin = location.protocol + '//' + location.hostname;

              if (location.port) {
                origin += ':' + location.port;
              }
            }

            return origin;
          },

          /**
            @private

            We assume that if the history object has a pushState method, the host should
            support HistoryLocation.

            @method _getSupportsHistory
          */
          _getSupportsHistory: function () {
            // Boosted from Modernizr: https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
            // The stock browser on Android 2.2 & 2.3 returns positive on history support
            // Unfortunately support is really buggy and there is no clean way to detect
            // these bugs, so we fall back to a user agent sniff :(
            var userAgent = this._window.navigator.userAgent;

            // We only want Android 2, stock browser, and not Chrome which identifies
            // itself as 'Mobile Safari' as well
            if (userAgent.indexOf('Android 2') !== -1 &&
                userAgent.indexOf('Mobile Safari') !== -1 &&
                userAgent.indexOf('Chrome') === -1) {
              return false;
            }

            return !!(this._history && 'pushState' in this._history);
          },

          /**
            @private

            IE8 running in IE7 compatibility mode gives false positive, so we must also
            check documentMode.

            @method _getSupportsHashChange
          */
          _getSupportsHashChange: function () {
            var _window = this._window,
                documentMode = _window.document.documentMode;

            return ('onhashchange' in _window && (documentMode === undefined || documentMode > 7 ));
          },

          /**
            @private

            Redirects the browser using location.replace, prepending the locatin.origin
            to prevent phishing attempts

            @method _replacePath
          */
          _replacePath: function (path) {
            this._location.replace(this._getOrigin() + path);
          },

          /**
            @since 1.5.1
            @private
            @method _getRootURL
          */
          _getRootURL: function () {
            return this.rootURL;
          },

          /**
            @private

            Returns the current `location.pathname`, normalized for IE inconsistencies.

            @method _getPath
          */
          _getPath: function () {
            var pathname = this._location.pathname;
            // Various versions of IE/Opera don't always return a leading slash
            if (pathname.charAt(0) !== '/') {
              pathname = '/' + pathname;
            }

            return pathname;
          },

          /**
            @private

            Returns normalized location.hash as an alias to Ember.Location._getHash

            @since 1.5.1
            @method _getHash
          */
          _getHash: ember$routing$location$api$$default._getHash,

          /**
            @private

            Returns location.search

            @since 1.5.1
            @method _getQuery
          */
          _getQuery: function () {
            return this._location.search;
          },

          /**
            @private

            Returns the full pathname including query and hash

            @method _getFullPath
          */
          _getFullPath: function () {
            return this._getPath() + this._getQuery() + this._getHash();
          },

          /**
            @private

            Returns the current path as it should appear for HistoryLocation supported
            browsers. This may very well differ from the real current path (e.g. if it
            starts off as a hashed URL)

            @method _getHistoryPath
          */
          _getHistoryPath: function () {
            var rootURL = this._getRootURL(),
                path = this._getPath(),
                hash = this._getHash(),
                query = this._getQuery(),
                rootURLIndex = path.indexOf(rootURL),
                routeHash, hashParts;

            ember$metal$core$$default.assert('Path ' + path + ' does not start with the provided rootURL ' + rootURL, rootURLIndex === 0);

            // By convention, Ember.js routes using HashLocation are required to start
            // with `#/`. Anything else should NOT be considered a route and should
            // be passed straight through, without transformation.
            if (hash.substr(0, 2) === '#/') {
              // There could be extra hash segments after the route
              hashParts = hash.substr(1).split('#');
              // The first one is always the route url
              routeHash = hashParts.shift();

              // If the path already has a trailing slash, remove the one
              // from the hashed route so we don't double up.
              if (path.slice(-1) === '/') {
                  routeHash = routeHash.substr(1);
              }

              // This is the "expected" final order
              path += routeHash;
              path += query;

              if (hashParts.length) {
                path += '#' + hashParts.join('#');
              }
            } else {
              path += query;
              path += hash;
            }

            return path;
          },

          /**
            @private

            Returns the current path as it should appear for HashLocation supported
            browsers. This may very well differ from the real current path.

            @method _getHashPath
          */
          _getHashPath: function () {
            var rootURL = this._getRootURL(),
                path = rootURL,
                historyPath = this._getHistoryPath(),
                routePath = historyPath.substr(rootURL.length);

            if (routePath !== '') {
              if (routePath.charAt(0) !== '/') {
                routePath = '/' + routePath;
              }

              path += '#' + routePath;
            }

            return path;
          },

          /**
            Selects the best location option based off browser support and returns an
            instance of that Location class.

            @see Ember.AutoLocation
            @method create
          */
          create: function (options) {
            if (options && options.rootURL) {
              ember$metal$core$$default.assert('rootURL must end with a trailing forward slash e.g. "/app/"', options.rootURL.charAt(options.rootURL.length-1) === '/');
              this.rootURL = options.rootURL;
            }

            var historyPath, hashPath,
                cancelRouterSetup = false,
                implementationClass = this._NoneLocation,
                currentPath = this._getFullPath();

            if (this._getSupportsHistory()) {
              historyPath = this._getHistoryPath();

              // Since we support history paths, let's be sure we're using them else
              // switch the location over to it.
              if (currentPath === historyPath) {
                implementationClass = this._HistoryLocation;
              } else {
                cancelRouterSetup = true;
                this._replacePath(historyPath);
              }

            } else if (this._getSupportsHashChange()) {
              hashPath = this._getHashPath();

              // Be sure we're using a hashed path, otherwise let's switch over it to so
              // we start off clean and consistent. We'll count an index path with no
              // hash as "good enough" as well.
              if (currentPath === hashPath || (currentPath === '/' && hashPath === '/#/')) {
                implementationClass = this._HashLocation;
              } else {
                // Our URL isn't in the expected hash-supported format, so we want to
                // cancel the router setup and replace the URL to start off clean
                cancelRouterSetup = true;
                this._replacePath(hashPath);
              }
            }

            var implementation = implementationClass.create.apply(implementationClass, arguments);

            if (cancelRouterSetup) {
              ember$metal$property_set$$set(implementation, 'cancelRouterSetup', true);
            }

            return implementation;
          }
        };
    }).call(this);

    (function() {
        function controllerFor(container, controllerName, lookupOptions) {
          return container.lookup('controller:' + controllerName, lookupOptions);
        }

        ember$routing$system$controller_for$$controllerFor = controllerFor;

        function generateControllerFactory(container, controllerName, context) {
          var Factory, fullName, instance, name, factoryName, controllerType;

          if (context && ember$metal$utils$$isArray(context)) {
            controllerType = 'array';
          } else if (context) {
            controllerType = 'object';
          } else {
            controllerType = 'basic';
          }

          factoryName = 'controller:' + controllerType;

          Factory = container.lookupFactory(factoryName).extend({
            isGenerated: true,
            toString: function() {
              return "(generated " + controllerName + " controller)";
            }
          });

          fullName = 'controller:' + controllerName;

          container.register(fullName,  Factory);

          return Factory;
        }

        ember$routing$system$controller_for$$generateControllerFactory = generateControllerFactory;

        function generateController(container, controllerName, context) {
          ember$routing$system$controller_for$$generateControllerFactory(container, controllerName, context);
          var fullName = 'controller:' + controllerName;
          var instance = container.lookup(fullName);

          if (ember$metal$property_get$$get(instance, 'namespace.LOG_ACTIVE_GENERATION')) {
            ember$metal$core$$default.Logger.info("generated -> " + fullName, { fullName: fullName });
          }

          return instance;
        }

        ember$routing$system$controller_for$$generateController = generateController;
    }).call(this);

    (function() {
        /**
        @module ember
        @submodule ember-routing
        */

        var a_forEach = ember$metal$enumerable_utils$$default.forEach;

        var a_replace = ember$metal$enumerable_utils$$default.replace;

        /**
          The `Ember.Route` class is used to define individual routes. Refer to
          the [routing guide](http://emberjs.com/guides/routing/) for documentation.

          @class Route
          @namespace Ember
          @extends Ember.Object
          @uses Ember.ActionHandler
        */
        var Route = ember$runtime$system$object$$default.extend(ember$runtime$mixins$action_handler$$default, {

          /**
            @private

            @method exit
          */
          exit: function() {
            if (ember$metal$core$$default.FEATURES.isEnabled("query-params-new")) {
              toggleQueryParamObservers(this, this.controller, false);
            }
            this.deactivate();
            this.teardownViews();
          },

          /**
            @private

            @method enter
          */
          enter: function() {
            this.activate();
          },

          /**
            The name of the view to use by default when rendering this routes template.

            When rendering a template, the route will, by default, determine the
            template and view to use from the name of the route itself. If you need to
            define a specific view, set this property.

            This is useful when multiple routes would benefit from using the same view
            because it doesn't require a custom `renderTemplate` method. For example,
            the following routes will all render using the `App.PostsListView` view:

            ```js
            var PostsList = Ember.Route.extend({
              viewName: 'postsList',
            });

            App.PostsIndexRoute = PostsList.extend();
            App.PostsArchivedRoute = PostsList.extend();
            ```

            @property viewName
            @type String
            @default null
            @since 1.4.0
          */
          viewName: null,

          /**
            The name of the template to use by default when rendering this routes
            template.

            This is similar with `viewName`, but is useful when you just want a custom
            template without a view.

            ```js
            var PostsList = Ember.Route.extend({
              templateName: 'posts/list'
            });

            App.PostsIndexRoute = PostsList.extend();
            App.PostsArchivedRoute = PostsList.extend();
            ```

            @property templateName
            @type String
            @default null
            @since 1.4.0
          */
          templateName: null,

          /**
            The name of the controller to associate with this route.

            By default, Ember will lookup a route's controller that matches the name
            of the route (i.e. `App.PostController` for `App.PostRoute`). However,
            if you would like to define a specific controller to use, you can do so
            using this property.

            This is useful in many ways, as the controller specified will be:

            * passed to the `setupController` method.
            * used as the controller for the view being rendered by the route.
            * returned from a call to `controllerFor` for the route.

            @property controllerName
            @type String
            @default null
            @since 1.4.0
          */
          controllerName: null,

          /**
            The `willTransition` action is fired at the beginning of any
            attempted transition with a `Transition` object as the sole
            argument. This action can be used for aborting, redirecting,
            or decorating the transition from the currently active routes.

            A good example is preventing navigation when a form is
            half-filled out:

            ```js
            App.ContactFormRoute = Ember.Route.extend({
              actions: {
                willTransition: function(transition) {
                  if (this.controller.get('userHasEnteredData')) {
                    this.controller.displayNavigationConfirm();
                    transition.abort();
                  }
                }
              }
            });
            ```

            You can also redirect elsewhere by calling
            `this.transitionTo('elsewhere')` from within `willTransition`.
            Note that `willTransition` will not be fired for the
            redirecting `transitionTo`, since `willTransition` doesn't
            fire when there is already a transition underway. If you want
            subsequent `willTransition` actions to fire for the redirecting
            transition, you must first explicitly call
            `transition.abort()`.

            @event willTransition
            @param {Transition} transition
          */

          /**
            The `didTransition` action is fired after a transition has
            successfully been completed. This occurs after the normal model
            hooks (`beforeModel`, `model`, `afterModel`, `setupController`)
            have resolved. The `didTransition` action has no arguments,
            however, it can be useful for tracking page views or resetting
            state on the controller.

            ```js
            App.LoginRoute = Ember.Route.extend({
              actions: {
                didTransition: function() {
                  this.controller.get('errors.base').clear();
                  return true; // Bubble the didTransition event
                }
              }
            });
            ```

            @event didTransition
            @since 1.2.0
          */

          /**
            The `loading` action is fired on the route when a route's `model`
            hook returns a promise that is not already resolved. The current
            `Transition` object is the first parameter and the route that
            triggered the loading event is the second parameter.

            ```js
            App.ApplicationRoute = Ember.Route.extend({
              actions: {
                loading: function(transition, route) {
                  var view = Ember.View.create({
                    classNames: ['app-loading']
                  })
                  .append();

                  this.router.one('didTransition', function () {
                    view.destroy();
                  });
                  return true; // Bubble the loading event
                }
              }
            });
            ```

            @event loading
            @param {Transition} transition
            @param {Ember.Route} route The route that triggered the loading event
            @since 1.2.0
          */

          /**
            When attempting to transition into a route, any of the hooks
            may return a promise that rejects, at which point an `error`
            action will be fired on the partially-entered routes, allowing
            for per-route error handling logic, or shared error handling
            logic defined on a parent route.

            Here is an example of an error handler that will be invoked
            for rejected promises from the various hooks on the route,
            as well as any unhandled errors from child routes:

            ```js
            App.AdminRoute = Ember.Route.extend({
              beforeModel: function() {
                return Ember.RSVP.reject("bad things!");
              },

              actions: {
                error: function(error, transition) {
                  // Assuming we got here due to the error in `beforeModel`,
                  // we can expect that error === "bad things!",
                  // but a promise model rejecting would also
                  // call this hook, as would any errors encountered
                  // in `afterModel`.

                  // The `error` hook is also provided the failed
                  // `transition`, which can be stored and later
                  // `.retry()`d if desired.

                  this.transitionTo('login');
                }
              }
            });
            ```

            `error` actions that bubble up all the way to `ApplicationRoute`
            will fire a default error handler that logs the error. You can
            specify your own global default error handler by overriding the
            `error` handler on `ApplicationRoute`:

            ```js
            App.ApplicationRoute = Ember.Route.extend({
              actions: {
                error: function(error, transition) {
                  this.controllerFor('banner').displayError(error.message);
                }
              }
            });
            ```
            @event error
            @param {Error} error
            @param {Transition} transition
          */

          /**
            The controller associated with this route.

            Example

            ```javascript
            App.FormRoute = Ember.Route.extend({
              actions: {
                willTransition: function(transition) {
                  if (this.controller.get('userHasEnteredData') &&
                      !confirm("Are you sure you want to abandon progress?")) {
                    transition.abort();
                  } else {
                    // Bubble the `willTransition` action so that
                    // parent routes can decide whether or not to abort.
                    return true;
                  }
                }
              }
            });
            ```

            @property controller
            @type Ember.Controller
            @since 1.6.0
          */

          _actions: {

            queryParamsDidChange: function(changed, totalPresent, removed) {
              if (ember$metal$core$$default.FEATURES.isEnabled("query-params-new")) {
                var totalChanged = ember$runtime$keys$$default(changed).concat(ember$runtime$keys$$default(removed));
                for (var i = 0, len = totalChanged.length; i < len; ++i) {
                  var urlKey = totalChanged[i],
                      options = ember$metal$property_get$$get(this.queryParams, urlKey) || {};
                  if (ember$metal$property_get$$get(options, 'refreshModel')) {
                    this.refresh();
                  }
                }
                return true;
              }
            },

            finalizeQueryParamChange: function(params, finalParams, transition) {
              if (ember$metal$core$$default.FEATURES.isEnabled("query-params-new")) {
                // In this hook we receive all the current values of
                // serialized query params. We need to take these values
                // and distribute them in their deserialized form into
                // controllers and remove any that no longer belong in
                // this route hierarchy.

                var controller = this.controller,
                    changes = controller._queryParamChangesDuringSuspension,
                    qpMeta = ember$metal$property_get$$get(this, '_qp');

                // Loop through all the query params that
                // this controller knows about.

                if (qpMeta) {
                  for (var i = 0, len = qpMeta.qps.length; i < len; ++i) {
                    var qp = qpMeta.qps[i],
                        qpProvided = qp.urlKey in params;

                    // Do a reverse lookup to see if the changed query
                    // param URL key corresponds to a QP property on
                    // this controller.
                    var value, svalue;
                    if (changes && qp.urlKey in changes) {
                      // Controller overrode this value in setupController
                      value = ember$metal$property_get$$get(controller, qp.prop);
                      svalue = this.serializeQueryParam(value, qp.urlKey, qp.type);
                    } else {
                      if (qpProvided) {
                        svalue = params[qp.urlKey];
                        value = this.deserializeQueryParam(svalue, qp.urlKey, qp.type);
                      } else {
                        // No QP provided; use default value.
                        svalue = qp.sdef;
                        value = qp.def;
                      }
                    }

                    // Delete from params so that parent routes
                    // don't also try to respond to changes to
                    // non-fully-qualified query param name changes
                    // (e.g. if two controllers in the same hiearchy
                    // specify a `page` query param)
                    delete params[qp.urlKey];

                    // Now check if this value actually changed.
                    if (svalue !== qp.svalue) {
                      var options = ember$metal$property_get$$get(this.queryParams, qp.urlKey) || {};

                      // Only use replace if transition wouldn't otherwise change the url
                      if (!transition.targetName && ember$metal$property_get$$get(options, 'replace')) {
                        transition.method('replace');
                      }

                      // Update QP cache
                      qp.svalue = svalue;
                      qp.value = value;

                      // Update controller without firing QP observers.
                      controller._finalizingQueryParams = true;
                      ember$metal$property_set$$set(controller, qp.prop, qp.value);
                      controller._finalizingQueryParams = false;
                    }

                    finalParams.push({
                      value: qp.svalue,
                      visible: qp.svalue !== qp.sdef,
                      key: qp.urlKey
                    });
                  }
                  controller._queryParamChangesDuringSuspension = null;
                }
                // Bubble so that parent routes can claim QPs.
                return true;
              }
            }
          },

          /**
            @deprecated

            Please use `actions` instead.
            @method events
          */
          events: null,

          mergedProperties: ['events'],

          /**
            This hook is executed when the router completely exits this route. It is
            not executed when the model for the route changes.

            @method deactivate
          */
          deactivate: ember$metal$core$$default.K,

          /**
            This hook is executed when the router enters the route. It is not executed
            when the model for the route changes.

            @method activate
          */
          activate: ember$metal$core$$default.K,

          /**
            Transition the application into another route. The route may
            be either a single route or route path:

            ```javascript
            this.transitionTo('blogPosts');
            this.transitionTo('blogPosts.recentEntries');
            ```

            Optionally supply a model for the route in question. The model
            will be serialized into the URL using the `serialize` hook of
            the route:

            ```javascript
            this.transitionTo('blogPost', aPost);
            ```

            If a literal is passed (such as a number or a string), it will
            be treated as an identifier instead. In this case, the `model`
            hook of the route will be triggered:

            ```javascript
            this.transitionTo('blogPost', 1);
            ```

            Multiple models will be applied last to first recursively up the
            resource tree.

            ```javascript
            App.Router.map(function() {
              this.resource('blogPost', {path:':blogPostId'}, function(){
                this.resource('blogComment', {path: ':blogCommentId'});
              });
            });

            this.transitionTo('blogComment', aPost, aComment);
            this.transitionTo('blogComment', 1, 13);
            ```

            It is also possible to pass a URL (a string that starts with a
            `/`). This is intended for testing and debugging purposes and
            should rarely be used in production code.

            ```javascript
            this.transitionTo('/');
            this.transitionTo('/blog/post/1/comment/13');
            ```

            See also 'replaceWith'.

            Simple Transition Example

            ```javascript
            App.Router.map(function() {
              this.route("index");
              this.route("secret");
              this.route("fourOhFour", { path: "*:"});
            });

            App.IndexRoute = Ember.Route.extend({
              actions: {
                moveToSecret: function(context){
                  if (authorized()){
                    this.transitionTo('secret', context);
                  }
                    this.transitionTo('fourOhFour');
                }
              }
            });
            ```

            Transition to a nested route

            ```javascript
            App.Router.map(function() {
              this.resource('articles', { path: '/articles' }, function() {
                this.route('new');
              });
            });

            App.IndexRoute = Ember.Route.extend({
              actions: {
                transitionToNewArticle: function() {
                  this.transitionTo('articles.new');
                }
              }
            });
            ```

            Multiple Models Example

            ```javascript
            App.Router.map(function() {
              this.route("index");
              this.resource('breakfast', {path:':breakfastId'}, function(){
                this.resource('cereal', {path: ':cerealId'});
              });
            });

            App.IndexRoute = Ember.Route.extend({
              actions: {
                moveToChocolateCereal: function(){
                  var cereal = { cerealId: "ChocolateYumminess"},
                      breakfast = {breakfastId: "CerealAndMilk"};

                  this.transitionTo('cereal', breakfast, cereal);
                }
              }
            });
            ```

            @method transitionTo
            @param {String} name the name of the route or a URL
            @param {...Object} models the model(s) or identifier(s) to be used while
              transitioning to the route.
            @return {Transition} the transition object associated with this
              attempted transition
          */
          transitionTo: function(name, context) {
            var router = this.router;
            return router.transitionTo.apply(router, arguments);
          },

          /**
            Perform a synchronous transition into another route without attempting
            to resolve promises, update the URL, or abort any currently active
            asynchronous transitions (i.e. regular transitions caused by
            `transitionTo` or URL changes).

            This method is handy for performing intermediate transitions on the
            way to a final destination route, and is called internally by the
            default implementations of the `error` and `loading` handlers.

            @method intermediateTransitionTo
            @param {String} name the name of the route
            @param {...Object} models the model(s) to be used while transitioning
            to the route.
            @since 1.2.0
           */
          intermediateTransitionTo: function() {
            var router = this.router;
            router.intermediateTransitionTo.apply(router, arguments);
          },

          /**
            Refresh the model on this route and any child routes, firing the
            `beforeModel`, `model`, and `afterModel` hooks in a similar fashion
            to how routes are entered when transitioning in from other route.
            The current route params (e.g. `article_id`) will be passed in
            to the respective model hooks, and if a different model is returned,
            `setupController` and associated route hooks will re-fire as well.

            An example usage of this method is re-querying the server for the
            latest information using the same parameters as when the route
            was first entered.

            Note that this will cause `model` hooks to fire even on routes
            that were provided a model object when the route was initially
            entered.

            @method refresh
            @return {Transition} the transition object associated with this
              attempted transition
            @since 1.4.0
           */
          refresh: function() {
            return this.router.router.refresh(this);
          },

          /**
            Transition into another route while replacing the current URL, if possible.
            This will replace the current history entry instead of adding a new one.
            Beside that, it is identical to `transitionTo` in all other respects. See
            'transitionTo' for additional information regarding multiple models.

            Example

            ```javascript
            App.Router.map(function() {
              this.route("index");
              this.route("secret");
            });

            App.SecretRoute = Ember.Route.extend({
              afterModel: function() {
                if (!authorized()){
                  this.replaceWith('index');
                }
              }
            });
            ```

            @method replaceWith
            @param {String} name the name of the route or a URL
            @param {...Object} models the model(s) or identifier(s) to be used while
              transitioning to the route.
            @return {Transition} the transition object associated with this
              attempted transition
          */
          replaceWith: function() {
            var router = this.router;
            return router.replaceWith.apply(router, arguments);
          },

          /**
            Sends an action to the router, which will delegate it to the currently
            active route hierarchy per the bubbling rules explained under `actions`.

            Example

            ```javascript
            App.Router.map(function() {
              this.route("index");
            });

            App.ApplicationRoute = Ember.Route.extend({
              actions: {
                track: function(arg) {
                  console.log(arg, 'was clicked');
                }
              }
            });

            App.IndexRoute = Ember.Route.extend({
              actions: {
                trackIfDebug: function(arg) {
                  if (debug) {
                    this.send('track', arg);
                  }
                }
              }
            });
            ```

            @method send
            @param {String} name the name of the action to trigger
            @param {...*} args
          */
          send: function() {
            return this.router.send.apply(this.router, arguments);
          },

          /**
            This hook is the entry point for router.js

            @private
            @method setup
          */
          setup: function(context, transition) {
            var controllerName = this.controllerName || this.routeName,
                controller = this.controllerFor(controllerName, true);
            if (!controller) {
              controller =  this.generateController(controllerName, context);
            }

            // Assign the route's controller so that it can more easily be
            // referenced in action handlers
            this.controller = controller;

            if (ember$metal$core$$default.FEATURES.isEnabled("query-params-new")) {
              toggleQueryParamObservers(this, controller, true);
            }

            if (this.setupControllers) {
              ember$metal$core$$default.deprecate("Ember.Route.setupControllers is deprecated. Please use Ember.Route.setupController(controller, model) instead.");
              this.setupControllers(controller, context);
            } else {

              if (ember$metal$core$$default.FEATURES.isEnabled("query-params-new")) {
                // Prevent updates to query params in setupController
                // from firing another transition. Updating QPs in
                // setupController will only affect the final
                // generated URL.
                controller._finalizingQueryParams = true;
                controller._queryParamChangesDuringSuspension = {};
                this.setupController(controller, context, transition);
                controller._finalizingQueryParams = false;
              } else {
                this.setupController(controller, context);
              }
            }

            if (this.renderTemplates) {
              ember$metal$core$$default.deprecate("Ember.Route.renderTemplates is deprecated. Please use Ember.Route.renderTemplate(controller, model) instead.");
              this.renderTemplates(context);
            } else {
              this.renderTemplate(controller, context);
            }
          },

          /**
            This hook is the first of the route entry validation hooks
            called when an attempt is made to transition into a route
            or one of its children. It is called before `model` and
            `afterModel`, and is appropriate for cases when:

            1) A decision can be made to redirect elsewhere without
               needing to resolve the model first.
            2) Any async operations need to occur first before the
               model is attempted to be resolved.

            This hook is provided the current `transition` attempt
            as a parameter, which can be used to `.abort()` the transition,
            save it for a later `.retry()`, or retrieve values set
            on it from a previous hook. You can also just call
            `this.transitionTo` to another route to implicitly
            abort the `transition`.

            You can return a promise from this hook to pause the
            transition until the promise resolves (or rejects). This could
            be useful, for instance, for retrieving async code from
            the server that is required to enter a route.

            ```js
            App.PostRoute = Ember.Route.extend({
              beforeModel: function(transition) {
                if (!App.Post) {
                  return Ember.$.getScript('/models/post.js');
                }
              }
            });
            ```

            If `App.Post` doesn't exist in the above example,
            `beforeModel` will use jQuery's `getScript`, which
            returns a promise that resolves after the server has
            successfully retrieved and executed the code from the
            server. Note that if an error were to occur, it would
            be passed to the `error` hook on `Ember.Route`, but
            it's also possible to handle errors specific to
            `beforeModel` right from within the hook (to distinguish
            from the shared error handling behavior of the `error`
            hook):

            ```js
            App.PostRoute = Ember.Route.extend({
              beforeModel: function(transition) {
                if (!App.Post) {
                  var self = this;
                  return Ember.$.getScript('post.js').then(null, function(e) {
                    self.transitionTo('help');

                    // Note that the above transitionTo will implicitly
                    // halt the transition. If you were to return
                    // nothing from this promise reject handler,
                    // according to promise semantics, that would
                    // convert the reject into a resolve and the
                    // transition would continue. To propagate the
                    // error so that it'd be handled by the `error`
                    // hook, you would have to either
                    return Ember.RSVP.reject(e);
                  });
                }
              }
            });
            ```

            @method beforeModel
            @param {Transition} transition
            @param {Object} queryParams the active query params for this route
            @return {Promise} if the value returned from this hook is
              a promise, the transition will pause until the transition
              resolves. Otherwise, non-promise return values are not
              utilized in any way.
          */
          beforeModel: ember$metal$core$$default.K,

          /**
            This hook is called after this route's model has resolved.
            It follows identical async/promise semantics to `beforeModel`
            but is provided the route's resolved model in addition to
            the `transition`, and is therefore suited to performing
            logic that can only take place after the model has already
            resolved.

            ```js
            App.PostsRoute = Ember.Route.extend({
              afterModel: function(posts, transition) {
                if (posts.get('length') === 1) {
                  this.transitionTo('post.show', posts.get('firstObject'));
                }
              }
            });
            ```

            Refer to documentation for `beforeModel` for a description
            of transition-pausing semantics when a promise is returned
            from this hook.

            @method afterModel
            @param {Object} resolvedModel the value returned from `model`,
              or its resolved value if it was a promise
            @param {Transition} transition
            @param {Object} queryParams the active query params for this handler
            @return {Promise} if the value returned from this hook is
              a promise, the transition will pause until the transition
              resolves. Otherwise, non-promise return values are not
              utilized in any way.
           */
          afterModel: ember$metal$core$$default.K,

          /**
            A hook you can implement to optionally redirect to another route.

            If you call `this.transitionTo` from inside of this hook, this route
            will not be entered in favor of the other hook.

            `redirect` and `afterModel` behave very similarly and are
            called almost at the same time, but they have an important
            distinction in the case that, from one of these hooks, a
            redirect into a child route of this route occurs: redirects
            from `afterModel` essentially invalidate the current attempt
            to enter this route, and will result in this route's `beforeModel`,
            `model`, and `afterModel` hooks being fired again within
            the new, redirecting transition. Redirects that occur within
            the `redirect` hook, on the other hand, will _not_ cause
            these hooks to be fired again the second time around; in
            other words, by the time the `redirect` hook has been called,
            both the resolved model and attempted entry into this route
            are considered to be fully validated.

            @method redirect
            @param {Object} model the model for this route
          */
          redirect: ember$metal$core$$default.K,

          /**
            Called when the context is changed by router.js.

            @private
            @method contextDidChange
          */
          contextDidChange: function() {
            this.currentModel = this.context;
          },

          /**
            A hook you can implement to convert the URL into the model for
            this route.

            ```js
            App.Router.map(function() {
              this.resource('post', {path: '/posts/:post_id'});
            });
            ```

            The model for the `post` route is `App.Post.find(params.post_id)`.

            By default, if your route has a dynamic segment ending in `_id`:

            * The model class is determined from the segment (`post_id`'s
              class is `App.Post`)
            * The find method is called on the model class with the value of
              the dynamic segment.

            Note that for routes with dynamic segments, this hook is only
            executed when entered via the URL. If the route is entered
            through a transition (e.g. when using the `link-to` Handlebars
            helper), then a model context is already provided and this hook
            is not called. Routes without dynamic segments will always
            execute the model hook.

            This hook follows the asynchronous/promise semantics
            described in the documentation for `beforeModel`. In particular,
            if a promise returned from `model` fails, the error will be
            handled by the `error` hook on `Ember.Route`.

            Example

            ```js
            App.PostRoute = Ember.Route.extend({
              model: function(params) {
                return App.Post.find(params.post_id);
              }
            });
            ```

            @method model
            @param {Object} params the parameters extracted from the URL
            @param {Transition} transition
            @param {Object} queryParams the query params for this route
            @return {Object|Promise} the model for this route. If
              a promise is returned, the transition will pause until
              the promise resolves, and the resolved value of the promise
              will be used as the model for this route.
          */
          model: function(params, transition) {
            var match, name, sawParams, value;

            var queryParams;
            if (ember$metal$core$$default.FEATURES.isEnabled("query-params-new")) {
              queryParams = ember$metal$property_get$$get(this, '_qp.map');
            }

            for (var prop in params) {
              if (prop === 'queryParams' || (queryParams && prop in queryParams)) {
                continue;
              }

              if (match = prop.match(/^(.*)_id$/)) {
                name = match[1];
                value = params[prop];
              }
              sawParams = true;
            }

            if (!name && sawParams) { return ember$runtime$copy$$default(params); }
            else if (!name) {
              if (transition.resolveIndex !== transition.state.handlerInfos.length-1) { return; }

              var parentModel = transition.state.handlerInfos[transition.resolveIndex-1].context;

              return parentModel;
            }

            return this.findModel(name, value);
          },

          /**
            @private
            @method deserialize
            @param {Object} params the parameters extracted from the URL
            @param {Transition} transition
            @return {Object|Promise} the model for this route.

            Router.js hook.
           */
          deserialize: function(params, transition) {
            if (ember$metal$core$$default.FEATURES.isEnabled("query-params-new")) {
              return this.model(this.paramsFor(this.routeName), transition);
            } else {
              return this.model(params, transition);
            }
          },

          /**

            @method findModel
            @param {String} type the model type
            @param {Object} value the value passed to find
          */
          findModel: function(){
            var store = ember$metal$property_get$$get(this, 'store');
            return store.find.apply(store, arguments);
          },

          /**
            Store property provides a hook for data persistence libraries to inject themselves.

            By default, this store property provides the exact same functionality previously
            in the model hook.

            Currently, the required interface is:

            `store.find(modelName, findArguments)`

            @method store
            @param {Object} store
          */
          store: ember$metal$computed$$computed(function(){
            var container = this.container;
            var routeName = this.routeName;
            var namespace = ember$metal$property_get$$get(this, 'router.namespace');

            return {
              find: function(name, value) {
                var modelClass = container.lookupFactory('model:' + name);

                ember$metal$core$$default.assert("You used the dynamic segment " + name + "_id in your route " +
                             routeName + ", but " + namespace + "." + ember$runtime$system$string$$classify(name) +
                             " did not exist and you did not override your route's `model` " +
                             "hook.", modelClass);

                if (!modelClass) { return; }

                ember$metal$core$$default.assert(ember$runtime$system$string$$classify(name) + ' has no method `find`.', typeof modelClass.find === 'function');

                return modelClass.find(value);
              }
            };
          }),

          /**
            A hook you can implement to convert the route's model into parameters
            for the URL.

            ```js
            App.Router.map(function() {
              this.resource('post', {path: '/posts/:post_id'});
            });

            App.PostRoute = Ember.Route.extend({
              model: function(params) {
                // the server returns `{ id: 12 }`
                return jQuery.getJSON("/posts/" + params.post_id);
              },

              serialize: function(model) {
                // this will make the URL `/posts/12`
                return { post_id: model.id };
              }
            });
            ```

            The default `serialize` method will insert the model's `id` into the
            route's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.
            If the route has multiple dynamic segments or does not contain '_id', `serialize`
            will return `Ember.getProperties(model, params)`

            This method is called when `transitionTo` is called with a context
            in order to populate the URL.

            @method serialize
            @param {Object} model the route's model
            @param {Array} params an Array of parameter names for the current
              route (in the example, `['post_id']`.
            @return {Object} the serialized parameters
          */
          serialize: function(model, params) {
            if (params.length < 1) { return; }
            if (!model) { return; }

            var name = params[0], object = {};

            if (/_id$/.test(name) && params.length === 1) {
              object[name] = ember$metal$property_get$$get(model, "id");
            } else {
              object = ember$metal$get_properties$$default(model, params);
            }

            return object;
          },

          /**
            A hook you can use to setup the controller for the current route.

            This method is called with the controller for the current route and the
            model supplied by the `model` hook.

            By default, the `setupController` hook sets the `model` property of
            the controller to the `model`.

            If you implement the `setupController` hook in your Route, it will
            prevent this default behavior. If you want to preserve that behavior
            when implementing your `setupController` function, make sure to call
            `_super`:

            ```js
            App.PhotosRoute = Ember.Route.extend({
              model: function() {
                return App.Photo.find();
              },

              setupController: function (controller, model) {
                // Call _super for default behavior
                this._super(controller, model);
                // Implement your custom setup after
                this.controllerFor('application').set('showingPhotos', true);
              }
            });
            ```

            This means that your template will get a proxy for the model as its
            context, and you can act as though the model itself was the context.

            The provided controller will be one resolved based on the name
            of this route.

            If no explicit controller is defined, Ember will automatically create
            an appropriate controller for the model.

            * if the model is an `Ember.Array` (including record arrays from Ember
              Data), the controller is an `Ember.ArrayController`.
            * otherwise, the controller is an `Ember.ObjectController`.

            As an example, consider the router:

            ```js
            App.Router.map(function() {
              this.resource('post', {path: '/posts/:post_id'});
            });
            ```

            For the `post` route, a controller named `App.PostController` would
            be used if it is defined. If it is not defined, an `Ember.ObjectController`
            instance would be used.

            Example

            ```js
            App.PostRoute = Ember.Route.extend({
              setupController: function(controller, model) {
                controller.set('model', model);
              }
            });
            ```

            @method setupController
            @param {Controller} controller instance
            @param {Object} model
          */
          setupController: function(controller, context, transition) {
            if (controller && (context !== undefined)) {
              ember$metal$property_set$$set(controller, 'model', context);
            }
          },

          /**
            Returns the controller for a particular route or name.

            The controller instance must already have been created, either through entering the
            associated route or using `generateController`.

            ```js
            App.PostRoute = Ember.Route.extend({
              setupController: function(controller, post) {
                this._super(controller, post);
                this.controllerFor('posts').set('currentPost', post);
              }
            });
            ```

            @method controllerFor
            @param {String} name the name of the route or controller
            @return {Ember.Controller}
          */
          controllerFor: function(name, _skipAssert) {
            var container = this.container,
                route = container.lookup('route:'+name),
                controller;

            if (route && route.controllerName) {
              name = route.controllerName;
            }

            controller = container.lookup('controller:' + name);

            // NOTE: We're specifically checking that skipAssert is true, because according
            //   to the old API the second parameter was model. We do not want people who
            //   passed a model to skip the assertion.
            ember$metal$core$$default.assert("The controller named '"+name+"' could not be found. Make sure " +
                         "that this route exists and has already been entered at least " +
                         "once. If you are accessing a controller not associated with a " +
                         "route, make sure the controller class is explicitly defined.",
                         controller || _skipAssert === true);

            return controller;
          },

          /**
            Generates a controller for a route.

            If the optional model is passed then the controller type is determined automatically,
            e.g., an ArrayController for arrays.

            Example

            ```js
            App.PostRoute = Ember.Route.extend({
              setupController: function(controller, post) {
                this._super(controller, post);
                this.generateController('posts', post);
              }
            });
            ```

            @method generateController
            @param {String} name the name of the controller
            @param {Object} model the model to infer the type of the controller (optional)
          */
          generateController: function(name, model) {
            var container = this.container;

            model = model || this.modelFor(name);

            return ember$routing$system$controller_for$$generateController(container, name, model);
          },

          /**
            Returns the model of a parent (or any ancestor) route
            in a route hierarchy.  During a transition, all routes
            must resolve a model object, and if a route
            needs access to a parent route's model in order to
            resolve a model (or just reuse the model from a parent),
            it can call `this.modelFor(theNameOfParentRoute)` to
            retrieve it.

            Example

            ```js
            App.Router.map(function() {
                this.resource('post', { path: '/post/:post_id' }, function() {
                    this.resource('comments');
                });
            });

            App.CommentsRoute = Ember.Route.extend({
                afterModel: function() {
                    this.set('post', this.modelFor('post'));
                }
            });
            ```

            @method modelFor
            @param {String} name the name of the route
            @return {Object} the model object
          */
          modelFor: function(name) {

            var route = this.container.lookup('route:' + name),
                transition = this.router.router.activeTransition;

            // If we are mid-transition, we want to try and look up
            // resolved parent contexts on the current transitionEvent.
            if (transition) {
              var modelLookupName = (route && route.routeName) || name;
              if (transition.resolvedModels.hasOwnProperty(modelLookupName)) {
                return transition.resolvedModels[modelLookupName];
              }
            }

            return route && route.currentModel;
          },

          /**
            A hook you can use to render the template for the current route.

            This method is called with the controller for the current route and the
            model supplied by the `model` hook. By default, it renders the route's
            template, configured with the controller for the route.

            This method can be overridden to set up and render additional or
            alternative templates.

            ```js
            App.PostsRoute = Ember.Route.extend({
              renderTemplate: function(controller, model) {
                var favController = this.controllerFor('favoritePost');

                // Render the `favoritePost` template into
                // the outlet `posts`, and display the `favoritePost`
                // controller.
                this.render('favoritePost', {
                  outlet: 'posts',
                  controller: favController
                });
              }
            });
            ```

            @method renderTemplate
            @param {Object} controller the route's controller
            @param {Object} model the route's model
          */
          renderTemplate: function(controller, model) {
            this.render();
          },

          /**
            Renders a template into an outlet.

            This method has a number of defaults, based on the name of the
            route specified in the router.

            For example:

            ```js
            App.Router.map(function() {
              this.route('index');
              this.resource('post', {path: '/posts/:post_id'});
            });

            App.PostRoute = App.Route.extend({
              renderTemplate: function() {
                this.render();
              }
            });
            ```

            The name of the `PostRoute`, as defined by the router, is `post`.

            By default, render will:

            * render the `post` template
            * with the `post` view (`PostView`) for event handling, if one exists
            * and the `post` controller (`PostController`), if one exists
            * into the `main` outlet of the `application` template

            You can override this behavior:

            ```js
            App.PostRoute = App.Route.extend({
              renderTemplate: function() {
                this.render('myPost', {   // the template to render
                  into: 'index',          // the template to render into
                  outlet: 'detail',       // the name of the outlet in that template
                  controller: 'blogPost'  // the controller to use for the template
                });
              }
            });
            ```

            Remember that the controller's `model` will be the route's model. In
            this case, the default model will be `App.Post.find(params.post_id)`.

            @method render
            @param {String} name the name of the template to render
            @param {Object} options the options
          */
          render: function(name, options) {
            ember$metal$core$$default.assert("The name in the given arguments is undefined", arguments.length > 0 ? !ember$metal$is_none$$isNone(arguments[0]) : true);

            var namePassed = typeof name === 'string' && !!name;

            if (typeof name === 'object' && !options) {
              options = name;
              name = this.routeName;
            }

            options = options || {};

            var templateName;

            if (name) {
              name = name.replace(/\//g, '.');
              templateName = name;
            } else {
              name = this.routeName;
              templateName = this.templateName || name;
            }

            var viewName = options.view || namePassed && name || this.viewName || name;

            var container = this.container,
                view = container.lookup('view:' + viewName),
                template = view ? view.get('template') : null;

            if (!template) {
              template = container.lookup('template:' + templateName);
            }

            if (!view && !template) {
              ember$metal$core$$default.assert("Could not find \"" + name + "\" template or view.", ember$metal$core$$default.isEmpty(arguments[0]));
              if (ember$metal$property_get$$get(this.router, 'namespace.LOG_VIEW_LOOKUPS')) {
                ember$metal$core$$default.Logger.info("Could not find \"" + name + "\" template or view. Nothing will be rendered", { fullName: 'template:' + name });
              }
              return;
            }

            options = normalizeOptions(this, name, template, options);
            view = setupView(view, container, options);

            if (options.outlet === 'main') { this.lastRenderedTemplate = name; }

            appendView(this, view, options);
          },

          /**
            Disconnects a view that has been rendered into an outlet.

            You may pass any or all of the following options to `disconnectOutlet`:

            * `outlet`: the name of the outlet to clear (default: 'main')
            * `parentView`: the name of the view containing the outlet to clear
               (default: the view rendered by the parent route)

            Example:

            ```js
            App.ApplicationRoute = App.Route.extend({
              actions: {
                showModal: function(evt) {
                  this.render(evt.modalName, {
                    outlet: 'modal',
                    into: 'application'
                  });
                },
                hideModal: function(evt) {
                  this.disconnectOutlet({
                    outlet: 'modal',
                    parentView: 'application'
                  });
                }
              }
            });
            ```

            Alternatively, you can pass the `outlet` name directly as a string.

            Example:

            ```js
            hideModal: function(evt) {
              this.disconnectOutlet('modal');
            }
            ```

            @method disconnectOutlet
            @param {Object|String} options the options hash or outlet name
          */
          disconnectOutlet: function(options) {
            if (!options || typeof options === "string") {
              var outletName = options;
              options = {};
              options.outlet = outletName;
            }
            options.parentView = options.parentView ? options.parentView.replace(/\//g, '.') : parentTemplate(this);
            options.outlet = options.outlet || 'main';

            var parentView = this.router._lookupActiveView(options.parentView);
            if (parentView) { parentView.disconnectOutlet(options.outlet); }
          },

          willDestroy: function() {
            this.teardownViews();
          },

          /**
            @private

            @method teardownViews
          */
          teardownViews: function() {
            // Tear down the top level view
            if (this.teardownTopLevelView) { this.teardownTopLevelView(); }

            // Tear down any outlets rendered with 'into'
            var teardownOutletViews = this.teardownOutletViews || [];
            a_forEach(teardownOutletViews, function(teardownOutletView) {
              teardownOutletView();
            });

            delete this.teardownTopLevelView;
            delete this.teardownOutletViews;
            delete this.lastRenderedTemplate;
          }
        });

        if (ember$metal$core$$default.FEATURES.isEnabled("query-params-new")) {
          Route.reopen({
            /**
              Configuration hash for this route's queryParams. The possible
              configuration options and their defaults are as follows
              (assuming a query param whose URL key is `page`):

              ```js
              queryParams: {
                page: {
                  // By default, controller query param properties don't
                  // cause a full transition when they are changed, but
                  // rather only cause the URL to update. Setting
                  // `refreshModel` to true will cause an "in-place"
                  // transition to occur, whereby the model hooks for
                  // this route (and any child routes) will re-fire, allowing
                  // you to reload models (e.g., from the server) using the
                  // updated query param values.
                  refreshModel: false,

                  // By default, changes to controller query param properties
                  // cause the URL to update via `pushState`, which means an
                  // item will be added to the browser's history, allowing
                  // you to use the back button to restore the app to the
                  // previous state before the query param property was changed.
                  // Setting `replace` to true will use `replaceState` (or its
                  // hash location equivalent), which causes no browser history
                  // item to be added. This options name and default value are
                  // the same as the `link-to` helper's `replace` option.
                  replace: false
                }
              }
              ```

              @property queryParams
              @for Ember.Route
              @type Hash
            */
            queryParams: {},

            _qp: ember$metal$computed$$computed(function() {
              var controllerName = this.controllerName || this.routeName,
                  fullName = this.container.normalize('controller:' + controllerName),
                  controllerClass = this.container.lookupFactory(fullName);

              if (!controllerClass) { return; }

              var controllerProto = controllerClass.proto(),
                  queryParams = ember$metal$property_get$$get(controllerProto, 'queryParams');

              if (!queryParams || queryParams.length === 0) { return; }

              var qps = [], map = {};
              for (var i = 0, len = queryParams.length; i < len; ++i) {
                var queryParamMapping = queryParams[i],
                    parts = queryParamMapping.split(':'),
                    propName = parts[0],
                    urlKey = parts[1] || propName,
                    defaultValue = ember$metal$property_get$$get(controllerProto, propName),
                    type = ember$metal$utils$$typeOf(defaultValue),
                    defaultValueSerialized = this.serializeQueryParam(defaultValue, urlKey, type),
                    qp = {
                      def: defaultValue,
                      sdef: defaultValueSerialized,
                      type: type,
                      urlKey: urlKey,
                      prop: propName,
                      ctrl: controllerName,
                      value: defaultValue,
                      svalue: defaultValueSerialized,
                      route: this
                    };

                // Construct all the different ways this query param
                // can be referenced, either from link-to or transitionTo:
                // - {{link-to (query-params page=5)}}
                // - {{link-to (query-params articles:page=5)}}
                // - {{link-to (query-params articles_page=5)}}
                // - {{link-to (query-params articles:articles_page=5)}}
                // - transitionTo({ queryParams: { page: 5 } })
                // ... etc.

                map[propName] = map[urlKey] = map[controllerName + ':' + propName] = qp;
                qps.push(qp);
              }

              return {
                qps: qps,
                map: map
              };
            }),

            mergedProperties: ['queryParams'],

            paramsFor: function(name) {
              var route = this.container.lookup('route:' + name);

              if (!route) {
                return {};
              }

              var transition = this.router.router.activeTransition,
                  params, queryParams;

              if (transition) {
                params = transition.params[name] || {};
                queryParams = transition.queryParams;
              } else {
                var state = this.router.router.state;
                params = state.params[name] || {};
                queryParams = state.queryParams;
              }

              var qpMeta = ember$metal$property_get$$get(route, '_qp');

              if (!qpMeta) {
                // No query params specified on the controller.
                return params;
              }

              var qps = qpMeta.qps, map = qpMeta.map, qp;

              // Loop through all the query params defined on the controller
              for (var i = 0, len = qps.length; i < len; ++i) {
                // Put deserialized qp on params hash.
                qp = qps[i];
                params[qp.urlKey] = qp.value;
              }

              // Override params hash values with any input query params
              // from the transition attempt.
              for (var urlKey in queryParams) {
                // Ignore any params not for this route.
                if (!(urlKey in map)) { continue; }

                var svalue = queryParams[urlKey];
                qp = map[urlKey];
                if (svalue === null) {
                  // Query param was removed from address bar.
                  svalue = qp.sdef;
                }

                // Deserialize and stash on params.
                params[urlKey] = route.deserializeQueryParam(svalue, urlKey, qp.type);
              }

              return params;
            },

            serializeQueryParam: function(value, urlKey, defaultValueType) {
              // urlKey isn't used here, but anyone overriding
              // can use it to provide serialization specific
              // to a certain query param.
              if (defaultValueType === 'array') {
                return JSON.stringify(value);
              }
              return '' + value;
            },

            deserializeQueryParam: function(value, urlKey, defaultValueType) {
              // urlKey isn't used here, but anyone overriding
              // can use it to provide deserialization specific
              // to a certain query param.

              // Use the defaultValueType of the default value (the initial value assigned to a
              // controller query param property), to intelligently deserialize and cast.
              if (defaultValueType === 'boolean') {
                return (value === 'true') ? true : false;
              } else if (defaultValueType === 'number') {
                return (Number(value)).valueOf();
              } else if (defaultValueType === 'array') {
                return ember$metal$core$$default.A(JSON.parse(value));
              }
              return value;
            },

            _qpChanged: function(controller, propName) {
              // Normalize array observer firings.
              if (propName.slice(propName.length - 3) === '.[]') {
                propName = propName.substr(0, propName.length-3);
              }

              var qpMeta = ember$metal$property_get$$get(this, '_qp'),
                  qp = qpMeta.map[propName];

              if (controller._finalizingQueryParams) {
                var changes = controller._queryParamChangesDuringSuspension;
                if (changes) {
                  changes[qp.urlKey] = true;
                }
                return;
              }

              var value = ember$runtime$copy$$default(ember$metal$property_get$$get(controller, propName));

              this.router._queuedQPChanges[qp.prop] = value;
              ember$metal$run_loop$$default.once(this, this._fireQueryParamTransition);
            },

            _fireQueryParamTransition: function() {
              this.transitionTo({ queryParams: this.router._queuedQPChanges });
              this.router._queuedQPChanges = {};
            }
          });
        }

        function parentRoute(route) {
          var handlerInfos = route.router.router.state.handlerInfos;

          if (!handlerInfos) { return; }

          var parent, current;

          for (var i=0, l=handlerInfos.length; i<l; i++) {
            current = handlerInfos[i].handler;
            if (current === route) { return parent; }
            parent = current;
          }
        }

        function parentTemplate(route) {
          var parent = parentRoute(route), template;

          if (!parent) { return; }

          if (template = parent.lastRenderedTemplate) {
            return template;
          } else {
            return parentTemplate(parent);
          }
        }

        function normalizeOptions(route, name, template, options) {
          options = options || {};
          options.into = options.into ? options.into.replace(/\//g, '.') : parentTemplate(route);
          options.outlet = options.outlet || 'main';
          options.name = name;
          options.template = template;
          options.LOG_VIEW_LOOKUPS = ember$metal$property_get$$get(route.router, 'namespace.LOG_VIEW_LOOKUPS');

          ember$metal$core$$default.assert("An outlet ("+options.outlet+") was specified but was not found.", options.outlet === 'main' || options.into);

          var controller = options.controller,
              model = options.model,
              namedController;

          if (options.controller) {
            controller = options.controller;
          } else if (namedController = route.container.lookup('controller:' + name)) {
            controller = namedController;
          } else {
            controller = route.controllerName || route.routeName;
          }

          if (typeof controller === 'string') {
            var controllerName = controller;
            controller = route.container.lookup('controller:' + controllerName);
            if (!controller) {
              throw new ember$metal$error$$default("You passed `controller: '" + controllerName + "'` into the `render` method, but no such controller could be found.");
            }
          }

          if (model) {
            controller.set('model', model);
          }

          options.controller = controller;

          return options;
        }

        function setupView(view, container, options) {
          if (view) {
            if (options.LOG_VIEW_LOOKUPS) {
              ember$metal$core$$default.Logger.info("Rendering " + options.name + " with " + view, { fullName: 'view:' + options.name });
            }
          } else {
            var defaultView = options.into ? 'view:default' : 'view:toplevel';
            view = container.lookup(defaultView);
            if (options.LOG_VIEW_LOOKUPS) {
              ember$metal$core$$default.Logger.info("Rendering " + options.name + " with default view " + view, { fullName: 'view:' + options.name });
            }
          }

          if (!ember$metal$property_get$$get(view, 'templateName')) {
            ember$metal$property_set$$set(view, 'template', options.template);

            ember$metal$property_set$$set(view, '_debugTemplateName', options.name);
          }

          ember$metal$property_set$$set(view, 'renderedName', options.name);
          ember$metal$property_set$$set(view, 'controller', options.controller);

          return view;
        }

        function appendView(route, view, options) {
          if (options.into) {
            var parentView = route.router._lookupActiveView(options.into);
            var teardownOutletView = generateOutletTeardown(parentView, options.outlet);
            if (!route.teardownOutletViews) { route.teardownOutletViews = []; }
            a_replace(route.teardownOutletViews, 0, 0, [teardownOutletView]);
            parentView.connectOutlet(options.outlet, view);
          } else {
            var rootElement = ember$metal$property_get$$get(route, 'router.namespace.rootElement');
            // tear down view if one is already rendered
            if (route.teardownTopLevelView) {
              route.teardownTopLevelView();
            }
            route.router._connectActiveView(options.name, view);
            route.teardownTopLevelView = generateTopLevelTeardown(view);
            view.appendTo(rootElement);
          }
        }

        function generateTopLevelTeardown(view) {
          return function() { view.destroy(); };
        }

        function generateOutletTeardown(parentView, outlet) {
          return function() { parentView.disconnectOutlet(outlet); };
        }

        function toggleQueryParamObservers(route, controller, enable) {
          var queryParams = ember$metal$property_get$$get(controller, 'queryParams'), i, len,
              method = enable ? 'addObserver' : 'removeObserver';

          for (i = 0, len = queryParams.length; i < len; ++i) {
            var prop = queryParams[i].split(':')[0];
            controller[method](prop,         route, route._qpChanged);
            controller[method](prop + '.[]', route, route._qpChanged);
          }
        }

        ember$routing$system$route$$default = Route;
    }).call(this);

    (function() {
        ember$routing$helpers$outlet$$OutletView = ember$views$views$container_view$$default.extend(ember$handlebars$views$metamorph_view$$_Metamorph);

        function outletHelper(property, options) {
          var outletSource;
          var container;
          var viewName;
          var viewClass;
          var viewFullName;

          if (property && property.data && property.data.isRenderData) {
            options = property;
            property = 'main';
          }

          container = options.data.view.container;

          outletSource = options.data.view;
          while (!outletSource.get('template.isTop')) {
            outletSource = outletSource.get('_parentView');
          }

          // provide controller override
          viewName = options.hash.view;

          if (viewName) {
            viewFullName = 'view:' + viewName;
            ember$metal$core$$default.assert("Using a quoteless view parameter with {{outlet}} is not supported. Please update to quoted usage '{{outlet \"" + viewName + "\"}}.", options.hashTypes.view !== 'ID');
            ember$metal$core$$default.assert("The view name you supplied '" + viewName + "' did not resolve to a view.", container.has(viewFullName));
          }

          viewClass = viewName ? container.lookupFactory(viewFullName) : options.hash.viewClass || ember$routing$helpers$outlet$$OutletView;

          options.data.view.set('outletSource', outletSource);
          options.hash.currentViewBinding = '_view.outletSource._outlets.' + property;

          options.helperName = options.helperName || 'outlet';

          return ember$handlebars$helpers$view$$viewHelper.call(this, viewClass, options);
        }

        ember$routing$helpers$outlet$$outletHelper = outletHelper;
    }).call(this);

    (function() {
        ember$routing$helpers$render$$default = function renderHelper(name, contextString, options) {
          var length = arguments.length;

          var contextProvided = length === 3,
              container, router, controller, view, context, lookupOptions;

          container = (options || contextString).data.keywords.controller.container;
          router = container.lookup('router:main');

          if (length === 2) {
            // use the singleton controller
            options = contextString;
            contextString = undefined;
            ember$metal$core$$default.assert("You can only use the {{render}} helper once without a model object as its second argument, as in {{render \"post\" post}}.", !router || !router._lookupActiveView(name));
          } else if (length === 3) {
            // create a new controller
            context = ember$handlebars$ext$$handlebarsGet(options.contexts[1], contextString, options);
          } else {
            throw new ember$metal$error$$default("You must pass a templateName to render");
          }

          ember$metal$core$$default.deprecate("Using a quoteless parameter with {{render}} is deprecated. Please update to quoted usage '{{render \"" + name + "\"}}.", options.types[0] !== 'ID');

          // # legacy namespace
          name = name.replace(/\//g, '.');
          // \ legacy slash as namespace support


          view = container.lookup('view:' + name) || container.lookup('view:default');

          // provide controller override
          var controllerName = options.hash.controller || name;
          var controllerFullName = 'controller:' + controllerName;

          if (options.hash.controller) {
            ember$metal$core$$default.assert("The controller name you supplied '" + controllerName + "' did not resolve to a controller.", container.has(controllerFullName));
          }

          var parentController = options.data.keywords.controller;

          // choose name
          if (length > 2) {
            var factory = container.lookupFactory(controllerFullName) ||
                          ember$routing$system$controller_for$$generateControllerFactory(container, controllerName, context);

            controller = factory.create({
              model: context,
              parentController: parentController,
              target: parentController
            });

            view.one('willDestroyElement', function() {
              controller.destroy();
            });
          } else {
            controller = container.lookup(controllerFullName) ||
                         ember$routing$system$controller_for$$generateController(container, controllerName);

            controller.setProperties({
              target: parentController,
              parentController: parentController
            });
          }

          var root = options.contexts[1];

          if (root) {
            view.registerObserver(root, contextString, function() {
              controller.set('model', ember$handlebars$ext$$handlebarsGet(root, contextString, options));
            });
          }

          options.hash.viewName = ember$runtime$system$string$$camelize(name);

          var templateName = 'template:' + name;
          ember$metal$core$$default.assert("You used `{{render '" + name + "'}}`, but '" + name + "' can not be found as either a template or a view.", container.has("view:" + name) || container.has(templateName) || options.fn);
          options.hash.template = container.lookup(templateName);

          options.hash.controller = controller;

          if (router && !context) {
            router._connectActiveView(name, view);
          }

          options.helperName = options.helperName || ('render "' + name + '"');

          ember$handlebars$helpers$view$$viewHelper.call(this, view, options);
        };
    }).call(this);

    (function() {
        // requireModule('ember-handlebars');

        /**
        @module ember
        @submodule ember-routing
        */

        var SafeString = ember$handlebars$$default.SafeString;

        var a_slice = Array.prototype.slice;

        function args(options, actionName) {
          var ret = [];
          if (actionName) { ret.push(actionName); }

          var types = options.options.types.slice(1),
              data = options.options.data;

          return ret.concat(ember$routing$helpers$shared$$resolveParams(options.context, options.params, { types: types, data: data }));
        }

        ember$routing$helpers$action$$ActionHelper = {
          registeredActions: {}
        };

        var keys = ["alt", "shift", "meta", "ctrl"];
        var POINTER_EVENT_TYPE_REGEX = /^click|mouse|touch/;

        var isAllowedEvent = function(event, allowedKeys) {
          if (typeof allowedKeys === "undefined") {
            if (POINTER_EVENT_TYPE_REGEX.test(event.type)) {
              return ember$views$system$utils$$isSimpleClick(event);
            } else {
              allowedKeys = '';
            }
          }

          if (allowedKeys.indexOf("any") >= 0) {
            return true;
          }

          var allowed = true;

          ember$metal$array$$forEach.call(keys, function(key) {
            if (event[key + "Key"] && allowedKeys.indexOf(key) === -1) {
              allowed = false;
            }
          });

          return allowed;
        };

        ember$routing$helpers$action$$ActionHelper.registerAction = function(actionNameOrPath, options, allowedKeys) {
          var actionId = ++ember$metal$core$$default.uuid;

          ember$routing$helpers$action$$ActionHelper.registeredActions[actionId] = {
            eventName: options.eventName,
            handler: function handleRegisteredAction(event) {
              if (!isAllowedEvent(event, allowedKeys)) { return true; }

              if (options.preventDefault !== false) {
                event.preventDefault();
              }

              if (options.bubbles === false) {
                event.stopPropagation();
              }

              var target = options.target,
                  parameters = options.parameters,
                  actionName;

              if (target.target) {
                target = ember$handlebars$ext$$handlebarsGet(target.root, target.target, target.options);
              } else {
                target = target.root;
              }

              if (options.boundProperty) {
                actionName = ember$routing$helpers$shared$$resolveParams(parameters.context, [actionNameOrPath], { types: ['ID'], data: parameters.options.data })[0];

                if(typeof actionName === 'undefined' || typeof actionName === 'function') {
                  ember$metal$core$$default.assert("You specified a quoteless path to the {{action}} helper '" + actionNameOrPath + "' which did not resolve to an actionName. Perhaps you meant to use a quoted actionName? (e.g. {{action '" + actionNameOrPath + "'}}).", true);
                  actionName = actionNameOrPath;
                }
              }

              if (!actionName) {
                actionName = actionNameOrPath;
              }

              ember$metal$run_loop$$default(function runRegisteredAction() {
                if (target.send) {
                  target.send.apply(target, args(parameters, actionName));
                } else {
                  ember$metal$core$$default.assert("The action '" + actionName + "' did not exist on " + target, typeof target[actionName] === 'function');
                  target[actionName].apply(target, args(parameters));
                }
              });
            }
          };

          options.view.on('willClearRender', function() {
            delete ember$routing$helpers$action$$ActionHelper.registeredActions[actionId];
          });

          return actionId;
        };

        function actionHelper(actionName) {
          var options = arguments[arguments.length - 1],
              contexts = a_slice.call(arguments, 1, -1);

          var hash = options.hash,
              controller = options.data.keywords.controller;

          // create a hash to pass along to registerAction
          var action = {
            eventName: hash.on || "click",
            parameters: {
              context: this,
              options: options,
              params: contexts
            },
            view: options.data.view,
            bubbles: hash.bubbles,
            preventDefault: hash.preventDefault,
            target: { options: options },
            boundProperty: options.types[0] === "ID"
          };

          if (hash.target) {
            action.target.root = this;
            action.target.target = hash.target;
          } else if (controller) {
            action.target.root = controller;
          }

          var actionId = ember$routing$helpers$action$$ActionHelper.registerAction(actionName, action, hash.allowedKeys);
          return new SafeString('data-ember-action="' + actionId + '"');
        }

        ember$routing$helpers$action$$actionHelper = actionHelper;
    }).call(this);

    (function() {
        ember$metal$core$$default.Location = ember$routing$location$api$$default;
        ember$metal$core$$default.AutoLocation = ember$routing$location$auto_location$$default;
        ember$metal$core$$default.HashLocation = ember$routing$location$hash_location$$default;
        ember$metal$core$$default.HistoryLocation = ember$routing$location$history_location$$default;
        ember$metal$core$$default.NoneLocation = ember$routing$location$none_location$$default;
        ember$metal$core$$default.controllerFor = ember$routing$system$controller_for$$controllerFor;
        ember$metal$core$$default.generateControllerFactory = ember$routing$system$controller_for$$generateControllerFactory;
        ember$metal$core$$default.generateController = ember$routing$system$controller_for$$generateController;
        ember$metal$core$$default.RouterDSL = ember$routing$system$dsl$$default;
        ember$metal$core$$default.Router = ember$routing$system$router$$default;
        ember$metal$core$$default.Route = ember$routing$system$route$$default;
        ember$metal$core$$default.LinkView = ember$routing$helpers$link_to$$LinkView;
        ember$routing$system$router$$default.resolveParams = ember$routing$helpers$shared$$resolveParams;
        ember$routing$system$router$$default.resolvePaths = ember$routing$helpers$shared$$resolvePaths;
        ember$handlebars$$default.ActionHelper = ember$routing$helpers$action$$ActionHelper;
        ember$handlebars$$default.OutletView = ember$routing$helpers$outlet$$OutletView;
        ember$handlebars$$default.registerHelper('render', ember$routing$helpers$render$$default);
        ember$handlebars$$default.registerHelper('action', ember$routing$helpers$action$$actionHelper);
        ember$handlebars$$default.registerHelper('outlet', ember$routing$helpers$outlet$$outletHelper);
        ember$handlebars$$default.registerHelper('link-to', ember$routing$helpers$link_to$$linkToHelper);
        ember$handlebars$$default.registerHelper('linkTo', ember$routing$helpers$link_to$$deprecatedLinkToHelper);
        ember$routing$$default = ember$metal$core$$default;
    }).call(this);

    (function() {
        function visit(vertex, fn, visited, path) {
          var name = vertex.name,
            vertices = vertex.incoming,
            names = vertex.incomingNames,
            len = names.length,
            i;
          if (!visited) {
            visited = {};
          }
          if (!path) {
            path = [];
          }
          if (visited.hasOwnProperty(name)) {
            return;
          }
          path.push(name);
          visited[name] = true;
          for (i = 0; i < len; i++) {
            visit(vertices[names[i]], fn, visited, path);
          }
          fn(vertex, path);
          path.pop();
        }

        function DAG() {
          this.names = [];
          this.vertices = {};
        }

        DAG.prototype.add = function(name) {
          if (!name) { return; }
          if (this.vertices.hasOwnProperty(name)) {
            return this.vertices[name];
          }
          var vertex = {
            name: name, incoming: {}, incomingNames: [], hasOutgoing: false, value: null
          };
          this.vertices[name] = vertex;
          this.names.push(name);
          return vertex;
        };

        DAG.prototype.map = function(name, value) {
          this.add(name).value = value;
        };

        DAG.prototype.addEdge = function(fromName, toName) {
          if (!fromName || !toName || fromName === toName) {
            return;
          }
          var from = this.add(fromName), to = this.add(toName);
          if (to.incoming.hasOwnProperty(fromName)) {
            return;
          }
          function checkCycle(vertex, path) {
            if (vertex.name === toName) {
              throw new ember$metal$error$$default("cycle detected: " + toName + " <- " + path.join(" <- "));
            }
          }
          visit(from, checkCycle);
          from.hasOutgoing = true;
          to.incoming[fromName] = from;
          to.incomingNames.push(fromName);
        };

        DAG.prototype.topsort = function(fn) {
          var visited = {},
            vertices = this.vertices,
            names = this.names,
            len = names.length,
            i, vertex;
          for (i = 0; i < len; i++) {
            vertex = vertices[names[i]];
            if (!vertex.hasOutgoing) {
              visit(vertex, fn, visited);
            }
          }
        };

        DAG.prototype.addEdges = function(name, value, before, after) {
          var i;
          this.map(name, value);
          if (before) {
            if (typeof before === 'string') {
              this.addEdge(name, before);
            } else {
              for (i = 0; i < before.length; i++) {
                this.addEdge(name, before[i]);
              }
            }
          }
          if (after) {
            if (typeof after === 'string') {
              this.addEdge(after, name);
            } else {
              for (i = 0; i < after.length; i++) {
                this.addEdge(after[i], name);
              }
            }
          }
        };

        ember$application$system$dag$$default = DAG;
    }).call(this);

    (function() {
        /**
          A Namespace is an object usually used to contain other objects or methods
          such as an application or framework. Create a namespace anytime you want
          to define one of these new containers.

          # Example Usage

          ```javascript
          MyFramework = Ember.Namespace.create({
            VERSION: '1.0.0'
          });
          ```

          @class Namespace
          @namespace Ember
          @extends Ember.Object
        */
        var Namespace = ember$runtime$system$object$$default.extend({
          isNamespace: true,

          init: function() {
            Namespace.NAMESPACES.push(this);
            Namespace.PROCESSED = false;
          },

          toString: function() {
            var name = ember$metal$property_get$$get(this, 'name');
            if (name) { return name; }

            findNamespaces();
            return this[NAME_KEY];
          },

          nameClasses: function() {
            processNamespace([this.toString()], this, {});
          },

          destroy: function() {
            var namespaces = Namespace.NAMESPACES,
                toString = this.toString();

            if (toString) {
              ember$metal$core$$default.lookup[toString] = undefined;
              delete Namespace.NAMESPACES_BY_ID[toString];
            }
            namespaces.splice(ember$metal$array$$indexOf.call(namespaces, this), 1);
            this._super();
          }
        });

        Namespace.reopenClass({
          NAMESPACES: [ember$metal$core$$default],
          NAMESPACES_BY_ID: {},
          PROCESSED: false,
          processAll: processAllNamespaces,
          byName: function(name) {
            if (!ember$metal$core$$default.BOOTED) {
              processAllNamespaces();
            }

            return NAMESPACES_BY_ID[name];
          }
        });

        var NAMESPACES_BY_ID = Namespace.NAMESPACES_BY_ID;
        var hasOwnProp = ({}).hasOwnProperty;

        function processNamespace(paths, root, seen) {
          var idx = paths.length;

          NAMESPACES_BY_ID[paths.join('.')] = root;

          // Loop over all of the keys in the namespace, looking for classes
          for(var key in root) {
            if (!hasOwnProp.call(root, key)) { continue; }
            var obj = root[key];

            // If we are processing the `Ember` namespace, for example, the
            // `paths` will start with `["Ember"]`. Every iteration through
            // the loop will update the **second** element of this list with
            // the key, so processing `Ember.View` will make the Array
            // `['Ember', 'View']`.
            paths[idx] = key;

            // If we have found an unprocessed class
            if (obj && obj.toString === classToString) {
              // Replace the class' `toString` with the dot-separated path
              // and set its `NAME_KEY`
              obj.toString = makeToString(paths.join('.'));
              obj[NAME_KEY] = paths.join('.');

            // Support nested namespaces
            } else if (obj && obj.isNamespace) {
              // Skip aliased namespaces
              if (seen[ember$metal$utils$$guidFor(obj)]) { continue; }
              seen[ember$metal$utils$$guidFor(obj)] = true;

              // Process the child namespace
              processNamespace(paths, obj, seen);
            }
          }

          paths.length = idx; // cut out last item
        }

        var STARTS_WITH_UPPERCASE = /^[A-Z]/;

        function findNamespaces() {
          var lookup = ember$metal$core$$default.lookup, obj, isNamespace;

          if (Namespace.PROCESSED) { return; }

          for (var prop in lookup) {
            // Only process entities that start with uppercase A-Z
            if (!STARTS_WITH_UPPERCASE.test(prop)) { continue; }

            // Unfortunately, some versions of IE don't support window.hasOwnProperty
            if (lookup.hasOwnProperty && !lookup.hasOwnProperty(prop)) { continue; }

            // At times we are not allowed to access certain properties for security reasons.
            // There are also times where even if we can access them, we are not allowed to access their properties.
            try {
              obj = lookup[prop];
              isNamespace = obj && obj.isNamespace;
            } catch (e) {
              continue;
            }

            if (isNamespace) {
              obj[NAME_KEY] = prop;
            }
          }
        }

        var NAME_KEY = ember$metal$core$$default.NAME_KEY = ember$metal$utils$$GUID_KEY + '_name';

        function superClassString(mixin) {
          var superclass = mixin.superclass;
          if (superclass) {
            if (superclass[NAME_KEY]) { return superclass[NAME_KEY]; }
            else { return superClassString(superclass); }
          } else {
            return;
          }
        }

        function classToString() {
          if (!ember$metal$core$$default.BOOTED && !this[NAME_KEY]) {
            processAllNamespaces();
          }

          var ret;

          if (this[NAME_KEY]) {
            ret = this[NAME_KEY];
          } else if (this._toString) {
            ret = this._toString;
          } else {
            var str = superClassString(this);
            if (str) {
              ret = "(subclass of " + str + ")";
            } else {
              ret = "(unknown mixin)";
            }
            this.toString = makeToString(ret);
          }

          return ret;
        }

        function processAllNamespaces() {
          var unprocessedNamespaces = !Namespace.PROCESSED,
              unprocessedMixins = ember$metal$core$$default.anyUnprocessedMixins;

          if (unprocessedNamespaces) {
            findNamespaces();
            Namespace.PROCESSED = true;
          }

          if (unprocessedNamespaces || unprocessedMixins) {
            var namespaces = Namespace.NAMESPACES, namespace;
            for (var i=0, l=namespaces.length; i<l; i++) {
              namespace = namespaces[i];
              processNamespace([namespace.toString()], namespace, {});
            }

            ember$metal$core$$default.anyUnprocessedMixins = false;
          }
        }

        function makeToString(ret) {
          return function() { return ret; };
        }

        // ES6TODO: altering imported objects. SBB.
        ember$metal$mixin$$Mixin.prototype.toString = classToString;

        ember$runtime$system$namespace$$default = Namespace;
    }).call(this);

    (function() {
        ember$application$system$resolver$$Resolver = ember$runtime$system$object$$default.extend({
          /**
            This will be set to the Application instance when it is
            created.

            @property namespace
          */
          namespace: null,
          normalize: function(fullName) {
            throw new Error("Invalid call to `resolver.normalize(fullName)`. Please override the 'normalize' method in subclass of `Ember.Resolver` to prevent falling through to this error.");
          },
          resolve: function(fullName) {
           throw new Error("Invalid call to `resolver.resolve(parsedName)`. Please override the 'resolve' method in subclass of `Ember.Resolver` to prevent falling through to this error.");
          },
          parseName: function(parsedName) {
           throw new Error("Invalid call to `resolver.resolveByType(parsedName)`. Please override the 'resolveByType' method in subclass of `Ember.Resolver` to prevent falling through to this error.");
          },
          lookupDescription: function(fullName) {
            throw new Error("Invalid call to `resolver.lookupDescription(fullName)`. Please override the 'lookupDescription' method in subclass of `Ember.Resolver` to prevent falling through to this error.");
          },
          makeToString: function(factory, fullName) {
            throw new Error("Invalid call to `resolver.makeToString(factory, fullName)`. Please override the 'makeToString' method in subclass of `Ember.Resolver` to prevent falling through to this error.");
          },
          resolveOther: function(parsedName) {
           throw new Error("Invalid call to `resolver.resolveOther(parsedName)`. Please override the 'resolveOther' method in subclass of `Ember.Resolver` to prevent falling through to this error.");
          },
          _logLookup: function(found, parsedName) {
           throw new Error("Invalid call to `resolver._logLookup(found, parsedName)`. Please override the '_logLookup' method in subclass of `Ember.Resolver` to prevent falling through to this error.");
          }
        });

        ember$application$system$resolver$$DefaultResolver = ember$runtime$system$object$$default.extend({
          /**
            This will be set to the Application instance when it is
            created.

            @property namespace
          */
          namespace: null,

          normalize: function(fullName) {
            var split = fullName.split(':', 2),
                type = split[0],
                name = split[1];

            ember$metal$core$$default.assert("Tried to normalize a container name without a colon (:) in it. You probably tried to lookup a name that did not contain a type, a colon, and a name. A proper lookup name would be `view:post`.", split.length === 2);

            if (type !== 'template') {
              var result = name;

              if (result.indexOf('.') > -1) {
                result = result.replace(/\.(.)/g, function(m) { return m.charAt(1).toUpperCase(); });
              }

              if (name.indexOf('_') > -1) {
                result = result.replace(/_(.)/g, function(m) { return m.charAt(1).toUpperCase(); });
              }

              return type + ':' + result;
            } else {
              return fullName;
            }
          },


          /**
            This method is called via the container's resolver method.
            It parses the provided `fullName` and then looks up and
            returns the appropriate template or class.

            @method resolve
            @param {String} fullName the lookup string
            @return {Object} the resolved factory
          */
          resolve: function(fullName) {
            var parsedName = this.parseName(fullName),
                resolveMethodName = parsedName.resolveMethodName,
                resolved;

            if (!(parsedName.name && parsedName.type)) {
              throw new TypeError("Invalid fullName: `" + fullName + "`, must be of the form `type:name` ");
            }

            if (this[resolveMethodName]) {
              resolved = this[resolveMethodName](parsedName);
            }

            if (!resolved) {
              resolved = this.resolveOther(parsedName);
            }

            if (parsedName.root && parsedName.root.LOG_RESOLVER) {
              this._logLookup(resolved, parsedName);
            }

            return resolved;
          },
          /**
            Convert the string name of the form "type:name" to
            a Javascript object with the parsed aspects of the name
            broken out.

            @protected
            @param {String} fullName the lookup string
            @method parseName
          */
          parseName: function(fullName) {
            var nameParts = fullName.split(":"),
                type = nameParts[0], fullNameWithoutType = nameParts[1],
                name = fullNameWithoutType,
                namespace = ember$metal$property_get$$get(this, 'namespace'),
                root = namespace;

            if (type !== 'template' && name.indexOf('/') !== -1) {
              var parts = name.split('/');
              name = parts[parts.length - 1];
              var namespaceName = ember$runtime$system$string$$capitalize(parts.slice(0, -1).join('.'));
              root = ember$runtime$system$namespace$$default.byName(namespaceName);

              ember$metal$core$$default.assert('You are looking for a ' + name + ' ' + type + ' in the ' + namespaceName + ' namespace, but the namespace could not be found', root);
            }

            return {
              fullName: fullName,
              type: type,
              fullNameWithoutType: fullNameWithoutType,
              name: name,
              root: root,
              resolveMethodName: "resolve" + ember$runtime$system$string$$classify(type)
            };
          },

          /**
            Returns a human-readable description for a fullName. Used by the
            Application namespace in assertions to describe the
            precise name of the class that Ember is looking for, rather than
            container keys.

            @protected
            @param {String} fullName the lookup string
            @method lookupDescription
          */
          lookupDescription: function(fullName) {
            var parsedName = this.parseName(fullName);

            if (parsedName.type === 'template') {
              return "template at " + parsedName.fullNameWithoutType.replace(/\./g, '/');
            }

            var description = parsedName.root + "." + ember$runtime$system$string$$classify(parsedName.name);
            if (parsedName.type !== 'model') { description += ember$runtime$system$string$$classify(parsedName.type); }

            return description;
          },

          makeToString: function(factory, fullName) {
            return factory.toString();
          },
          /**
            Given a parseName object (output from `parseName`), apply
            the conventions expected by `Ember.Router`

            @protected
            @param {Object} parsedName a parseName object with the parsed
              fullName lookup string
            @method useRouterNaming
          */
          useRouterNaming: function(parsedName) {
            parsedName.name = parsedName.name.replace(/\./g, '_');
            if (parsedName.name === 'basic') {
              parsedName.name = '';
            }
          },
          /**
            Look up the template in Ember.TEMPLATES

            @protected
            @param {Object} parsedName a parseName object with the parsed
              fullName lookup string
            @method resolveTemplate
          */
          resolveTemplate: function(parsedName) {
            var templateName = parsedName.fullNameWithoutType.replace(/\./g, '/');

            if (ember$metal$core$$default.TEMPLATES[templateName]) {
              return ember$metal$core$$default.TEMPLATES[templateName];
            }

            templateName = ember$runtime$system$string$$decamelize(templateName);
            if (ember$metal$core$$default.TEMPLATES[templateName]) {
              return ember$metal$core$$default.TEMPLATES[templateName];
            }
          },
          /**
            Lookup the view using `resolveOther`

            @protected
            @param {Object} parsedName a parseName object with the parsed
              fullName lookup string
            @method resolveView
          */
          resolveView: function(parsedName) {
            this.useRouterNaming(parsedName);
            return this.resolveOther(parsedName);
          },
          /**
            Lookup the controller using `resolveOther`

            @protected
            @param {Object} parsedName a parseName object with the parsed
              fullName lookup string
            @method resolveController
          */
          resolveController: function(parsedName) {
            this.useRouterNaming(parsedName);
            return this.resolveOther(parsedName);
          },
          /**
            Lookup the route using `resolveOther`

            @protected
            @param {Object} parsedName a parseName object with the parsed
              fullName lookup string
            @method resolveRoute
          */
          resolveRoute: function(parsedName) {
            this.useRouterNaming(parsedName);
            return this.resolveOther(parsedName);
          },

          /**
            Lookup the model on the Application namespace

            @protected
            @param {Object} parsedName a parseName object with the parsed
              fullName lookup string
            @method resolveModel
          */
          resolveModel: function(parsedName) {
            var className = ember$runtime$system$string$$classify(parsedName.name),
                factory = ember$metal$property_get$$get(parsedName.root, className);

             if (factory) { return factory; }
          },
          /**
            Look up the specified object (from parsedName) on the appropriate
            namespace (usually on the Application)

            @protected
            @param {Object} parsedName a parseName object with the parsed
              fullName lookup string
            @method resolveHelper
          */
          resolveHelper: function(parsedName) {
            return this.resolveOther(parsedName) || ember$handlebars$$default.helpers[parsedName.fullNameWithoutType];
          },
          /**
            Look up the specified object (from parsedName) on the appropriate
            namespace (usually on the Application)

            @protected
            @param {Object} parsedName a parseName object with the parsed
              fullName lookup string
            @method resolveOther
          */
          resolveOther: function(parsedName) {
            var className = ember$runtime$system$string$$classify(parsedName.name) + ember$runtime$system$string$$classify(parsedName.type),
                factory = ember$metal$property_get$$get(parsedName.root, className);
            if (factory) { return factory; }
          },

          /**
           @method _logLookup
           @param {Boolean} found
           @param {Object} parsedName
           @private
          */
          _logLookup: function(found, parsedName) {
            var symbol, padding;

            if (found) { symbol = '[✓]'; }
            else          { symbol = '[ ]'; }

            if (parsedName.fullName.length > 60) {
              padding = '.';
            } else {
              padding = new Array(60 - parsedName.fullName.length).join('.');
            }

            ember$metal$logger$$default.info(symbol, parsedName.fullName, padding, this.lookupDescription(parsedName.fullName));
          }
        });
    }).call(this);

    (function() {
        var forEach = ember$metal$enumerable_utils$$default.forEach,
            indexOf = ember$metal$enumerable_utils$$default.indexOf;

        var libraries = function() {
          var _libraries   = [];
          var coreLibIndex = 0;

          var getLibrary = function(name) {
            for (var i = 0; i < _libraries.length; i++) {
              if (_libraries[i].name === name) {
                return _libraries[i];
              }
            }
          };

          _libraries.register = function(name, version) {
            if (!getLibrary(name)) {
              _libraries.push({name: name, version: version});
            }
          };

          _libraries.registerCoreLibrary = function(name, version) {
            if (!getLibrary(name)) {
              _libraries.splice(coreLibIndex++, 0, {name: name, version: version});
            }
          };

          _libraries.deRegister = function(name) {
            var lib = getLibrary(name);
            if (lib) _libraries.splice(indexOf(_libraries, lib), 1);
          };

          _libraries.each = function (callback) {
            forEach(_libraries, function(lib) {
              callback(lib.name, lib.version);
            });
          };

          return _libraries;
        }();

        ember$metal$libraries$$default = libraries;
    }).call(this);

    (function() {
        ember$metal$is_blank$$default = function isBlank(obj) {
          return ember$metal$is_empty$$default(obj) || (typeof obj === 'string' && obj.match(/\S/) === null);
        };
    }).call(this);

    (function() {
        // END IMPORTS

        // BEGIN EXPORTS
        var EmberInstrumentation = ember$metal$core$$default.Instrumentation = {};

        EmberInstrumentation.instrument = ember$metal$instrumentation$$instrument;
        EmberInstrumentation.subscribe = ember$metal$instrumentation$$subscribe;
        EmberInstrumentation.unsubscribe = ember$metal$instrumentation$$unsubscribe;
        EmberInstrumentation.reset  = ember$metal$instrumentation$$reset;
        ember$metal$core$$default.instrument = ember$metal$instrumentation$$instrument;
        ember$metal$core$$default.subscribe = ember$metal$instrumentation$$subscribe;
        ember$metal$core$$default.generateGuid    = ember$metal$utils$$generateGuid;
        ember$metal$core$$default.GUID_KEY        = ember$metal$utils$$GUID_KEY;
        ember$metal$core$$default.GUID_PREFIX     = ember$metal$utils$$GUID_PREFIX;
        ember$metal$core$$default.create          = ember$metal$platform$$create;
        ember$metal$core$$default.platform        = ember$metal$platform$$platform;
        var EmberArrayPolyfills = ember$metal$core$$default.ArrayPolyfills = {};
        EmberArrayPolyfills.map = ember$metal$array$$map;
        EmberArrayPolyfills.forEach = ember$metal$array$$forEach;
        EmberArrayPolyfills.filter = ember$metal$array$$filter;
        EmberArrayPolyfills.indexOf = ember$metal$array$$indexOf;
        ember$metal$core$$default.Error           = ember$metal$error$$default;
        ember$metal$core$$default.guidFor         = ember$metal$utils$$guidFor;
        ember$metal$core$$default.META_DESC       = ember$metal$utils$$META_DESC;
        ember$metal$core$$default.EMPTY_META      = ember$metal$utils$$EMPTY_META;
        ember$metal$core$$default.meta            = ember$metal$utils$$meta;
        ember$metal$core$$default.getMeta         = ember$metal$utils$$getMeta;
        ember$metal$core$$default.setMeta         = ember$metal$utils$$setMeta;
        ember$metal$core$$default.metaPath        = ember$metal$utils$$metaPath;
        ember$metal$core$$default.inspect         = ember$metal$utils$$inspect;
        ember$metal$core$$default.typeOf          = ember$metal$utils$$typeOf;
        ember$metal$core$$default.tryCatchFinally = ember$metal$utils$$tryCatchFinally;
        ember$metal$core$$default.isArray         = ember$metal$utils$$isArray;
        ember$metal$core$$default.makeArray       = ember$metal$utils$$makeArray;
        ember$metal$core$$default.canInvoke       = ember$metal$utils$$canInvoke;
        ember$metal$core$$default.tryInvoke       = ember$metal$utils$$tryInvoke;
        ember$metal$core$$default.tryFinally      = ember$metal$utils$$tryFinally;
        ember$metal$core$$default.wrap            = ember$metal$utils$$wrap;
        ember$metal$core$$default.apply           = ember$metal$utils$$apply;
        ember$metal$core$$default.applyStr        = ember$metal$utils$$applyStr;
        ember$metal$core$$default.Logger = ember$metal$logger$$default;
        ember$metal$core$$default.get            = ember$metal$property_get$$get;
        ember$metal$core$$default.getWithDefault = ember$metal$property_get$$getWithDefault;
        ember$metal$core$$default.normalizeTuple = ember$metal$property_get$$normalizeTuple;
        ember$metal$core$$default._getPath       = ember$metal$property_get$$_getPath;
        ember$metal$core$$default.EnumerableUtils = ember$metal$enumerable_utils$$default;
        ember$metal$core$$default.on                = ember$metal$events$$on;
        ember$metal$core$$default.addListener       = ember$metal$events$$addListener;
        ember$metal$core$$default.removeListener    = ember$metal$events$$removeListener;
        ember$metal$core$$default._suspendListener  = ember$metal$events$$suspendListener;
        ember$metal$core$$default._suspendListeners = ember$metal$events$$suspendListeners;
        ember$metal$core$$default.sendEvent         = ember$metal$events$$sendEvent;
        ember$metal$core$$default.hasListeners      = ember$metal$events$$hasListeners;
        ember$metal$core$$default.watchedEvents     = ember$metal$events$$watchedEvents;
        ember$metal$core$$default.listenersFor      = ember$metal$events$$listenersFor;
        ember$metal$core$$default.listenersDiff     = ember$metal$events$$listenersDiff;
        ember$metal$core$$default.listenersUnion    = ember$metal$events$$listenersUnion;
        ember$metal$core$$default._ObserverSet = ember$metal$observer_set$$default;
        ember$metal$core$$default.propertyWillChange = ember$metal$property_events$$propertyWillChange;
        ember$metal$core$$default.propertyDidChange = ember$metal$property_events$$propertyDidChange;
        ember$metal$core$$default.overrideChains = ember$metal$property_events$$overrideChains;
        ember$metal$core$$default.beginPropertyChanges = ember$metal$property_events$$beginPropertyChanges;
        ember$metal$core$$default.endPropertyChanges = ember$metal$property_events$$endPropertyChanges;
        ember$metal$core$$default.changeProperties = ember$metal$property_events$$changeProperties;
        ember$metal$core$$default.Descriptor     = ember$metal$properties$$Descriptor;
        ember$metal$core$$default.defineProperty = ember$metal$properties$$defineProperty;
        ember$metal$core$$default.set    = ember$metal$property_set$$set;
        ember$metal$core$$default.trySet = ember$metal$property_set$$trySet;
        ember$metal$core$$default.OrderedSet = ember$metal$map$$OrderedSet;
        ember$metal$core$$default.Map = ember$metal$map$$Map;
        ember$metal$core$$default.MapWithDefault = ember$metal$map$$MapWithDefault;
        ember$metal$core$$default.getProperties = ember$metal$get_properties$$default;
        ember$metal$core$$default.setProperties = ember$metal$set_properties$$default;
        ember$metal$core$$default.watchKey   = ember$metal$watch_key$$watchKey;
        ember$metal$core$$default.unwatchKey = ember$metal$watch_key$$unwatchKey;
        ember$metal$core$$default.flushPendingChains = ember$metal$chains$$flushPendingChains;
        ember$metal$core$$default.removeChainWatcher = ember$metal$chains$$removeChainWatcher;
        ember$metal$core$$default._ChainNode = ember$metal$chains$$ChainNode;
        ember$metal$core$$default.finishChains = ember$metal$chains$$finishChains;
        ember$metal$core$$default.watchPath = ember$metal$watch_path$$watchPath;
        ember$metal$core$$default.unwatchPath = ember$metal$watch_path$$unwatchPath;
        ember$metal$core$$default.watch = ember$metal$watching$$watch;
        ember$metal$core$$default.isWatching = ember$metal$watching$$isWatching;
        ember$metal$core$$default.unwatch = ember$metal$watching$$unwatch;
        ember$metal$core$$default.rewatch = ember$metal$watching$$rewatch;
        ember$metal$core$$default.destroy = ember$metal$watching$$destroy;
        ember$metal$core$$default.expandProperties = ember$metal$expand_properties$$default;
        ember$metal$core$$default.ComputedProperty = ember$metal$computed$$ComputedProperty;
        ember$metal$core$$default.computed = ember$metal$computed$$computed;
        ember$metal$core$$default.cacheFor = ember$metal$computed$$cacheFor;
        ember$metal$core$$default.addObserver = ember$metal$observer$$addObserver;
        ember$metal$core$$default.observersFor = ember$metal$observer$$observersFor;
        ember$metal$core$$default.removeObserver = ember$metal$observer$$removeObserver;
        ember$metal$core$$default.addBeforeObserver = ember$metal$observer$$addBeforeObserver;
        ember$metal$core$$default._suspendBeforeObserver = ember$metal$observer$$_suspendBeforeObserver;
        ember$metal$core$$default._suspendBeforeObservers = ember$metal$observer$$_suspendBeforeObservers;
        ember$metal$core$$default._suspendObserver = ember$metal$observer$$_suspendObserver;
        ember$metal$core$$default._suspendObservers = ember$metal$observer$$_suspendObservers;
        ember$metal$core$$default.beforeObserversFor = ember$metal$observer$$beforeObserversFor;
        ember$metal$core$$default.removeBeforeObserver = ember$metal$observer$$removeBeforeObserver;
        ember$metal$core$$default.IS_BINDING = ember$metal$mixin$$IS_BINDING;
        ember$metal$core$$default.required = ember$metal$mixin$$required;
        ember$metal$core$$default.aliasMethod = ember$metal$mixin$$aliasMethod;
        ember$metal$core$$default.observer = ember$metal$mixin$$observer;
        ember$metal$core$$default.immediateObserver = ember$metal$mixin$$immediateObserver;
        ember$metal$core$$default.beforeObserver = ember$metal$mixin$$beforeObserver;
        ember$metal$core$$default.mixin = ember$metal$mixin$$mixin;
        ember$metal$core$$default.Mixin = ember$metal$mixin$$Mixin;
        ember$metal$core$$default.oneWay = ember$metal$binding$$oneWay;
        ember$metal$core$$default.bind = ember$metal$binding$$bind;
        ember$metal$core$$default.Binding = ember$metal$binding$$Binding;
        ember$metal$core$$default.isGlobalPath = ember$metal$binding$$isGlobalPath;
        ember$metal$core$$default.run = ember$metal$run_loop$$default;
        ember$metal$core$$default.libraries = ember$metal$libraries$$default;
        ember$metal$core$$default.libraries.registerCoreLibrary('Ember', ember$metal$core$$default.VERSION);
        ember$metal$core$$default.isNone = ember$metal$is_none$$isNone;
        ember$metal$core$$default.none = ember$metal$is_none$$none;
        ember$metal$core$$default.isEmpty = ember$metal$is_empty$$isEmpty;
        ember$metal$core$$default.empty = ember$metal$is_empty$$empty;
        ember$metal$core$$default.isBlank = ember$metal$is_blank$$default;
        ember$metal$core$$default.merge = ember$metal$merge$$default;

        /**
          A function may be assigned to `Ember.onerror` to be called when Ember
          internals encounter an error. This is useful for specialized error handling
          and reporting code.

          ```javascript
          Ember.onerror = function(error) {
            Em.$.ajax('/report-error', 'POST', {
              stack: error.stack,
              otherInformation: 'whatever app state you want to provide'
            });
          };
          ```

          Internally, `Ember.onerror` is used as Backburner's error handler.

          @event onerror
          @for Ember
          @param {Exception} error the error object
        */
        ember$metal$core$$default.onerror = null;

        ember$metal$$default = ember$metal$core$$default;
    }).call(this);

    (function() {
        rsvp$node$$default = function denodeify(nodeFunc, argumentNames) {
          var asArray = argumentNames === true;
          var asHash = $$utils1$$isArray(argumentNames);

          function denodeifiedFunction() {
            var nodeArgs = arraySlice(arguments);

            var thisArg;

            if (!asArray && !asHash && argumentNames) {
              console.warn('Deprecation: RSVP.denodeify() doesn\'t allow setting the ' +
                           '"this" binding anymore. Use yourFunction.bind(yourThis) instead.');
              thisArg = argumentNames;
            } else {
              thisArg = this;
            }

            return rsvp$promise$$default.all(nodeArgs).then(function(nodeArgs) {
              return new rsvp$promise$$default(resolver);

              // sweet.js has a bug, this resolver can't be defined in the constructor
              // or the arraySlice macro doesn't work
              function resolver(resolve, reject) {
                function callback() {
                  var args = arraySlice(arguments);

                  var error = args[0];
                  var value = args[1];

                  if (error) {
                    reject(error);
                  } else if (asArray) {
                    resolve(args.slice(1));
                  } else if (asHash) {
                    var obj = {};
                    var successArguments = args.slice(1);
                    var name;
                    var i;

                    for (i = 0; i < argumentNames.length; i++) {
                      name = argumentNames[i];
                      obj[name] = successArguments[i];
                    }

                    resolve(obj);
                  } else {
                    resolve(value);
                  }
                }

                nodeArgs.push(callback);
                nodeFunc.apply(thisArg, nodeArgs);
              }
            });
          }

          denodeifiedFunction.__proto__ = nodeFunc;

          return denodeifiedFunction;
        };
    }).call(this);

    (function() {
        rsvp$all$$default = function all(array, label) {
          return rsvp$promise$$default.all(array, label);
        };
    }).call(this);

    (function() {
        rsvp$all$settled$$default = function allSettled(entries, label) {
          return new rsvp$promise$$default(function(resolve, reject) {
            if (!$$utils1$$isArray(entries)) {
              throw new TypeError('You must pass an array to allSettled.');
            }

            var remaining = entries.length;
            var entry;

            if (remaining === 0) {
              resolve([]);
              return;
            }

            var results = new Array(remaining);

            function fulfilledResolver(index) {
              return function(value) {
                resolveAll(index, fulfilled(value));
              };
            }

            function rejectedResolver(index) {
              return function(reason) {
                resolveAll(index, rejected(reason));
              };
            }

            function resolveAll(index, value) {
              results[index] = value;
              if (--remaining === 0) {
                resolve(results);
              }
            }

            for (var index = 0; index < entries.length; index++) {
              entry = entries[index];

              if ($$utils1$$isMaybeThenable(entry)) {
                rsvp$promise$$default.resolve(entry).then(fulfilledResolver(index), rejectedResolver(index));
              } else {
                resolveAll(index, fulfilled(entry));
              }
            }
          }, label);
        };

        function fulfilled(value) {
          return { state: 'fulfilled', value: value };
        }

        function rejected(reason) {
          return { state: 'rejected', reason: reason };
        }
    }).call(this);

    (function() {
        rsvp$race$$default = function race(array, label) {
          return rsvp$promise$$default.race(array, label);
        };
    }).call(this);

    (function() {
        rsvp$hash$$default = function hash(object, label) {
          return new rsvp$promise$$default(function(resolve, reject){
            var results = {};
            var keys = $$utils1$$keysOf(object);
            var remaining = keys.length;
            var entry, property;

            if (remaining === 0) {
              resolve(results);
              return;
            }

           function fulfilledTo(property) {
              return function(value) {
                results[property] = value;
                if (--remaining === 0) {
                  resolve(results);
                }
              };
            }

            function onRejection(reason) {
              remaining = 0;
              reject(reason);
            }

            for (var i = 0; i < keys.length; i++) {
              property = keys[i];
              entry = object[property];

              if ($$utils1$$isMaybeThenable(entry)) {
                rsvp$promise$$default.resolve(entry).then(fulfilledTo(property), onRejection);
              } else {
                results[property] = entry;
                if (--remaining === 0) {
                  resolve(results);
                }
              }
            }
          }, label);
        };
    }).call(this);

    (function() {
        rsvp$hash$settled$$default = function hashSettled(object, label) {
          return new rsvp$promise$$default(function(resolve, reject){
            var results = {};
            var keys = $$utils1$$keysOf(object);
            var remaining = keys.length;
            var entry, property;

            if (remaining === 0) {
              resolve(results);
              return;
            }

            function fulfilledResolver(property) {
              return function(value) {
                resolveAll(property, fulfilled(value));
              };
            }

            function rejectedResolver(property) {
              return function(reason) {
                resolveAll(property, rejected(reason));
              };
            }

            function resolveAll(property, value) {
              results[property] = value;
              if (--remaining === 0) {
                resolve(results);
              }
            }

            for (var i = 0; i < keys.length; i++) {
              property = keys[i];
              entry = object[property];

              if ($$utils1$$isMaybeThenable(entry)) {
                rsvp$promise$$default.resolve(entry).then(fulfilledResolver(property), rejectedResolver(property));
              } else {
                resolveAll(property, fulfilled(entry));
              }
            }
          }, label);
        };

        function fulfilled(value) {
          return { state: 'fulfilled', value: value };
        }

        function rejected(reason) {
          return { state: 'rejected', reason: reason };
        }
    }).call(this);

    (function() {
        rsvp$rethrow$$default = function rethrow(reason) {
          setTimeout(function() {
            throw reason;
          });
          throw reason;
        };
    }).call(this);

    (function() {
        rsvp$defer$$default = function defer(label) {
          var deferred = { };

          deferred.promise = new rsvp$promise$$default(function(resolve, reject) {
            deferred.resolve = resolve;
            deferred.reject = reject;
          }, label);

          return deferred;
        };
    }).call(this);

    (function() {
        rsvp$map$$default = function map(promises, mapFn, label) {
          return rsvp$promise$$default.all(promises, label).then(function(values) {
            if (!$$utils1$$isFunction(mapFn)) {
              throw new TypeError("You must pass a function as map's second argument.");
            }

            var length = values.length;
            var results = new Array(length);

            for (var i = 0; i < length; i++) {
              results[i] = mapFn(values[i]);
            }

            return rsvp$promise$$default.all(results, label);
          });
        };
    }).call(this);

    (function() {
        rsvp$resolve$$default = function resolve(value, label) {
          return rsvp$promise$$default.resolve(value, label);
        };
    }).call(this);

    (function() {
        rsvp$reject$$default = function reject(reason, label) {
          return rsvp$promise$$default.reject(reason, label);
        };
    }).call(this);

    (function() {
        rsvp$filter$$default = function filter(promises, filterFn, label) {
          return rsvp$promise$$default.all(promises, label).then(function(values) {
            if (!$$utils1$$isFunction(filterFn)) {
              throw new TypeError("You must pass a function as filter's second argument.");
            }

            var length = values.length;
            var filtered = new Array(length);

            for (var i = 0; i < length; i++) {
              filtered[i] = filterFn(values[i]);
            }

            return rsvp$promise$$default.all(filtered, label).then(function(filtered) {
              var results = new Array(length);
              var newLength = 0;

              for (var i = 0; i < length; i++) {
                if (filtered[i]) {
                  results[newLength] = values[i];
                  newLength++;
                }
              }

              results.length = newLength;

              return results;
            });
          });
        };
    }).call(this);

    (function() {
        rsvp$asap$$default = function asap(callback, arg) {
          var length = queue.push([callback, arg]);
          if (length === 1) {
            // If length is 1, that means that we need to schedule an async flush.
            // If additional callbacks are queued before the queue is flushed, they
            // will be processed by this flush that we are scheduling.
            scheduleFlush();
          }
        };

        var browserGlobal = (typeof window !== 'undefined') ? window : {};
        var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;

        // test for web worker but not in IE10
        var isWorker = typeof Uint8ClampedArray !== 'undefined' &&
          typeof importScripts !== 'undefined' &&
          typeof MessageChannel !== 'undefined';

        // node
        function useNextTick() {
          return function() {
            process.nextTick(flush);
          };
        }

        function useMutationObserver() {
          var iterations = 0;
          var observer = new BrowserMutationObserver(flush);
          var node = document.createTextNode('');
          observer.observe(node, { characterData: true });

          return function() {
            node.data = (iterations = ++iterations % 2);
          };
        }

        // web worker
        function useMessageChannel() {
          var channel = new MessageChannel();
          channel.port1.onmessage = flush;
          return function () {
            channel.port2.postMessage(0);
          };
        }

        function useSetTimeout() {
          return function() {
            setTimeout(flush, 1);
          };
        }

        var queue = [];

        function flush() {
          for (var i = 0; i < queue.length; i++) {
            var tuple = queue[i];
            var callback = tuple[0], arg = tuple[1];
            callback(arg);
          }
          queue.length = 0;
        }

        var scheduleFlush;

        // Decide what async method to use to triggering processing of queued callbacks:
        if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
          scheduleFlush = useNextTick();
        } else if (BrowserMutationObserver) {
          scheduleFlush = useMutationObserver();
        } else if (isWorker) {
          scheduleFlush = useMessageChannel();
        } else {
          scheduleFlush = useSetTimeout();
        }
    }).call(this);

    (function() {
        // default async is asap;
        $$config$$config.async = rsvp$asap$$default;

        function async(callback, arg) {
          $$config$$config.async(callback, arg);
        }

        rsvp$$async = async;

        function on() {
          $$config$$config.on.apply($$config$$config, arguments);
        }

        rsvp$$on = on;

        function off() {
          $$config$$config.off.apply($$config$$config, arguments);
        }

        rsvp$$off = off;

        // Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`
        if (typeof window !== 'undefined' && typeof window.__PROMISE_INSTRUMENTATION__ === 'object') {
          var callbacks = window.__PROMISE_INSTRUMENTATION__;
          $$config$$configure('instrument', true);
          for (var eventName in callbacks) {
            if (callbacks.hasOwnProperty(eventName)) {
              rsvp$$on(eventName, callbacks[eventName]);
            }
          }
        }
    }).call(this);

    (function() {
        var RSVP = Object.seal({
            get Promise() {
                return rsvp$promise$$default;
            },

            get EventTarget() {
                return $$events$$default;
            },

            get all() {
                return rsvp$all$$default;
            },

            get allSettled() {
                return rsvp$all$settled$$default;
            },

            get race() {
                return rsvp$race$$default;
            },

            get hash() {
                return rsvp$hash$$default;
            },

            get hashSettled() {
                return rsvp$hash$settled$$default;
            },

            get rethrow() {
                return rsvp$rethrow$$default;
            },

            get defer() {
                return rsvp$defer$$default;
            },

            get denodeify() {
                return rsvp$node$$default;
            },

            get configure() {
                return $$config$$configure;
            },

            get on() {
                return rsvp$$on;
            },

            get off() {
                return rsvp$$off;
            },

            get resolve() {
                return rsvp$resolve$$default;
            },

            get reject() {
                return rsvp$reject$$default;
            },

            get async() {
                return rsvp$$async;
            },

            get map() {
                return rsvp$map$$default;
            },

            get filter() {
                return rsvp$filter$$default;
            }
        });

        function onerrorDefault(error) {
          if (error instanceof Error) {
            if (ember$metal$core$$default.testing) {
              // ES6TODO: remove when possible
              if (!Test && ember$metal$core$$default.__loader.registry[testModuleName]) {
                Test = requireModule(testModuleName)['default'];
              }

              if (Test && Test.adapter) {
                Test.adapter.exception(error);
              } else {
                throw error;
              }
            } else if (ember$metal$core$$default.onerror) {
              ember$metal$core$$default.onerror(error);
            } else {
              ember$metal$logger$$default.error(error.stack);
              ember$metal$core$$default.assert(error, false);
            }
          }
        }

        ember$runtime$ext$rsvp$$onerrorDefault = onerrorDefault;
        RSVP.on('error', ember$runtime$ext$rsvp$$onerrorDefault);
        ember$runtime$ext$rsvp$$default = RSVP;
    }).call(this);

    (function() {
        var asyncStart = function() {
          if (ember$metal$core$$default.Test && ember$metal$core$$default.Test.adapter) {
            ember$metal$core$$default.Test.adapter.asyncStart();
          }
        };

        var asyncEnd = function() {
          if (ember$metal$core$$default.Test && ember$metal$core$$default.Test.adapter) {
            ember$metal$core$$default.Test.adapter.asyncEnd();
          }
        };

        ember$runtime$ext$rsvp$$default.configure('async', function(callback, promise) {
          var async = !ember$metal$run_loop$$default.currentRunLoop;

          if (ember$metal$core$$default.testing && async) { asyncStart(); }

          ember$metal$run_loop$$default.backburner.schedule('actions', function(){
            if (ember$metal$core$$default.testing && async) { asyncEnd(); }
            callback(promise);
          });
        });

        ember$runtime$ext$rsvp$$default.Promise.prototype.fail = function(callback, label){
          ember$metal$core$$default.deprecate('RSVP.Promise.fail has been renamed as RSVP.Promise.catch');
          return this['catch'](callback, label);
        };

        ember$runtime$mixins$deferred$$default = ember$metal$mixin$$Mixin.create({
          /**
            Add handlers to be called when the Deferred object is resolved or rejected.

            @method then
            @param {Function} resolve a callback function to be called when done
            @param {Function} reject  a callback function to be called when failed
          */
          then: function(resolve, reject, label) {
            var deferred, promise, entity;

            entity = this;
            deferred = ember$metal$property_get$$get(this, '_deferred');
            promise = deferred.promise;

            function fulfillmentHandler(fulfillment) {
              if (fulfillment === promise) {
                return resolve(entity);
              } else {
                return resolve(fulfillment);
              }
            }

            return promise.then(resolve && fulfillmentHandler, reject, label);
          },

          /**
            Resolve a Deferred object and call any `doneCallbacks` with the given args.

            @method resolve
          */
          resolve: function(value) {
            var deferred, promise;

            deferred = ember$metal$property_get$$get(this, '_deferred');
            promise = deferred.promise;

            if (value === this) {
              deferred.resolve(promise);
            } else {
              deferred.resolve(value);
            }
          },

          /**
            Reject a Deferred object and call any `failCallbacks` with the given args.

            @method reject
          */
          reject: function(value) {
            ember$metal$property_get$$get(this, '_deferred').reject(value);
          },

          _deferred: ember$metal$computed$$computed(function() {
            return ember$runtime$ext$rsvp$$default.defer('Ember: DeferredMixin - ' + this);
          })
        });
    }).call(this);

    (function() {
        function contentPropertyWillChange(content, contentKey) {
          var key = contentKey.slice(8); // remove "content."
          if (key in this) { return; }  // if shadowed in proxy
          ember$metal$property_events$$propertyWillChange(this, key);
        }

        function contentPropertyDidChange(content, contentKey) {
          var key = contentKey.slice(8); // remove "content."
          if (key in this) { return; } // if shadowed in proxy
          ember$metal$property_events$$propertyDidChange(this, key);
        }

        /**
          `Ember.ObjectProxy` forwards all properties not defined by the proxy itself
          to a proxied `content` object.

          ```javascript
          object = Ember.Object.create({
            name: 'Foo'
          });

          proxy = Ember.ObjectProxy.create({
            content: object
          });

          // Access and change existing properties
          proxy.get('name')          // 'Foo'
          proxy.set('name', 'Bar');
          object.get('name')         // 'Bar'

          // Create new 'description' property on `object`
          proxy.set('description', 'Foo is a whizboo baz');
          object.get('description')  // 'Foo is a whizboo baz'
          ```

          While `content` is unset, setting a property to be delegated will throw an
          Error.

          ```javascript
          proxy = Ember.ObjectProxy.create({
            content: null,
            flag: null
          });
          proxy.set('flag', true);
          proxy.get('flag');         // true
          proxy.get('foo');          // undefined
          proxy.set('foo', 'data');  // throws Error
          ```

          Delegated properties can be bound to and will change when content is updated.

          Computed properties on the proxy itself can depend on delegated properties.

          ```javascript
          ProxyWithComputedProperty = Ember.ObjectProxy.extend({
            fullName: function () {
              var firstName = this.get('firstName'),
                  lastName = this.get('lastName');
              if (firstName && lastName) {
                return firstName + ' ' + lastName;
              }
              return firstName || lastName;
            }.property('firstName', 'lastName')
          });

          proxy = ProxyWithComputedProperty.create();

          proxy.get('fullName');  // undefined
          proxy.set('content', {
            firstName: 'Tom', lastName: 'Dale'
          }); // triggers property change for fullName on proxy

          proxy.get('fullName');  // 'Tom Dale'
          ```

          @class ObjectProxy
          @namespace Ember
          @extends Ember.Object
        */
        var ObjectProxy = ember$runtime$system$object$$default.extend({
          /**
            The object whose properties will be forwarded.

            @property content
            @type Ember.Object
            @default null
          */
          content: null,
          _contentDidChange: ember$metal$mixin$$observer('content', function() {
            ember$metal$core$$default.assert("Can't set ObjectProxy's content to itself", ember$metal$property_get$$get(this, 'content') !== this);
          }),

          isTruthy: ember$metal$computed$$computed.bool('content'),

          _debugContainerKey: null,

          willWatchProperty: function (key) {
            var contentKey = 'content.' + key;
            ember$metal$observer$$addBeforeObserver(this, contentKey, null, contentPropertyWillChange);
            ember$metal$observer$$addObserver(this, contentKey, null, contentPropertyDidChange);
          },

          didUnwatchProperty: function (key) {
            var contentKey = 'content.' + key;
            ember$metal$observer$$removeBeforeObserver(this, contentKey, null, contentPropertyWillChange);
            ember$metal$observer$$removeObserver(this, contentKey, null, contentPropertyDidChange);
          },

          unknownProperty: function (key) {
            var content = ember$metal$property_get$$get(this, 'content');
            if (content) {
              return ember$metal$property_get$$get(content, key);
            }
          },

          setUnknownProperty: function (key, value) {
            var m = ember$metal$utils$$meta(this);
            if (m.proto === this) {
              // if marked as prototype then just defineProperty
              // rather than delegate
              ember$metal$properties$$defineProperty(this, key, null, value);
              return value;
            }

            var content = ember$metal$property_get$$get(this, 'content');
            ember$metal$core$$default.assert(ember$runtime$system$string$$fmt("Cannot delegate set('%@', %@) to the 'content' property of object proxy %@: its 'content' is undefined.", [key, value, this]), content);
            return ember$metal$property_set$$set(content, key, value);
          }

        });

        ember$runtime$system$object_proxy$$default = ObjectProxy;
    }).call(this);

    (function() {
        ember$runtime$controllers$object_controller$$default = ember$runtime$system$object_proxy$$default.extend(ember$runtime$controllers$controller$$ControllerMixin);
    }).call(this);

    (function() {
        var ActionHelper;

        ember$views$system$event_dispatcher$$default = ember$runtime$system$object$$default.extend({

          /**
            The set of events names (and associated handler function names) to be setup
            and dispatched by the `EventDispatcher`. Custom events can added to this list at setup
            time, generally via the `Ember.Application.customEvents` hash. Only override this
            default set to prevent the EventDispatcher from listening on some events all together.

            This set will be modified by `setup` to also include any events added at that time.

            @property events
            @type Object
          */
          events: {
            touchstart  : 'touchStart',
            touchmove   : 'touchMove',
            touchend    : 'touchEnd',
            touchcancel : 'touchCancel',
            keydown     : 'keyDown',
            keyup       : 'keyUp',
            keypress    : 'keyPress',
            mousedown   : 'mouseDown',
            mouseup     : 'mouseUp',
            contextmenu : 'contextMenu',
            click       : 'click',
            dblclick    : 'doubleClick',
            mousemove   : 'mouseMove',
            focusin     : 'focusIn',
            focusout    : 'focusOut',
            mouseenter  : 'mouseEnter',
            mouseleave  : 'mouseLeave',
            submit      : 'submit',
            input       : 'input',
            change      : 'change',
            dragstart   : 'dragStart',
            drag        : 'drag',
            dragenter   : 'dragEnter',
            dragleave   : 'dragLeave',
            dragover    : 'dragOver',
            drop        : 'drop',
            dragend     : 'dragEnd'
          },

          /**
            The root DOM element to which event listeners should be attached. Event
            listeners will be attached to the document unless this is overridden.

            Can be specified as a DOMElement or a selector string.

            The default body is a string since this may be evaluated before document.body
            exists in the DOM.

            @private
            @property rootElement
            @type DOMElement
            @default 'body'
          */
          rootElement: 'body',

          /**
            Sets up event listeners for standard browser events.

            This will be called after the browser sends a `DOMContentReady` event. By
            default, it will set up all of the listeners on the document body. If you
            would like to register the listeners on a different element, set the event
            dispatcher's `root` property.

            @private
            @method setup
            @param addedEvents {Hash}
          */
          setup: function(addedEvents, rootElement) {
            var event, events = ember$metal$property_get$$get(this, 'events');

            ember$views$system$jquery$$default.extend(events, addedEvents || {});


            if (!ember$metal$is_none$$isNone(rootElement)) {
              ember$metal$property_set$$set(this, 'rootElement', rootElement);
            }

            rootElement = ember$views$system$jquery$$default(ember$metal$property_get$$get(this, 'rootElement'));

            ember$metal$core$$default.assert(ember$runtime$system$string$$fmt('You cannot use the same root element (%@) multiple times in an Ember.Application', [rootElement.selector || rootElement[0].tagName]), !rootElement.is('.ember-application'));
            ember$metal$core$$default.assert('You cannot make a new Ember.Application using a root element that is a descendent of an existing Ember.Application', !rootElement.closest('.ember-application').length);
            ember$metal$core$$default.assert('You cannot make a new Ember.Application using a root element that is an ancestor of an existing Ember.Application', !rootElement.find('.ember-application').length);

            rootElement.addClass('ember-application');

            ember$metal$core$$default.assert('Unable to add "ember-application" class to rootElement. Make sure you set rootElement to the body or an element in the body.', rootElement.is('.ember-application'));

            for (event in events) {
              if (events.hasOwnProperty(event)) {
                this.setupHandler(rootElement, event, events[event]);
              }
            }
          },

          /**
            Registers an event listener on the document. If the given event is
            triggered, the provided event handler will be triggered on the target view.

            If the target view does not implement the event handler, or if the handler
            returns `false`, the parent view will be called. The event will continue to
            bubble to each successive parent view until it reaches the top.

            For example, to have the `mouseDown` method called on the target view when
            a `mousedown` event is received from the browser, do the following:

            ```javascript
            setupHandler('mousedown', 'mouseDown');
            ```

            @private
            @method setupHandler
            @param {Element} rootElement
            @param {String} event the browser-originated event to listen to
            @param {String} eventName the name of the method to call on the view
          */
          setupHandler: function(rootElement, event, eventName) {
            var self = this;

            rootElement.on(event + '.ember', '.ember-view', function(evt, triggeringManager) {
              var view = ember$views$views$view$$View.views[this.id],
                  result = true, manager = null;

              manager = self._findNearestEventManager(view, eventName);

              if (manager && manager !== triggeringManager) {
                result = self._dispatchEvent(manager, evt, eventName, view);
              } else if (view) {
                result = self._bubbleEvent(view, evt, eventName);
              } else {
                evt.stopPropagation();
              }

              return result;
            });

            rootElement.on(event + '.ember', '[data-ember-action]', function(evt) {
              //ES6TODO: Needed for ActionHelper (generally not available in ember-views test suite)
              if (!ActionHelper) { ActionHelper = requireModule("ember-routing/helpers/action")["ActionHelper"]; }

              var actionId = ember$views$system$jquery$$default(evt.currentTarget).attr('data-ember-action'),
                  action   = ActionHelper.registeredActions[actionId];

              // We have to check for action here since in some cases, jQuery will trigger
              // an event on `removeChild` (i.e. focusout) after we've already torn down the
              // action handlers for the view.
              if (action && action.eventName === eventName) {
                return action.handler(evt);
              }
            });
          },

          _findNearestEventManager: function(view, eventName) {
            var manager = null;

            while (view) {
              manager = ember$metal$property_get$$get(view, 'eventManager');
              if (manager && manager[eventName]) { break; }

              view = ember$metal$property_get$$get(view, 'parentView');
            }

            return manager;
          },

          _dispatchEvent: function(object, evt, eventName, view) {
            var result = true;

            var handler = object[eventName];
            if (ember$metal$utils$$typeOf(handler) === 'function') {
              result = ember$metal$run_loop$$default(object, handler, evt, view);
              // Do not preventDefault in eventManagers.
              evt.stopPropagation();
            }
            else {
              result = this._bubbleEvent(view, evt, eventName);
            }

            return result;
          },

          _bubbleEvent: function(view, evt, eventName) {
            return ember$metal$run_loop$$default(view, view.handleEvent, eventName, evt);
          },

          destroy: function() {
            var rootElement = ember$metal$property_get$$get(this, 'rootElement');
            ember$views$system$jquery$$default(rootElement).off('.ember', '**').removeClass('ember-application');
            return this._super();
          }
        });
    }).call(this);

    (function() {
        /**
        @module ember
        @submodule ember-extension-support
        */

        /**
          The `ContainerDebugAdapter` helps the container and resolver interface
          with tools that debug Ember such as the
          [Ember Extension](https://github.com/tildeio/ember-extension)
          for Chrome and Firefox.

          This class can be extended by a custom resolver implementer
          to override some of the methods with library-specific code.

          The methods likely to be overridden are:

          * `canCatalogEntriesByType`
          * `catalogEntriesByType`

          The adapter will need to be registered
          in the application's container as `container-debug-adapter:main`

          Example:

          ```javascript
          Application.initializer({
            name: "containerDebugAdapter",

            initialize: function(container, application) {
              application.register('container-debug-adapter:main', require('app/container-debug-adapter'));
            }
          });
          ```

          @class ContainerDebugAdapter
          @namespace Ember
          @extends EmberObject
          @since 1.5.0
        */
        var ContainerDebugAdapter = ember$runtime$system$object$$default.extend({
          /**
            The container of the application being debugged.
            This property will be injected
            on creation.

            @property container
            @default null
          */
          container: null,

          /**
            The resolver instance of the application
            being debugged. This property will be injected
            on creation.

            @property resolver
            @default null
          */
          resolver: null,

          /**
            Returns true if it is possible to catalog a list of available
            classes in the resolver for a given type.

            @method canCatalogEntriesByType
            @param {string} type The type. e.g. "model", "controller", "route"
            @return {boolean} whether a list is available for this type.
          */
          canCatalogEntriesByType: function(type) {
            if (type === 'model' || type === 'template') return false;
            return true;
          },

          /**
            Returns the available classes a given type.

            @method catalogEntriesByType
            @param {string} type The type. e.g. "model", "controller", "route"
            @return {Array} An array of strings.
          */
          catalogEntriesByType: function(type) {
            var namespaces = ember$metal$core$$default.A(ember$runtime$system$namespace$$default.NAMESPACES), types = ember$metal$core$$default.A(), self = this;
            var typeSuffixRegex = new RegExp(ember$runtime$system$string$$classify(type) + "$");

            namespaces.forEach(function(namespace) {
              if (namespace !== ember$metal$core$$default) {
                for (var key in namespace) {
                  if (!namespace.hasOwnProperty(key)) { continue; }
                  if (typeSuffixRegex.test(key)) {
                    var klass = namespace[key];
                    if (ember$metal$utils$$typeOf(klass) === 'class') {
                      types.push(ember$runtime$system$string$$dasherize(key.replace(typeSuffixRegex, '')));
                    }
                  }
                }
              }
            });
            return types;
          }
        });

        ember$extension$support$container_debug_adapter$$default = ContainerDebugAdapter;
    }).call(this);

    (function() {
        var K = ember$metal$$default.K;

        function DeprecatedContainer(container) {
          this._container = container;
        }

        DeprecatedContainer.deprecate = function(method) {
          return function() {
            var container = this._container;

            ember$metal$$default.deprecate('Using the defaultContainer is no longer supported. [defaultContainer#' + method + '] see: http://git.io/EKPpnA', false);
            return container[method].apply(container, arguments);
          };
        };

        DeprecatedContainer.prototype = {
          _container: null,
          lookup: DeprecatedContainer.deprecate('lookup'),
          resolve: DeprecatedContainer.deprecate('resolve'),
          register: DeprecatedContainer.deprecate('register')
        };

        /**
          An instance of `Ember.Application` is the starting point for every Ember
          application. It helps to instantiate, initialize and coordinate the many
          objects that make up your app.

          Each Ember app has one and only one `Ember.Application` object. In fact, the
          very first thing you should do in your application is create the instance:

          ```javascript
          window.App = Ember.Application.create();
          ```

          Typically, the application object is the only global variable. All other
          classes in your app should be properties on the `Ember.Application` instance,
          which highlights its first role: a global namespace.

          For example, if you define a view class, it might look like this:

          ```javascript
          App.MyView = Ember.View.extend();
          ```

          By default, calling `Ember.Application.create()` will automatically initialize
          your application by calling the `Ember.Application.initialize()` method. If
          you need to delay initialization, you can call your app's `deferReadiness()`
          method. When you are ready for your app to be initialized, call its
          `advanceReadiness()` method.

          You can define a `ready` method on the `Ember.Application` instance, which
          will be run by Ember when the application is initialized.

          Because `Ember.Application` inherits from `Ember.Namespace`, any classes
          you create will have useful string representations when calling `toString()`.
          See the `Ember.Namespace` documentation for more information.

          While you can think of your `Ember.Application` as a container that holds the
          other classes in your application, there are several other responsibilities
          going on under-the-hood that you may want to understand.

          ### Event Delegation

          Ember uses a technique called _event delegation_. This allows the framework
          to set up a global, shared event listener instead of requiring each view to
          do it manually. For example, instead of each view registering its own
          `mousedown` listener on its associated element, Ember sets up a `mousedown`
          listener on the `body`.

          If a `mousedown` event occurs, Ember will look at the target of the event and
          start walking up the DOM node tree, finding corresponding views and invoking
          their `mouseDown` method as it goes.

          `Ember.Application` has a number of default events that it listens for, as
          well as a mapping from lowercase events to camel-cased view method names. For
          example, the `keypress` event causes the `keyPress` method on the view to be
          called, the `dblclick` event causes `doubleClick` to be called, and so on.

          If there is a bubbling browser event that Ember does not listen for by
          default, you can specify custom events and their corresponding view method
          names by setting the application's `customEvents` property:

          ```javascript
          App = Ember.Application.create({
            customEvents: {
              // add support for the paste event
              paste: "paste"
            }
          });
          ```

          By default, the application sets up these event listeners on the document
          body. However, in cases where you are embedding an Ember application inside
          an existing page, you may want it to set up the listeners on an element
          inside the body.

          For example, if only events inside a DOM element with the ID of `ember-app`
          should be delegated, set your application's `rootElement` property:

          ```javascript
          window.App = Ember.Application.create({
            rootElement: '#ember-app'
          });
          ```

          The `rootElement` can be either a DOM element or a jQuery-compatible selector
          string. Note that *views appended to the DOM outside the root element will
          not receive events.* If you specify a custom root element, make sure you only
          append views inside it!

          To learn more about the advantages of event delegation and the Ember view
          layer, and a list of the event listeners that are setup by default, visit the
          [Ember View Layer guide](http://emberjs.com/guides/understanding-ember/the-view-layer/#toc_event-delegation).

          ### Initializers

          Libraries on top of Ember can add initializers, like so:

          ```javascript
          Ember.Application.initializer({
            name: 'api-adapter',

            initialize: function(container, application) {
              application.register('api-adapter:main', ApiAdapter);
            }
          });
          ```

          Initializers provide an opportunity to access the container, which
          organizes the different components of an Ember application. Additionally
          they provide a chance to access the instantiated application. Beyond
          being used for libraries, initializers are also a great way to organize
          dependency injection or setup in your own application.

          ### Routing

          In addition to creating your application's router, `Ember.Application` is
          also responsible for telling the router when to start routing. Transitions
          between routes can be logged with the `LOG_TRANSITIONS` flag, and more
          detailed intra-transition logging can be logged with
          the `LOG_TRANSITIONS_INTERNAL` flag:

          ```javascript
          window.App = Ember.Application.create({
            LOG_TRANSITIONS: true, // basic logging of successful transitions
            LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps
          });
          ```

          By default, the router will begin trying to translate the current URL into
          application state once the browser emits the `DOMContentReady` event. If you
          need to defer routing, you can call the application's `deferReadiness()`
          method. Once routing can begin, call the `advanceReadiness()` method.

          If there is any setup required before routing begins, you can implement a
          `ready()` method on your app that will be invoked immediately before routing
          begins.
          ```

          @class Application
          @namespace Ember
          @extends Ember.Namespace
        */

        var Application = ember$runtime$system$namespace$$default.extend(ember$runtime$mixins$deferred$$default, {

          /**
            The root DOM element of the Application. This can be specified as an
            element or a
            [jQuery-compatible selector string](http://api.jquery.com/category/selectors/).

            This is the element that will be passed to the Application's,
            `eventDispatcher`, which sets up the listeners for event delegation. Every
            view in your application should be a child of the element you specify here.

            @property rootElement
            @type DOMElement
            @default 'body'
          */
          rootElement: 'body',

          /**
            The `Ember.EventDispatcher` responsible for delegating events to this
            application's views.

            The event dispatcher is created by the application at initialization time
            and sets up event listeners on the DOM element described by the
            application's `rootElement` property.

            See the documentation for `Ember.EventDispatcher` for more information.

            @property eventDispatcher
            @type Ember.EventDispatcher
            @default null
          */
          eventDispatcher: null,

          /**
            The DOM events for which the event dispatcher should listen.

            By default, the application's `Ember.EventDispatcher` listens
            for a set of standard DOM events, such as `mousedown` and
            `keyup`, and delegates them to your application's `Ember.View`
            instances.

            If you would like additional bubbling events to be delegated to your
            views, set your `Ember.Application`'s `customEvents` property
            to a hash containing the DOM event name as the key and the
            corresponding view method name as the value. For example:

            ```javascript
            App = Ember.Application.create({
              customEvents: {
                // add support for the paste event
                paste: "paste"
              }
            });
            ```

            @property customEvents
            @type Object
            @default null
          */
          customEvents: null,

          // Start off the number of deferrals at 1. This will be
          // decremented by the Application's own `initialize` method.
          _readinessDeferrals: 1,

          init: function() {
            if (!this.$) { this.$ = ember$views$system$jquery$$default; }
            this.__container__ = this.buildContainer();

            this.Router = this.defaultRouter();

            this._super();

            this.scheduleInitialize();

            ember$metal$$default.libraries.registerCoreLibrary('Handlebars', ember$handlebars$compiler$$default.VERSION);
            ember$metal$$default.libraries.registerCoreLibrary('jQuery', ember$views$system$jquery$$default().jquery);

            if ( ember$metal$$default.LOG_VERSION ) {
              ember$metal$$default.LOG_VERSION = false; // we only need to see this once per Application#init

              var nameLengths = ember$metal$enumerable_utils$$default.map(ember$metal$$default.libraries, function(item) {
                return ember$metal$property_get$$get(item, "name.length");
              });

              var maxNameLength = Math.max.apply(this, nameLengths);

              ember$metal$$default.debug('-------------------------------');
              ember$metal$$default.libraries.each(function(name, version) {
                var spaces = new Array(maxNameLength - name.length + 1).join(" ");
                ember$metal$$default.debug([name, spaces, ' : ', version].join(""));
              });
              ember$metal$$default.debug('-------------------------------');
            }
          },

          /**
            Build the container for the current application.

            Also register a default application view in case the application
            itself does not.

            @private
            @method buildContainer
            @return {Ember.Container} the configured container
          */
          buildContainer: function() {
            var container = this.__container__ = Application.buildContainer(this);

            return container;
          },

          /**
            If the application has not opted out of routing and has not explicitly
            defined a router, supply a default router for the application author
            to configure.

            This allows application developers to do:

            ```javascript
            var App = Ember.Application.create();

            App.Router.map(function() {
              this.resource('posts');
            });
            ```

            @private
            @method defaultRouter
            @return {Ember.Router} the default router
          */

          defaultRouter: function() {
            if (this.Router === false) { return; }
            var container = this.__container__;

            if (this.Router) {
              container.unregister('router:main');
              container.register('router:main', this.Router);
            }

            return container.lookupFactory('router:main');
          },

          /**
            Automatically initialize the application once the DOM has
            become ready.

            The initialization itself is scheduled on the actions queue
            which ensures that application loading finishes before
            booting.

            If you are asynchronously loading code, you should call
            `deferReadiness()` to defer booting, and then call
            `advanceReadiness()` once all of your code has finished
            loading.

            @private
            @method scheduleInitialize
          */
          scheduleInitialize: function() {
            var self = this;

            if (!this.$ || this.$.isReady) {
              ember$metal$run_loop$$default.schedule('actions', self, '_initialize');
            } else {
              this.$().ready(function runInitialize() {
                ember$metal$run_loop$$default(self, '_initialize');
              });
            }
          },

          /**
            Use this to defer readiness until some condition is true.

            Example:

            ```javascript
            App = Ember.Application.create();
            App.deferReadiness();

            jQuery.getJSON("/auth-token", function(token) {
              App.token = token;
              App.advanceReadiness();
            });
            ```

            This allows you to perform asynchronous setup logic and defer
            booting your application until the setup has finished.

            However, if the setup requires a loading UI, it might be better
            to use the router for this purpose.

            @method deferReadiness
          */
          deferReadiness: function() {
            ember$metal$$default.assert("You must call deferReadiness on an instance of Ember.Application", this instanceof Application);
            ember$metal$$default.assert("You cannot defer readiness since the `ready()` hook has already been called.", this._readinessDeferrals > 0);
            this._readinessDeferrals++;
          },

          /**
            Call `advanceReadiness` after any asynchronous setup logic has completed.
            Each call to `deferReadiness` must be matched by a call to `advanceReadiness`
            or the application will never become ready and routing will not begin.

            @method advanceReadiness
            @see {Ember.Application#deferReadiness}
          */
          advanceReadiness: function() {
            ember$metal$$default.assert("You must call advanceReadiness on an instance of Ember.Application", this instanceof Application);
            this._readinessDeferrals--;

            if (this._readinessDeferrals === 0) {
              ember$metal$run_loop$$default.once(this, this.didBecomeReady);
            }
          },

          /**
            Registers a factory that can be used for dependency injection (with
            `App.inject`) or for service lookup. Each factory is registered with
            a full name including two parts: `type:name`.

            A simple example:

            ```javascript
            var App = Ember.Application.create();
            App.Orange  = Ember.Object.extend();
            App.register('fruit:favorite', App.Orange);
            ```

            Ember will resolve factories from the `App` namespace automatically.
            For example `App.CarsController` will be discovered and returned if
            an application requests `controller:cars`.

            An example of registering a controller with a non-standard name:

            ```javascript
            var App = Ember.Application.create(),
                Session  = Ember.Controller.extend();

            App.register('controller:session', Session);

            // The Session controller can now be treated like a normal controller,
            // despite its non-standard name.
            App.ApplicationController = Ember.Controller.extend({
              needs: ['session']
            });
            ```

            Registered factories are **instantiated** by having `create`
            called on them. Additionally they are **singletons**, each time
            they are looked up they return the same instance.

            Some examples modifying that default behavior:

            ```javascript
            var App = Ember.Application.create();

            App.Person  = Ember.Object.extend();
            App.Orange  = Ember.Object.extend();
            App.Email   = Ember.Object.extend();
            App.session = Ember.Object.create();

            App.register('model:user', App.Person, {singleton: false });
            App.register('fruit:favorite', App.Orange);
            App.register('communication:main', App.Email, {singleton: false});
            App.register('session', App.session, {instantiate: false});
            ```

            @method register
            @param  fullName {String} type:name (e.g., 'model:user')
            @param  factory {Function} (e.g., App.Person)
            @param  options {Object} (optional) disable instantiation or singleton usage
          **/
          register: function() {
            var container = this.__container__;
            container.register.apply(container, arguments);
          },

          /**
            Define a dependency injection onto a specific factory or all factories
            of a type.

            When Ember instantiates a controller, view, or other framework component
            it can attach a dependency to that component. This is often used to
            provide services to a set of framework components.

            An example of providing a session object to all controllers:

            ```javascript
            var App = Ember.Application.create(),
                Session = Ember.Object.extend({ isAuthenticated: false });

            // A factory must be registered before it can be injected
            App.register('session:main', Session);

            // Inject 'session:main' onto all factories of the type 'controller'
            // with the name 'session'
            App.inject('controller', 'session', 'session:main');

            App.IndexController = Ember.Controller.extend({
              isLoggedIn: Ember.computed.alias('session.isAuthenticated')
            });
            ```

            Injections can also be performed on specific factories.

            ```javascript
            App.inject(<full_name or type>, <property name>, <full_name>)
            App.inject('route', 'source', 'source:main')
            App.inject('route:application', 'email', 'model:email')
            ```

            It is important to note that injections can only be performed on
            classes that are instantiated by Ember itself. Instantiating a class
            directly (via `create` or `new`) bypasses the dependency injection
            system.

            Ember-Data instantiates its models in a unique manner, and consequently
            injections onto models (or all models) will not work as expected. Injections
            on models can be enabled by setting `Ember.MODEL_FACTORY_INJECTIONS`
            to `true`.

            @method inject
            @param  factoryNameOrType {String}
            @param  property {String}
            @param  injectionName {String}
          **/
          inject: function() {
            var container = this.__container__;
            container.injection.apply(container, arguments);
          },

          /**
            Calling initialize manually is not supported.

            Please see Ember.Application#advanceReadiness and
            Ember.Application#deferReadiness.

            @private
            @deprecated
            @method initialize
           **/
          initialize: function() {
            ember$metal$$default.deprecate('Calling initialize manually is not supported. Please see Ember.Application#advanceReadiness and Ember.Application#deferReadiness');
          },

          /**
            Initialize the application. This happens automatically.

            Run any initializers and run the application load hook. These hooks may
            choose to defer readiness. For example, an authentication hook might want
            to defer readiness until the auth token has been retrieved.

            @private
            @method _initialize
          */
          _initialize: function() {
            if (this.isDestroyed) { return; }

            // At this point, the App.Router must already be assigned
            if (this.Router) {
              var container = this.__container__;
              container.unregister('router:main');
              container.register('router:main', this.Router);
            }

            this.runInitializers();
            ember$runtime$system$lazy_load$$runLoadHooks('application', this);

            // At this point, any initializers or load hooks that would have wanted
            // to defer readiness have fired. In general, advancing readiness here
            // will proceed to didBecomeReady.
            this.advanceReadiness();

            return this;
          },

          /**
            Reset the application. This is typically used only in tests. It cleans up
            the application in the following order:

            1. Deactivate existing routes
            2. Destroy all objects in the container
            3. Create a new application container
            4. Re-route to the existing url

            Typical Example:

            ```javascript

            var App;

            run(function() {
              App = Ember.Application.create();
            });

            module("acceptance test", {
              setup: function() {
                App.reset();
              }
            });

            test("first test", function() {
              // App is freshly reset
            });

            test("first test", function() {
              // App is again freshly reset
            });
            ```

            Advanced Example:

            Occasionally you may want to prevent the app from initializing during
            setup. This could enable extra configuration, or enable asserting prior
            to the app becoming ready.

            ```javascript

            var App;

            run(function() {
              App = Ember.Application.create();
            });

            module("acceptance test", {
              setup: function() {
                run(function() {
                  App.reset();
                  App.deferReadiness();
                });
              }
            });

            test("first test", function() {
              ok(true, 'something before app is initialized');

              run(function() {
                App.advanceReadiness();
              });
              ok(true, 'something after app is initialized');
            });
            ```

            @method reset
          **/
          reset: function() {
            this._readinessDeferrals = 1;

            function handleReset() {
              var router = this.__container__.lookup('router:main');
              router.reset();

              ember$metal$run_loop$$default(this.__container__, 'destroy');

              this.buildContainer();

              ember$metal$run_loop$$default.schedule('actions', this, function() {
                this._initialize();
              });
            }

            ember$metal$run_loop$$default.join(this, handleReset);
          },

          /**
            @private
            @method runInitializers
          */
          runInitializers: function() {
            var initializers = ember$metal$property_get$$get(this.constructor, 'initializers'),
                container = this.__container__,
                graph = new ember$application$system$dag$$default(),
                namespace = this,
                name, initializer;

            for (name in initializers) {
              initializer = initializers[name];
              graph.addEdges(initializer.name, initializer.initialize, initializer.before, initializer.after);
            }

            graph.topsort(function (vertex) {
              var initializer = vertex.value;
              ember$metal$$default.assert("No application initializer named '"+vertex.name+"'", initializer);
              initializer(container, namespace);
            });
          },

          /**
            @private
            @method didBecomeReady
          */
          didBecomeReady: function() {
            this.setupEventDispatcher();
            this.ready(); // user hook
            this.startRouting();

            if (!ember$metal$$default.testing) {
              // Eagerly name all classes that are already loaded
              ember$runtime$system$namespace$$default.processAll();
              ember$metal$$default.BOOTED = true;
            }

            this.resolve(this);
          },

          /**
            Setup up the event dispatcher to receive events on the
            application's `rootElement` with any registered
            `customEvents`.

            @private
            @method setupEventDispatcher
          */
          setupEventDispatcher: function() {
            var customEvents = ember$metal$property_get$$get(this, 'customEvents'),
                rootElement = ember$metal$property_get$$get(this, 'rootElement'),
                dispatcher = this.__container__.lookup('event_dispatcher:main');

            ember$metal$property_set$$set(this, 'eventDispatcher', dispatcher);
            dispatcher.setup(customEvents, rootElement);
          },

          /**
            If the application has a router, use it to route to the current URL, and
            trigger a new call to `route` whenever the URL changes.

            @private
            @method startRouting
            @property router {Ember.Router}
          */
          startRouting: function() {
            var router = this.__container__.lookup('router:main');
            if (!router) { return; }

            router.startRouting();
          },

          handleURL: function(url) {
            var router = this.__container__.lookup('router:main');

            router.handleURL(url);
          },

          /**
            Called when the Application has become ready.
            The call will be delayed until the DOM has become ready.

            @event ready
          */
          ready: K,

          /**
            @deprecated Use 'Resolver' instead
            Set this to provide an alternate class to `Ember.DefaultResolver`


            @property resolver
          */
          resolver: null,

          /**
            Set this to provide an alternate class to `Ember.DefaultResolver`

            @property resolver
          */
          Resolver: null,

          willDestroy: function() {
            ember$metal$$default.BOOTED = false;
            // Ensure deactivation of routes before objects are destroyed
            this.__container__.lookup('router:main').reset();

            this.__container__.destroy();
          },

          initializer: function(options) {
            this.constructor.initializer(options);
          }
        });

        Application.reopenClass({
          initializers: {},
          initializer: function(initializer) {
            // If this is the first initializer being added to a subclass, we are going to reopen the class
            // to make sure we have a new `initializers` object, which extends from the parent class' using
            // prototypal inheritance. Without this, attempting to add initializers to the subclass would
            // pollute the parent class as well as other subclasses.
            if (this.superclass.initializers !== undefined && this.superclass.initializers === this.initializers) {
              this.reopenClass({
                initializers: ember$metal$platform$$create(this.initializers)
              });
            }

            ember$metal$$default.assert("The initializer '" + initializer.name + "' has already been registered", !this.initializers[initializer.name]);
            ember$metal$$default.assert("An initializer cannot be registered with both a before and an after", !(initializer.before && initializer.after));
            ember$metal$$default.assert("An initializer cannot be registered without an initialize function", ember$metal$utils$$canInvoke(initializer, 'initialize'));

            this.initializers[initializer.name] = initializer;
          },

          /**
            This creates a container with the default Ember naming conventions.

            It also configures the container:

            * registered views are created every time they are looked up (they are
              not singletons)
            * registered templates are not factories; the registered value is
              returned directly.
            * the router receives the application as its `namespace` property
            * all controllers receive the router as their `target` and `controllers`
              properties
            * all controllers receive the application as their `namespace` property
            * the application view receives the application controller as its
              `controller` property
            * the application view receives the application template as its
              `defaultTemplate` property

            @private
            @method buildContainer
            @static
            @param {Ember.Application} namespace the application to build the
              container for.
            @return {Ember.Container} the built container
          */
          buildContainer: function(namespace) {
            var container = new container$container$$default();

            container$container$$default.defaultContainer = new DeprecatedContainer(container);

            container.set = ember$metal$property_set$$set;
            container.resolver  = resolverFor(namespace);
            container.normalize = container.resolver.normalize;
            container.describe  = container.resolver.describe;
            container.makeToString = container.resolver.makeToString;

            container.optionsForType('component', { singleton: false });
            container.optionsForType('view', { singleton: false });
            container.optionsForType('template', { instantiate: false });
            container.optionsForType('helper', { instantiate: false });

            container.register('application:main', namespace, { instantiate: false });

            container.register('controller:basic', ember$runtime$controllers$controller$$Controller, { instantiate: false });
            container.register('controller:object', ember$runtime$controllers$object_controller$$default, { instantiate: false });
            container.register('controller:array', ember$runtime$controllers$array_controller$$default, { instantiate: false });
            container.register('route:basic', ember$routing$system$route$$default, { instantiate: false });
            container.register('event_dispatcher:main', ember$views$system$event_dispatcher$$default);

            container.register('router:main',  ember$routing$system$router$$default);
            container.injection('router:main', 'namespace', 'application:main');

            container.register('location:auto', ember$routing$location$auto_location$$default);
            container.register('location:hash', ember$routing$location$hash_location$$default);
            container.register('location:history', ember$routing$location$history_location$$default);
            container.register('location:none', ember$routing$location$none_location$$default);

            container.injection('controller', 'target', 'router:main');
            container.injection('controller', 'namespace', 'application:main');

            container.injection('route', 'router', 'router:main');
            container.injection('location', 'rootURL', '-location-setting:root-url');

            // DEBUGGING
            container.register('resolver-for-debugging:main', container.resolver.__resolver__, { instantiate: false });
            container.injection('container-debug-adapter:main', 'resolver', 'resolver-for-debugging:main');
            container.injection('data-adapter:main', 'containerDebugAdapter', 'container-debug-adapter:main');
            // Custom resolver authors may want to register their own ContainerDebugAdapter with this key
            container.register('container-debug-adapter:main', ember$extension$support$container_debug_adapter$$default);

            return container;
          }
        });

        /**
          This function defines the default lookup rules for container lookups:

          * templates are looked up on `Ember.TEMPLATES`
          * other names are looked up on the application after classifying the name.
            For example, `controller:post` looks up `App.PostController` by default.
          * if the default lookup fails, look for registered classes on the container

          This allows the application to register default injections in the container
          that could be overridden by the normal naming convention.

          @private
          @method resolverFor
          @param {Ember.Namespace} namespace the namespace to look for classes
          @return {*} the resolved value for a given lookup
        */
        function resolverFor(namespace) {
          if (namespace.get('resolver')) {
            ember$metal$$default.deprecate('Application.resolver is deprecated in favor of Application.Resolver', false);
          }

          var ResolverClass = namespace.get('resolver') || namespace.get('Resolver') || ember$application$system$resolver$$DefaultResolver;
          var resolver = ResolverClass.create({
            namespace: namespace
          });

          function resolve(fullName) {
            return resolver.resolve(fullName);
          }

          resolve.describe = function(fullName) {
            return resolver.lookupDescription(fullName);
          };

          resolve.makeToString = function(factory, fullName) {
            return resolver.makeToString(factory, fullName);
          };

          resolve.normalize = function(fullName) {
            if (resolver.normalize) {
              return resolver.normalize(fullName);
            } else {
              ember$metal$$default.deprecate('The Resolver should now provide a \'normalize\' function', false);
              return fullName;
            }
          };

          resolve.__resolver__ = resolver;

          return resolve;
        }

        ember$application$system$application$$default = Application;
    }).call(this);

    (function() {
        function verifyNeedsDependencies(controller, container, needs) {
          var dependency, i, l, missing = [];

          for (i=0, l=needs.length; i<l; i++) {
            dependency = needs[i];

            ember$metal$core$$default.assert(ember$metal$utils$$inspect(controller) + "#needs must not specify dependencies with periods in their names (" + dependency + ")", dependency.indexOf('.') === -1);

            if (dependency.indexOf(':') === -1) {
              dependency = "controller:" + dependency;
            }

            // Structure assert to still do verification but not string concat in production
            if (!container.has(dependency)) {
              missing.push(dependency);
            }
          }
          if (missing.length) {
            throw new ember$metal$error$$default(ember$metal$utils$$inspect(controller) + " needs [ " + missing.join(', ') + " ] but " + (missing.length > 1 ? 'they' : 'it') + " could not be found");
          }
        }

        var defaultControllersComputedProperty = ember$metal$computed$$computed(function() {
          var controller = this;

          return {
            needs: ember$metal$property_get$$get(controller, 'needs'),
            container: ember$metal$property_get$$get(controller, 'container'),
            unknownProperty: function(controllerName) {
              var needs = this.needs,
                dependency, i, l;
              for (i=0, l=needs.length; i<l; i++) {
                dependency = needs[i];
                if (dependency === controllerName) {
                  return this.container.lookup('controller:' + controllerName);
                }
              }

              var errorMessage = ember$metal$utils$$inspect(controller) + '#needs does not include `' + controllerName + '`. To access the ' + controllerName + ' controller from ' + ember$metal$utils$$inspect(controller) + ', ' + ember$metal$utils$$inspect(controller) + ' should have a `needs` property that is an array of the controllers it has access to.';
              throw new ReferenceError(errorMessage);
            },
            setUnknownProperty: function (key, value) {
              throw new Error("You cannot overwrite the value of `controllers." + key + "` of " + ember$metal$utils$$inspect(controller));
            }
          };
        });

        /**
          @class ControllerMixin
          @namespace Ember
        */
        ember$runtime$controllers$controller$$ControllerMixin.reopen({
          concatenatedProperties: ['needs'],

          /**
            An array of other controller objects available inside
            instances of this controller via the `controllers`
            property:

            For example, when you define a controller:

            ```javascript
            App.CommentsController = Ember.ArrayController.extend({
              needs: ['post']
            });
            ```

            The application's single instance of these other
            controllers are accessible by name through the
            `controllers` property:

            ```javascript
            this.get('controllers.post'); // instance of App.PostController
            ```

            Given that you have a nested controller (nested resource):

            ```javascript
            App.CommentsNewController = Ember.ObjectController.extend({
            });
            ```

            When you define a controller that requires access to a nested one:

            ```javascript
            App.IndexController = Ember.ObjectController.extend({
              needs: ['commentsNew']
            });
            ```

            You will be able to get access to it:

            ```javascript
            this.get('controllers.commentsNew'); // instance of App.CommentsNewController
            ```

            This is only available for singleton controllers.

            @property {Array} needs
            @default []
          */
          needs: [],

          init: function() {
            var needs = ember$metal$property_get$$get(this, 'needs'),
            length = ember$metal$property_get$$get(needs, 'length');

            if (length > 0) {
              ember$metal$core$$default.assert(' `' + ember$metal$utils$$inspect(this) + ' specifies `needs`, but does ' +
                           "not have a container. Please ensure this controller was " +
                           "instantiated with a container.",
                           this.container || ember$metal$utils$$meta(this, false).descs.controllers !== defaultControllersComputedProperty);

              if (this.container) {
                verifyNeedsDependencies(this, this.container, needs);
              }

              // if needs then initialize controllers proxy
              ember$metal$property_get$$get(this, 'controllers');
            }

            this._super.apply(this, arguments);
          },

          /**
            @method controllerFor
            @see {Ember.Route#controllerFor}
            @deprecated Use `needs` instead
          */
          controllerFor: function(controllerName) {
            ember$metal$core$$default.deprecate("Controller#controllerFor is deprecated, please use Controller#needs instead");
            return ember$routing$system$controller_for$$controllerFor(ember$metal$property_get$$get(this, 'container'), controllerName);
          },

          /**
            Stores the instances of other controllers available from within
            this controller. Any controller listed by name in the `needs`
            property will be accessible by name through this property.

            ```javascript
            App.CommentsController = Ember.ArrayController.extend({
              needs: ['post'],
              postTitle: function(){
                var currentPost = this.get('controllers.post'); // instance of App.PostController
                return currentPost.get('title');
              }.property('controllers.post.title')
            });
            ```

            @see {Ember.ControllerMixin#needs}
            @property {Object} controllers
            @default null
          */
          controllers: defaultControllersComputedProperty
        });

        ember$application$ext$controller$$default = ember$runtime$controllers$controller$$ControllerMixin;
    }).call(this);

    (function() {
        ember$metal$core$$default.Application = ember$application$system$application$$default;
        ember$metal$core$$default.DAG = ember$application$system$dag$$default;
        ember$metal$core$$default.Resolver = ember$application$system$resolver$$Resolver;
        ember$metal$core$$default.DefaultResolver = ember$application$system$resolver$$DefaultResolver;
        ember$runtime$system$lazy_load$$runLoadHooks('Ember.Application', ember$application$system$application$$default);
    }).call(this);
}).call(this);